{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1528648282812},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1528648282812},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1528648282813},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1528648282813},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1528648282813},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1528648282816},{"_id":"source/_posts/Hello-Blog.md","hash":"75ee3a88ba985bcc78007e057c5a4f2fe3207622","modified":1528650307757},{"_id":"source/_posts/PC-Part1.md","hash":"871a052a7d5655aeccdc05f9dd2899ffe058f419","modified":1528650307757},{"_id":"source/_posts/fix-ubuntu-path.md","hash":"f1a49a72fc44fe02af7780dcb8dc99b7cfd2c014","modified":1528650307758},{"_id":"source/_posts/how-to-synchronize-blog.md","hash":"7336fbeb40a4769d31e08526039de3d3a7e94a31","modified":1528650307758},{"_id":"source/_posts/pc10.md","hash":"a39f43151075f8dd8c00e0bebe96edaf6401d361","modified":1528650307759},{"_id":"source/_posts/pc11.md","hash":"8e830f196c5fdfd5fc9052422187219ccb36df08","modified":1528650307759},{"_id":"source/_posts/pc12.md","hash":"2290ca51908396e6f28e0779867e8d492c8dd0fe","modified":1528650307760},{"_id":"source/_posts/pc14.md","hash":"d153a85ed24b7eed93ff1cdfb77d1d3919f9598f","modified":1528650307760},{"_id":"source/_posts/pc13.md","hash":"3edd583678f06bfb0d9c72859a228595fa849524","modified":1528650307760},{"_id":"source/_posts/pc15.md","hash":"74566b8918bf1edc1efca1b2a50fd68a0e678499","modified":1528650307761},{"_id":"source/_posts/pc16.md","hash":"f29ca7e571ca072aee93b1a559acce3ca608e07d","modified":1528650307761},{"_id":"source/_posts/pc17.md","hash":"404ee1b81464822421aee809b1b576071b340c99","modified":1528650307762},{"_id":"source/_posts/pc18.md","hash":"4d269266fc9b43b407296691adf5ee347a143162","modified":1528650307762},{"_id":"source/_posts/pc19.md","hash":"276ec744bf968d71a38d967c4cc851ed1ba4d8f4","modified":1528650307763},{"_id":"source/_posts/pc20.md","hash":"91a34bae2c4100b704c8bbbacef3f2143eb28e8d","modified":1528650307763},{"_id":"source/_posts/pc21.md","hash":"29e37d471b81b732788fbea9d7de9cc2c0f6c98a","modified":1528650307764},{"_id":"source/_posts/pc22.md","hash":"60946537732e9487d7e4c0a3c804e09a9a55b911","modified":1528650307764},{"_id":"source/_posts/pc24.md","hash":"f9492e6900e8db0d325332a3ec23832393b7279c","modified":1528650307765},{"_id":"source/_posts/pc23.md","hash":"7b57cc6079d5dfb24b3ddcd03469c638274678e3","modified":1528650307764},{"_id":"source/_posts/pc25.md","hash":"a64da0861d489eeee109a148acb6aabc4f789510","modified":1528650307765},{"_id":"source/_posts/pc26.md","hash":"ca0f70e248df6030120beb2f6989e0dacac811ca","modified":1528650307766},{"_id":"source/_posts/pc27.md","hash":"f40a4ba5a22340c6b9398915abf7929fe88592b9","modified":1528650307766},{"_id":"source/_posts/pc28.md","hash":"ebdb3fe595ecfd373ce61abf787cf8895a87c98b","modified":1528650307767},{"_id":"source/_posts/pc29.md","hash":"0752036b8bef83dd3d9fccaea585e8f0263fa897","modified":1528650307767},{"_id":"source/_posts/pc30.md","hash":"af89da588a5e0556ff38b30a2fd66ab1be9a8a4b","modified":1528650307768},{"_id":"source/_posts/pc32.md","hash":"bdfa0e29c43988737f58b36978b190456f5c730d","modified":1528650307769},{"_id":"source/_posts/pc31.md","hash":"33839cab31498d68ac54964c35452ab7244d6c27","modified":1528650307768},{"_id":"source/_posts/pc33.md","hash":"f058ab054094a8726935510216a0ae2d88dd60c4","modified":1528650307769},{"_id":"source/_posts/pc6.md","hash":"fb6caaade4014f3ce5150f2756ea24429f1946d2","modified":1528650307770},{"_id":"source/_posts/pc8.md","hash":"5ff11635f7748ded7e986e462334653a6ada69be","modified":1528650307771},{"_id":"source/_posts/pc7.md","hash":"e4bde21ece90cbcb65a728df9e3a2e6ada64605b","modified":1528650307770},{"_id":"source/_posts/pc9.md","hash":"a95f1b990678bd4ddea4ed4961fc7b83b3cf142c","modified":1528650307771},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1528648282830},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1528648282831},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1528648282831},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1528648282831},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1528648282831},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1528648282831},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1528648282831},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1528648282831},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1528648282831},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1528648282831},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1528648282831},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528648282832},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528648282831},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1528648282832},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1528648282831},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1528648282850},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1528648282850},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1528648282850},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1528648282850},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1528648282850},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1528648282850},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1528648282851},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1528648282851},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1528648282851},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1528648282851},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1528648282850},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1528648282852},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1528648282852},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1528648282852},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1528648282852},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1528648282850},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1528648282852},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1528648282852},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528648282850},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528648282851},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528648282851},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528648282851},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528648282851},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528648282851},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1528648282852},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1528648282852},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1528648282852},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1528648282853},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1528648282863},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1528648282864},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1528648282864},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1528648282864},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1528648282864},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1528648282864},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1528648282865},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1528648282864},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1528648282865},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1528648282864},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1528648282865},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1528648282865},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1528648282865},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1528648282865},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1528648282865},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1528648282865},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1528648282864},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1528648282865},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1528648282864},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1528648282865},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1528648282865},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528648282863},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528648282864},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1528648282864},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1528648282864},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528648282864},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1528648282864},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1528648282867},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1528648282868},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1528648282868},{"_id":"public/archives/index.html","hash":"0d3d41f5d6b3a6735a37a4b0defd0dc8ec83cf87","modified":1528650523582},{"_id":"public/index.html","hash":"83978c3a03fe18ea0e68b544d4fcfddc267ef556","modified":1528650523585},{"_id":"public/2015/02/17/pc33/index.html","hash":"c27f95c1ad9f099f53bf920a925c6ccba93a2f22","modified":1528650523579},{"_id":"public/2015/08/25/fix-ubuntu-path/index.html","hash":"8cc2b7728d861790f888e412ad2ad4fb7af8ccd9","modified":1528650523579},{"_id":"public/2015/02/13/pc30/index.html","hash":"5934ce6ffaa940bab5bdebd7176599311100b0c7","modified":1528650523580},{"_id":"public/2015/02/14/pc31/index.html","hash":"62c8ed6933688f15c6a9e0c3f7fd54e6a83fcc6e","modified":1528650523580},{"_id":"public/2015/02/12/pc29/index.html","hash":"6537e86da572b2727d7ff8b2e3ad1866ce6cf0c4","modified":1528650523580},{"_id":"public/2015/02/11/pc28/index.html","hash":"a248a50382d603fbbdd37e0cb72db07b28d954a2","modified":1528650523580},{"_id":"public/2015/02/11/pc27/index.html","hash":"4ecba8a66ad4967938a315ef8b3714f8f62f4207","modified":1528650523580},{"_id":"public/2015/02/09/pc26/index.html","hash":"89d54b7a64e9d362c76c4caa6067d233a6f35c25","modified":1528650523581},{"_id":"public/2015/02/08/pc25/index.html","hash":"dc596cafe7dc99a0863dcd2596acd27f72810cd2","modified":1528650523581},{"_id":"public/2015/02/06/pc23/index.html","hash":"76684540a4ffb6dff4020e21a5ec51fbd0fd6d16","modified":1528650523581},{"_id":"public/2015/02/04/pc21/index.html","hash":"8a365a33d78b0138179173026ccf872f40ff0dd0","modified":1528650523581},{"_id":"public/2015/02/05/pc22/index.html","hash":"10af899405d7518f6eecf7223f56ccfc7eeb23c1","modified":1528650523581},{"_id":"public/2015/02/02/pc19/index.html","hash":"d0a59ddfdfada62128a4baaa6898c8f3adf9a6db","modified":1528650523581},{"_id":"public/2015/02/01/pc18/index.html","hash":"c119e6e97d19015057fabad89358d050c37707b6","modified":1528650523581},{"_id":"public/2015/01/31/pc16/index.html","hash":"a6c25640f4a705bd4869bc79a01a7830e09203b5","modified":1528650523581},{"_id":"public/2015/01/31/pc17/index.html","hash":"2fe5cf6529d13885ec302f54a08aa804629e0902","modified":1528650523581},{"_id":"public/2015/01/29/pc15/index.html","hash":"6a0073dd162fa0a6a95314140aa130bf85ead3dc","modified":1528650523581},{"_id":"public/2015/01/27/pc13/index.html","hash":"a541a9ebe6f4d38256e16dae5314a873770c7fc0","modified":1528650523581},{"_id":"public/2015/01/26/pc12/index.html","hash":"299b2a25b1a86e23fbb88c224521f47bb9eb03e4","modified":1528650523581},{"_id":"public/2015/01/25/pc11/index.html","hash":"2bc90f7f038e5c80474dd5f9c2e55c69327981f8","modified":1528650523582},{"_id":"public/2015/01/24/pc10/index.html","hash":"6cf0dd6d0293aad11b28112fcac2a965fb2cf51d","modified":1528650523582},{"_id":"public/2015/01/23/pc9/index.html","hash":"e0180df480b257b90ffb3b87649a1f94667d57bb","modified":1528650523582},{"_id":"public/2015/01/22/pc8/index.html","hash":"cfcfd36396c580ba2a52e272167988d37d8c9f91","modified":1528650523582},{"_id":"public/2015/01/20/pc6/index.html","hash":"b90e0ccc199a370eb22090ff68b61f3e996b62af","modified":1528650523582},{"_id":"public/2015/01/21/pc7/index.html","hash":"a6a5e8b35de4e690a2cc94737f1df466fa292163","modified":1528650523582},{"_id":"public/2015/01/17/how-to-synchronize-blog/index.html","hash":"52d27c5b2b85dfd4df9a0d369d19959fda56e7ef","modified":1528650523582},{"_id":"public/2015/01/15/Hello-Blog/index.html","hash":"528d464a312ebb37245d21df721661b047f98950","modified":1528650523582},{"_id":"public/archives/page/2/index.html","hash":"db80181a02d34dc979758757e3e7b92220d295d1","modified":1528650523582},{"_id":"public/archives/page/4/index.html","hash":"6e42193c2073a8fd07aa32e094ef884e2e425d79","modified":1528650523582},{"_id":"public/archives/page/3/index.html","hash":"008a5c2f35ba97cc41168bb1ef5e4a4b7a50e845","modified":1528650523582},{"_id":"public/archives/2015/index.html","hash":"a85ccc4c53ce742da3516cb36ebc499547694a2e","modified":1528650523582},{"_id":"public/archives/2015/page/2/index.html","hash":"7d1373a6c25355ccf4dec97e215b6ae59a550c4b","modified":1528650523583},{"_id":"public/archives/2015/page/4/index.html","hash":"ae34f447f0217015b79792f7ab58857138754c5a","modified":1528650523583},{"_id":"public/archives/2015/page/3/index.html","hash":"cf889762e4bdf02b042d94676a95ae3bd450e1bb","modified":1528650523583},{"_id":"public/archives/2015/01/index.html","hash":"aa23c440bae72416d5568f6c86ff5c2127704293","modified":1528650523583},{"_id":"public/archives/2015/01/page/2/index.html","hash":"06f8b84881a50e385deb96bbc1ee68c331e21ba2","modified":1528650523583},{"_id":"public/archives/2015/02/index.html","hash":"3ae0146bf95dcb2302b730f6e53085eca883c209","modified":1528650523583},{"_id":"public/archives/2015/02/page/2/index.html","hash":"60c4338c5f10ecb27b055a1965a26b93fef4934f","modified":1528650523583},{"_id":"public/archives/2015/08/index.html","hash":"bdee369ba6c0990ad791c4643162ceea5ce6ed60","modified":1528650523583},{"_id":"public/page/4/index.html","hash":"3a0906799068eea527a61f489eb591894df6d13e","modified":1528650523583},{"_id":"public/tags/Python/index.html","hash":"f24b1217f62f067f7730c18afc96585d2ae30a91","modified":1528650523583},{"_id":"public/tags/Python/page/2/index.html","hash":"037e44152a30eeaa40e3a3de8464363ac5902342","modified":1528650523583},{"_id":"public/tags/Python/page/3/index.html","hash":"0bddbed3823b06f798e8c72516316a26ee779206","modified":1528650523584},{"_id":"public/tags/随笔/index.html","hash":"5d96b57e6aa0b6422a048132425ad302a47a1234","modified":1528650523584},{"_id":"public/2015/02/17/pc32/index.html","hash":"6721d76b48df379f5213b30be35e928a1abbb634","modified":1528650523584},{"_id":"public/2015/02/07/pc24/index.html","hash":"790d9d42e9332e26d3afb40d21f59de7d1965246","modified":1528650523584},{"_id":"public/2015/02/03/pc20/index.html","hash":"e63929d02eabbf05227c39a80e6796c30c8c87bc","modified":1528650523584},{"_id":"public/2015/01/29/pc14/index.html","hash":"861cfdbcd6465c93239ece1cf219e363279927fb","modified":1528650523584},{"_id":"public/2015/01/18/PC-Part1/index.html","hash":"ba858f4fe46e4ace1baa5aea3198ef298bcb94ef","modified":1528650523585},{"_id":"public/page/2/index.html","hash":"5ca9b465ed8fe5c695b196a910c41337b7fe9060","modified":1528650523585},{"_id":"public/page/3/index.html","hash":"a1bbd7b4944a445b5eab765e88927240700cb588","modified":1528650523585},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528650332155},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528650332155},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528650332155},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528650332155},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528650332155},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528650332155},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528650332155},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1528650332155},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1528650332155},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1528650332155},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1528650332621},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1528650332628},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1528650332628},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528650332628},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1528650332628},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1528650332628},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528650332629},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1528650332629},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1528650332629},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1528650332629},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1528650332629},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1528650332632},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1528650332633}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Python Challenge (Level 0-5)","date":"2015-01-18T03:27:25.000Z","_content":"\n[Python Challenge](http://www.pythonchallenge.com/)是一个解题游戏网站, 每解出一道题就会跳到下一题. 目前为止一共有33关. 虽说是Python Challenge, 其实用其他语言,比如Java, C++都是可以的.\n\n[第0关](http://www.pythonchallenge.com/pc/def/0.html)\n提示很明显了, 换一下URL地址. 把地址中的0换成 2^38.\n``` Python\n2 ** 38\n```\n得到第二关地址http://www.pythonchallenge.com/pc/def/274877906944.html\n<!-- more -->\n<br>\n[第1关](http://www.pythonchallenge.com/pc/def/274877906944.html)\n根据图片上的提示, 应该是要做一个映射. 再加上\"think twice\"这个提示, 应该可以猜出是平移映射两位. 这里用到string的translate来完成\n``` Python\nimport string\nintab = string.ascii_lowercase\nouttab = string.ascii_lowercase[2 : ] + string.ascii_lowercase[0 : 2]\ntable = string.maketrans(intab, outtab)\n\"map\".translate(table)\n```\nURL上的\"map\" translate后得到\"ocr\", 这就得到了第三关的地址 http://www.pythonchallenge.com/pc/def/ocr.html\n这一关图片下面有一大段英文, translate后可以得到\n> i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that's why this text is so long. using string.maketrans() is recommended. now apply on the url.\n\n<br>\n[第2关](http://www.pythonchallenge.com/pc/def/ocr.html)\n根据提示, 在网页源码里找到一大段字符串。里面写着“find rare characters in the mess bellow”, 所以要我们统计字符的个数, 找出出现次数少的字符。字符串太长, 就不贴上来了, 假定字符串存在msg里\n``` Python\nfor c in set(msg):\n    print c, msg.count(c)\n# 得到\n'''\n1219\n! 6079\n# 6115\n% 6104\n$ 6046\n& 6043\n) 6186\n( 6154\n+ 6066\n* 6034\n@ 6157\n[ 6108\n] 6152\n_ 6112\n^ 6030\na 1\ne 1\ni 1\nl 1\nq 1\nu 1\nt 1\ny 1\n{ 6046\n} 6105\n'''\n```\n把只出现一次的那几个字母组合一下, 得到\"equality\", 替换URL里的\"ocr\"得到 http://www.pythonchallenge.com/pc/def/equality.html\n<br>\n[第3关](http://www.pythonchallenge.com/pc/def/equality.html)\n图片信息依旧没有用， 图片下面英文提示找一个小写字母， 两边各有三个大写字母，注意\"EXACTLY\"。查看网页源码， 假定把一大堆字符存到msg这个变量\n``` Python\nimport re\n>>> pat = re.compile(r'[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]')\n>>> pat.findall(msg)\n['l', 'i', 'n', 'k', 'e', 'd', 'l', 'i', 's', 't']\n```\n得到\"linkedlist\", 下一关URL http://www.pythonchallenge.com/pc/def/linkedlist.html\n<br>\n[第4关](http://www.pythonchallenge.com/pc/def/linkedlist.html)\n点进去发现html换成php， http://www.pythonchallenge.com/pc/def/linkedlist.php\n进去是一张图片， 查看page source， 有提示\n> urllib may help. DON'T TRY ALL NOTHINGS, since it will never \nend. 400 times is more than enough.\n\n看来是要用urllib这个库了。回到网页，点击图片, 得到信息 *and the next nothing is 44827* 再看看此时的URL，应该是要不断跳转, 不断更新 *nothing=* 后面的数字\n``` Python\nimport re\nimport urllib\n\nurl_template = 'http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing={0}'\nnext_num = '12345'\npat = re.compile('the next nothing is (\\d+)')\n\nwhile True:\n    response = urllib.urlopen(url_template.format(next_num))\n    text = response.readlines()\n    next_num = pat.findall(text[0])[0]\n    print next_num\n```\n期间会出现两次错误\n> (1)[Yes. Divide by two and keep going.](http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=16044)\n> (2)[There maybe misleading numbers in the text. One example is 82683. Look only for the next nothing and the next nothing is 63579](http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=82682)\n\n按照提示修改就可以继续了。最后得到 *peak.html*, 亦即 http://www.pythonchallenge.com/pc/def/peak.html\n\n<br />\n[第5关](http://www.pythonchallenge.com/pc/def/peak.html)\n实在看不懂， 网上找了下， 原来用到 *pickle*  (peak hell sounds like Pickle -.-!)\n查看Page Source， 把[banner.p](http://www.pythonchallenge.com/pc/def/banner.p)下载到本地，用pickle反序列化\n``` Python\nimport cPickle\nfrom pprint import pprint\nwith open('banner.p', 'rb') as inFile:\n    data = cPickle.load(inFile)\npprint(data)\n\n#得到这一堆东西\n'''\n[(' ', 95)],\n [(' ', 14), ('#', 5), (' ', 70), ('#', 5), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n...\n'''\n```\n依旧看不穿, 网上大神又有话说了， print出来\n``` Python\nfor item in data:\n    print ''.join(i[0] * i[1] for i in item)\n\n'''\n              #####                                                                      ##### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n      ###      ####   ###         ###       #####   ###    #####   ###          ###       #### \n   ###   ##    #### #######     ##  ###      #### #######   #### #######     ###  ###     #### \n  ###     ###  #####    ####   ###   ####    #####    ####  #####    ####   ###     ###   #### \n ###           ####     ####   ###    ###    ####     ####  ####     ####  ###      ####  #### \n ###           ####     ####          ###    ####     ####  ####     ####  ###       ###  #### \n####           ####     ####     ##   ###    ####     ####  ####     #### ####       ###  #### \n####           ####     ####   ##########    ####     ####  ####     #### ##############  #### \n####           ####     ####  ###    ####    ####     ####  ####     #### ####            #### \n####           ####     #### ####     ###    ####     ####  ####     #### ####            #### \n ###           ####     #### ####     ###    ####     ####  ####     ####  ###            #### \n  ###      ##  ####     ####  ###    ####    ####     ####  ####     ####   ###      ##   #### \n   ###    ##   ####     ####   ###########   ####     ####  ####     ####    ###    ##    #### \n      ###     ######    #####    ##    #### ######    ###########    #####      ###      ######\n'''\n```\n这下终于像皮克那样看穿一切了. http://www.pythonchallenge.com/pc/def/channel.html\n","source":"_posts/PC-Part1.md","raw":"title: Python Challenge (Level 0-5)\ndate: 2015-01-18 11:27:25\ntags: [Python]\n---\n\n[Python Challenge](http://www.pythonchallenge.com/)是一个解题游戏网站, 每解出一道题就会跳到下一题. 目前为止一共有33关. 虽说是Python Challenge, 其实用其他语言,比如Java, C++都是可以的.\n\n[第0关](http://www.pythonchallenge.com/pc/def/0.html)\n提示很明显了, 换一下URL地址. 把地址中的0换成 2^38.\n``` Python\n2 ** 38\n```\n得到第二关地址http://www.pythonchallenge.com/pc/def/274877906944.html\n<!-- more -->\n<br>\n[第1关](http://www.pythonchallenge.com/pc/def/274877906944.html)\n根据图片上的提示, 应该是要做一个映射. 再加上\"think twice\"这个提示, 应该可以猜出是平移映射两位. 这里用到string的translate来完成\n``` Python\nimport string\nintab = string.ascii_lowercase\nouttab = string.ascii_lowercase[2 : ] + string.ascii_lowercase[0 : 2]\ntable = string.maketrans(intab, outtab)\n\"map\".translate(table)\n```\nURL上的\"map\" translate后得到\"ocr\", 这就得到了第三关的地址 http://www.pythonchallenge.com/pc/def/ocr.html\n这一关图片下面有一大段英文, translate后可以得到\n> i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that's why this text is so long. using string.maketrans() is recommended. now apply on the url.\n\n<br>\n[第2关](http://www.pythonchallenge.com/pc/def/ocr.html)\n根据提示, 在网页源码里找到一大段字符串。里面写着“find rare characters in the mess bellow”, 所以要我们统计字符的个数, 找出出现次数少的字符。字符串太长, 就不贴上来了, 假定字符串存在msg里\n``` Python\nfor c in set(msg):\n    print c, msg.count(c)\n# 得到\n'''\n1219\n! 6079\n# 6115\n% 6104\n$ 6046\n& 6043\n) 6186\n( 6154\n+ 6066\n* 6034\n@ 6157\n[ 6108\n] 6152\n_ 6112\n^ 6030\na 1\ne 1\ni 1\nl 1\nq 1\nu 1\nt 1\ny 1\n{ 6046\n} 6105\n'''\n```\n把只出现一次的那几个字母组合一下, 得到\"equality\", 替换URL里的\"ocr\"得到 http://www.pythonchallenge.com/pc/def/equality.html\n<br>\n[第3关](http://www.pythonchallenge.com/pc/def/equality.html)\n图片信息依旧没有用， 图片下面英文提示找一个小写字母， 两边各有三个大写字母，注意\"EXACTLY\"。查看网页源码， 假定把一大堆字符存到msg这个变量\n``` Python\nimport re\n>>> pat = re.compile(r'[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]')\n>>> pat.findall(msg)\n['l', 'i', 'n', 'k', 'e', 'd', 'l', 'i', 's', 't']\n```\n得到\"linkedlist\", 下一关URL http://www.pythonchallenge.com/pc/def/linkedlist.html\n<br>\n[第4关](http://www.pythonchallenge.com/pc/def/linkedlist.html)\n点进去发现html换成php， http://www.pythonchallenge.com/pc/def/linkedlist.php\n进去是一张图片， 查看page source， 有提示\n> urllib may help. DON'T TRY ALL NOTHINGS, since it will never \nend. 400 times is more than enough.\n\n看来是要用urllib这个库了。回到网页，点击图片, 得到信息 *and the next nothing is 44827* 再看看此时的URL，应该是要不断跳转, 不断更新 *nothing=* 后面的数字\n``` Python\nimport re\nimport urllib\n\nurl_template = 'http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing={0}'\nnext_num = '12345'\npat = re.compile('the next nothing is (\\d+)')\n\nwhile True:\n    response = urllib.urlopen(url_template.format(next_num))\n    text = response.readlines()\n    next_num = pat.findall(text[0])[0]\n    print next_num\n```\n期间会出现两次错误\n> (1)[Yes. Divide by two and keep going.](http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=16044)\n> (2)[There maybe misleading numbers in the text. One example is 82683. Look only for the next nothing and the next nothing is 63579](http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=82682)\n\n按照提示修改就可以继续了。最后得到 *peak.html*, 亦即 http://www.pythonchallenge.com/pc/def/peak.html\n\n<br />\n[第5关](http://www.pythonchallenge.com/pc/def/peak.html)\n实在看不懂， 网上找了下， 原来用到 *pickle*  (peak hell sounds like Pickle -.-!)\n查看Page Source， 把[banner.p](http://www.pythonchallenge.com/pc/def/banner.p)下载到本地，用pickle反序列化\n``` Python\nimport cPickle\nfrom pprint import pprint\nwith open('banner.p', 'rb') as inFile:\n    data = cPickle.load(inFile)\npprint(data)\n\n#得到这一堆东西\n'''\n[(' ', 95)],\n [(' ', 14), ('#', 5), (' ', 70), ('#', 5), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],\n...\n'''\n```\n依旧看不穿, 网上大神又有话说了， print出来\n``` Python\nfor item in data:\n    print ''.join(i[0] * i[1] for i in item)\n\n'''\n              #####                                                                      ##### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n               ####                                                                       #### \n      ###      ####   ###         ###       #####   ###    #####   ###          ###       #### \n   ###   ##    #### #######     ##  ###      #### #######   #### #######     ###  ###     #### \n  ###     ###  #####    ####   ###   ####    #####    ####  #####    ####   ###     ###   #### \n ###           ####     ####   ###    ###    ####     ####  ####     ####  ###      ####  #### \n ###           ####     ####          ###    ####     ####  ####     ####  ###       ###  #### \n####           ####     ####     ##   ###    ####     ####  ####     #### ####       ###  #### \n####           ####     ####   ##########    ####     ####  ####     #### ##############  #### \n####           ####     ####  ###    ####    ####     ####  ####     #### ####            #### \n####           ####     #### ####     ###    ####     ####  ####     #### ####            #### \n ###           ####     #### ####     ###    ####     ####  ####     ####  ###            #### \n  ###      ##  ####     ####  ###    ####    ####     ####  ####     ####   ###      ##   #### \n   ###    ##   ####     ####   ###########   ####     ####  ####     ####    ###    ##    #### \n      ###     ######    #####    ##    #### ######    ###########    #####      ###      ######\n'''\n```\n这下终于像皮克那样看穿一切了. http://www.pythonchallenge.com/pc/def/channel.html\n","slug":"PC-Part1","published":1,"updated":"2018-06-10T17:05:07.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs710000ytk0c6hj0oik","content":"<p><a href=\"http://www.pythonchallenge.com/\" target=\"_blank\" rel=\"noopener\">Python Challenge</a>是一个解题游戏网站, 每解出一道题就会跳到下一题. 目前为止一共有33关. 虽说是Python Challenge, 其实用其他语言,比如Java, C++都是可以的.</p>\n<p><a href=\"http://www.pythonchallenge.com/pc/def/0.html\" target=\"_blank\" rel=\"noopener\">第0关</a><br>提示很明显了, 换一下URL地址. 把地址中的0换成 2^38.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">38</span></span><br></pre></td></tr></table></figure></p>\n<p>得到第二关地址<a href=\"http://www.pythonchallenge.com/pc/def/274877906944.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/274877906944.html</a><br><a id=\"more\"></a><br><br><br><a href=\"http://www.pythonchallenge.com/pc/def/274877906944.html\" target=\"_blank\" rel=\"noopener\">第1关</a><br>根据图片上的提示, 应该是要做一个映射. 再加上”think twice”这个提示, 应该可以猜出是平移映射两位. 这里用到string的translate来完成<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">intab = string.ascii_lowercase</span><br><span class=\"line\">outtab = string.ascii_lowercase[<span class=\"number\">2</span> : ] + string.ascii_lowercase[<span class=\"number\">0</span> : <span class=\"number\">2</span>]</span><br><span class=\"line\">table = string.maketrans(intab, outtab)</span><br><span class=\"line\"><span class=\"string\">\"map\"</span>.translate(table)</span><br></pre></td></tr></table></figure></p>\n<p>URL上的”map” translate后得到”ocr”, 这就得到了第三关的地址 <a href=\"http://www.pythonchallenge.com/pc/def/ocr.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/ocr.html</a><br>这一关图片下面有一大段英文, translate后可以得到</p>\n<blockquote>\n<p>i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that’s why this text is so long. using string.maketrans() is recommended. now apply on the url.</p>\n</blockquote>\n<p><br><br><a href=\"http://www.pythonchallenge.com/pc/def/ocr.html\" target=\"_blank\" rel=\"noopener\">第2关</a><br>根据提示, 在网页源码里找到一大段字符串。里面写着“find rare characters in the mess bellow”, 所以要我们统计字符的个数, 找出出现次数少的字符。字符串太长, 就不贴上来了, 假定字符串存在msg里<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> set(msg):</span><br><span class=\"line\">    <span class=\"keyword\">print</span> c, msg.count(c)</span><br><span class=\"line\"><span class=\"comment\"># 得到</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">1219</span></span><br><span class=\"line\"><span class=\"string\">! 6079</span></span><br><span class=\"line\"><span class=\"string\"># 6115</span></span><br><span class=\"line\"><span class=\"string\">% 6104</span></span><br><span class=\"line\"><span class=\"string\">$ 6046</span></span><br><span class=\"line\"><span class=\"string\">&amp; 6043</span></span><br><span class=\"line\"><span class=\"string\">) 6186</span></span><br><span class=\"line\"><span class=\"string\">( 6154</span></span><br><span class=\"line\"><span class=\"string\">+ 6066</span></span><br><span class=\"line\"><span class=\"string\">* 6034</span></span><br><span class=\"line\"><span class=\"string\">@ 6157</span></span><br><span class=\"line\"><span class=\"string\">[ 6108</span></span><br><span class=\"line\"><span class=\"string\">] 6152</span></span><br><span class=\"line\"><span class=\"string\">_ 6112</span></span><br><span class=\"line\"><span class=\"string\">^ 6030</span></span><br><span class=\"line\"><span class=\"string\">a 1</span></span><br><span class=\"line\"><span class=\"string\">e 1</span></span><br><span class=\"line\"><span class=\"string\">i 1</span></span><br><span class=\"line\"><span class=\"string\">l 1</span></span><br><span class=\"line\"><span class=\"string\">q 1</span></span><br><span class=\"line\"><span class=\"string\">u 1</span></span><br><span class=\"line\"><span class=\"string\">t 1</span></span><br><span class=\"line\"><span class=\"string\">y 1</span></span><br><span class=\"line\"><span class=\"string\">&#123; 6046</span></span><br><span class=\"line\"><span class=\"string\">&#125; 6105</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>把只出现一次的那几个字母组合一下, 得到”equality”, 替换URL里的”ocr”得到 <a href=\"http://www.pythonchallenge.com/pc/def/equality.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/equality.html</a><br><br><br><a href=\"http://www.pythonchallenge.com/pc/def/equality.html\" target=\"_blank\" rel=\"noopener\">第3关</a><br>图片信息依旧没有用， 图片下面英文提示找一个小写字母， 两边各有三个大写字母，注意”EXACTLY”。查看网页源码， 假定把一大堆字符存到msg这个变量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pat = re.compile(<span class=\"string\">r'[^A-Z][A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pat.findall(msg)</span><br><span class=\"line\">[<span class=\"string\">'l'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>得到”linkedlist”, 下一关URL <a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/linkedlist.html</a><br><br><br><a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.html\" target=\"_blank\" rel=\"noopener\">第4关</a><br>点进去发现html换成php， <a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/linkedlist.php</a><br>进去是一张图片， 查看page source， 有提示</p>\n<blockquote>\n<p>urllib may help. DON’T TRY ALL NOTHINGS, since it will never<br>end. 400 times is more than enough.</p>\n</blockquote>\n<p>看来是要用urllib这个库了。回到网页，点击图片, 得到信息 <em>and the next nothing is 44827</em> 再看看此时的URL，应该是要不断跳转, 不断更新 <em>nothing=</em> 后面的数字<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"></span><br><span class=\"line\">url_template = <span class=\"string\">'http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=&#123;0&#125;'</span></span><br><span class=\"line\">next_num = <span class=\"string\">'12345'</span></span><br><span class=\"line\">pat = re.compile(<span class=\"string\">'the next nothing is (\\d+)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    response = urllib.urlopen(url_template.format(next_num))</span><br><span class=\"line\">    text = response.readlines()</span><br><span class=\"line\">    next_num = pat.findall(text[<span class=\"number\">0</span>])[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> next_num</span><br></pre></td></tr></table></figure></p>\n<p>期间会出现两次错误</p>\n<blockquote>\n<p>(1)<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=16044\" target=\"_blank\" rel=\"noopener\">Yes. Divide by two and keep going.</a><br>(2)<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=82682\" target=\"_blank\" rel=\"noopener\">There maybe misleading numbers in the text. One example is 82683. Look only for the next nothing and the next nothing is 63579</a></p>\n</blockquote>\n<p>按照提示修改就可以继续了。最后得到 <em>peak.html</em>, 亦即 <a href=\"http://www.pythonchallenge.com/pc/def/peak.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/peak.html</a></p>\n<p><br><br><a href=\"http://www.pythonchallenge.com/pc/def/peak.html\" target=\"_blank\" rel=\"noopener\">第5关</a><br>实在看不懂， 网上找了下， 原来用到 <em>pickle</em>  (peak hell sounds like Pickle -.-!)<br>查看Page Source， 把<a href=\"http://www.pythonchallenge.com/pc/def/banner.p\" target=\"_blank\" rel=\"noopener\">banner.p</a>下载到本地，用pickle反序列化<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cPickle</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'banner.p'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> inFile:</span><br><span class=\"line\">    data = cPickle.load(inFile)</span><br><span class=\"line\">pprint(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#得到这一堆东西</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[(' ', 95)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 14), ('#', 5), (' ', 70), ('#', 5), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>依旧看不穿, 网上大神又有话说了， print出来<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(i[<span class=\"number\">0</span>] * i[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">              #####                                                                      ##### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">      ###      ####   ###         ###       #####   ###    #####   ###          ###       #### </span></span><br><span class=\"line\"><span class=\"string\">   ###   ##    #### #######     ##  ###      #### #######   #### #######     ###  ###     #### </span></span><br><span class=\"line\"><span class=\"string\">  ###     ###  #####    ####   ###   ####    #####    ####  #####    ####   ###     ###   #### </span></span><br><span class=\"line\"><span class=\"string\"> ###           ####     ####   ###    ###    ####     ####  ####     ####  ###      ####  #### </span></span><br><span class=\"line\"><span class=\"string\"> ###           ####     ####          ###    ####     ####  ####     ####  ###       ###  #### </span></span><br><span class=\"line\"><span class=\"string\">####           ####     ####     ##   ###    ####     ####  ####     #### ####       ###  #### </span></span><br><span class=\"line\"><span class=\"string\">####           ####     ####   ##########    ####     ####  ####     #### ##############  #### </span></span><br><span class=\"line\"><span class=\"string\">####           ####     ####  ###    ####    ####     ####  ####     #### ####            #### </span></span><br><span class=\"line\"><span class=\"string\">####           ####     #### ####     ###    ####     ####  ####     #### ####            #### </span></span><br><span class=\"line\"><span class=\"string\"> ###           ####     #### ####     ###    ####     ####  ####     ####  ###            #### </span></span><br><span class=\"line\"><span class=\"string\">  ###      ##  ####     ####  ###    ####    ####     ####  ####     ####   ###      ##   #### </span></span><br><span class=\"line\"><span class=\"string\">   ###    ##   ####     ####   ###########   ####     ####  ####     ####    ###    ##    #### </span></span><br><span class=\"line\"><span class=\"string\">      ###     ######    #####    ##    #### ######    ###########    #####      ###      ######</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>这下终于像皮克那样看穿一切了. <a href=\"http://www.pythonchallenge.com/pc/def/channel.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/channel.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/\" target=\"_blank\" rel=\"noopener\">Python Challenge</a>是一个解题游戏网站, 每解出一道题就会跳到下一题. 目前为止一共有33关. 虽说是Python Challenge, 其实用其他语言,比如Java, C++都是可以的.</p>\n<p><a href=\"http://www.pythonchallenge.com/pc/def/0.html\" target=\"_blank\" rel=\"noopener\">第0关</a><br>提示很明显了, 换一下URL地址. 把地址中的0换成 2^38.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">38</span></span><br></pre></td></tr></table></figure></p>\n<p>得到第二关地址<a href=\"http://www.pythonchallenge.com/pc/def/274877906944.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/274877906944.html</a><br>","more":"<br><br><br><a href=\"http://www.pythonchallenge.com/pc/def/274877906944.html\" target=\"_blank\" rel=\"noopener\">第1关</a><br>根据图片上的提示, 应该是要做一个映射. 再加上”think twice”这个提示, 应该可以猜出是平移映射两位. 这里用到string的translate来完成<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">intab = string.ascii_lowercase</span><br><span class=\"line\">outtab = string.ascii_lowercase[<span class=\"number\">2</span> : ] + string.ascii_lowercase[<span class=\"number\">0</span> : <span class=\"number\">2</span>]</span><br><span class=\"line\">table = string.maketrans(intab, outtab)</span><br><span class=\"line\"><span class=\"string\">\"map\"</span>.translate(table)</span><br></pre></td></tr></table></figure></p>\n<p>URL上的”map” translate后得到”ocr”, 这就得到了第三关的地址 <a href=\"http://www.pythonchallenge.com/pc/def/ocr.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/ocr.html</a><br>这一关图片下面有一大段英文, translate后可以得到</p>\n<blockquote>\n<p>i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that’s why this text is so long. using string.maketrans() is recommended. now apply on the url.</p>\n</blockquote>\n<p><br><br><a href=\"http://www.pythonchallenge.com/pc/def/ocr.html\" target=\"_blank\" rel=\"noopener\">第2关</a><br>根据提示, 在网页源码里找到一大段字符串。里面写着“find rare characters in the mess bellow”, 所以要我们统计字符的个数, 找出出现次数少的字符。字符串太长, 就不贴上来了, 假定字符串存在msg里<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> set(msg):</span><br><span class=\"line\">    <span class=\"keyword\">print</span> c, msg.count(c)</span><br><span class=\"line\"><span class=\"comment\"># 得到</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">1219</span></span><br><span class=\"line\"><span class=\"string\">! 6079</span></span><br><span class=\"line\"><span class=\"string\"># 6115</span></span><br><span class=\"line\"><span class=\"string\">% 6104</span></span><br><span class=\"line\"><span class=\"string\">$ 6046</span></span><br><span class=\"line\"><span class=\"string\">&amp; 6043</span></span><br><span class=\"line\"><span class=\"string\">) 6186</span></span><br><span class=\"line\"><span class=\"string\">( 6154</span></span><br><span class=\"line\"><span class=\"string\">+ 6066</span></span><br><span class=\"line\"><span class=\"string\">* 6034</span></span><br><span class=\"line\"><span class=\"string\">@ 6157</span></span><br><span class=\"line\"><span class=\"string\">[ 6108</span></span><br><span class=\"line\"><span class=\"string\">] 6152</span></span><br><span class=\"line\"><span class=\"string\">_ 6112</span></span><br><span class=\"line\"><span class=\"string\">^ 6030</span></span><br><span class=\"line\"><span class=\"string\">a 1</span></span><br><span class=\"line\"><span class=\"string\">e 1</span></span><br><span class=\"line\"><span class=\"string\">i 1</span></span><br><span class=\"line\"><span class=\"string\">l 1</span></span><br><span class=\"line\"><span class=\"string\">q 1</span></span><br><span class=\"line\"><span class=\"string\">u 1</span></span><br><span class=\"line\"><span class=\"string\">t 1</span></span><br><span class=\"line\"><span class=\"string\">y 1</span></span><br><span class=\"line\"><span class=\"string\">&#123; 6046</span></span><br><span class=\"line\"><span class=\"string\">&#125; 6105</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>把只出现一次的那几个字母组合一下, 得到”equality”, 替换URL里的”ocr”得到 <a href=\"http://www.pythonchallenge.com/pc/def/equality.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/equality.html</a><br><br><br><a href=\"http://www.pythonchallenge.com/pc/def/equality.html\" target=\"_blank\" rel=\"noopener\">第3关</a><br>图片信息依旧没有用， 图片下面英文提示找一个小写字母， 两边各有三个大写字母，注意”EXACTLY”。查看网页源码， 假定把一大堆字符存到msg这个变量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pat = re.compile(<span class=\"string\">r'[^A-Z][A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>pat.findall(msg)</span><br><span class=\"line\">[<span class=\"string\">'l'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'n'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>得到”linkedlist”, 下一关URL <a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/linkedlist.html</a><br><br><br><a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.html\" target=\"_blank\" rel=\"noopener\">第4关</a><br>点进去发现html换成php， <a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/linkedlist.php</a><br>进去是一张图片， 查看page source， 有提示</p>\n<blockquote>\n<p>urllib may help. DON’T TRY ALL NOTHINGS, since it will never<br>end. 400 times is more than enough.</p>\n</blockquote>\n<p>看来是要用urllib这个库了。回到网页，点击图片, 得到信息 <em>and the next nothing is 44827</em> 再看看此时的URL，应该是要不断跳转, 不断更新 <em>nothing=</em> 后面的数字<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"></span><br><span class=\"line\">url_template = <span class=\"string\">'http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=&#123;0&#125;'</span></span><br><span class=\"line\">next_num = <span class=\"string\">'12345'</span></span><br><span class=\"line\">pat = re.compile(<span class=\"string\">'the next nothing is (\\d+)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    response = urllib.urlopen(url_template.format(next_num))</span><br><span class=\"line\">    text = response.readlines()</span><br><span class=\"line\">    next_num = pat.findall(text[<span class=\"number\">0</span>])[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> next_num</span><br></pre></td></tr></table></figure></p>\n<p>期间会出现两次错误</p>\n<blockquote>\n<p>(1)<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=16044\" target=\"_blank\" rel=\"noopener\">Yes. Divide by two and keep going.</a><br>(2)<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=82682\" target=\"_blank\" rel=\"noopener\">There maybe misleading numbers in the text. One example is 82683. Look only for the next nothing and the next nothing is 63579</a></p>\n</blockquote>\n<p>按照提示修改就可以继续了。最后得到 <em>peak.html</em>, 亦即 <a href=\"http://www.pythonchallenge.com/pc/def/peak.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/peak.html</a></p>\n<p><br><br><a href=\"http://www.pythonchallenge.com/pc/def/peak.html\" target=\"_blank\" rel=\"noopener\">第5关</a><br>实在看不懂， 网上找了下， 原来用到 <em>pickle</em>  (peak hell sounds like Pickle -.-!)<br>查看Page Source， 把<a href=\"http://www.pythonchallenge.com/pc/def/banner.p\" target=\"_blank\" rel=\"noopener\">banner.p</a>下载到本地，用pickle反序列化<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cPickle</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'banner.p'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> inFile:</span><br><span class=\"line\">    data = cPickle.load(inFile)</span><br><span class=\"line\">pprint(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#得到这一堆东西</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[(' ', 95)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 14), ('#', 5), (' ', 70), ('#', 5), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\"> [(' ', 15), ('#', 4), (' ', 71), ('#', 4), (' ', 1)],</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>依旧看不穿, 网上大神又有话说了， print出来<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(i[<span class=\"number\">0</span>] * i[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">              #####                                                                      ##### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">               ####                                                                       #### </span></span><br><span class=\"line\"><span class=\"string\">      ###      ####   ###         ###       #####   ###    #####   ###          ###       #### </span></span><br><span class=\"line\"><span class=\"string\">   ###   ##    #### #######     ##  ###      #### #######   #### #######     ###  ###     #### </span></span><br><span class=\"line\"><span class=\"string\">  ###     ###  #####    ####   ###   ####    #####    ####  #####    ####   ###     ###   #### </span></span><br><span class=\"line\"><span class=\"string\"> ###           ####     ####   ###    ###    ####     ####  ####     ####  ###      ####  #### </span></span><br><span class=\"line\"><span class=\"string\"> ###           ####     ####          ###    ####     ####  ####     ####  ###       ###  #### </span></span><br><span class=\"line\"><span class=\"string\">####           ####     ####     ##   ###    ####     ####  ####     #### ####       ###  #### </span></span><br><span class=\"line\"><span class=\"string\">####           ####     ####   ##########    ####     ####  ####     #### ##############  #### </span></span><br><span class=\"line\"><span class=\"string\">####           ####     ####  ###    ####    ####     ####  ####     #### ####            #### </span></span><br><span class=\"line\"><span class=\"string\">####           ####     #### ####     ###    ####     ####  ####     #### ####            #### </span></span><br><span class=\"line\"><span class=\"string\"> ###           ####     #### ####     ###    ####     ####  ####     ####  ###            #### </span></span><br><span class=\"line\"><span class=\"string\">  ###      ##  ####     ####  ###    ####    ####     ####  ####     ####   ###      ##   #### </span></span><br><span class=\"line\"><span class=\"string\">   ###    ##   ####     ####   ###########   ####     ####  ####     ####    ###    ##    #### </span></span><br><span class=\"line\"><span class=\"string\">      ###     ######    #####    ##    #### ######    ###########    #####      ###      ######</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>这下终于像皮克那样看穿一切了. <a href=\"http://www.pythonchallenge.com/pc/def/channel.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/channel.html</a></p>"},{"title":"Hello, Blog!","date":"2015-01-15T13:29:56.000Z","_content":"我是一个很容易被其他事情转移注意力，然后中断手头上的工作的人。今天早上本打算继续昨晚遗留下来的工作，学一下如何用GDB调试C++程序。在网上找教程的过程中，发现了一个不错的Blog，然后就不知怎么地，我就想着建一个自己的博客。\n\n其实，建个人博客的想法挺久之前就有了。自己也试过用WordPress尝试过搭建博客，只是后来考虑到域名、空间的问题，就不了了之。无心插柳柳成荫，今天参照网上各个关于创建GitHub技术博客的教程，折腾了一天，居然就把个人博客这个事弄好了。想想，不知不觉已到一月中，如无意外，学生生涯就剩下一年半。现在开始，在这个博客上记录自己的一些想法，一些感悟。以后回过头来看看这些东西，应该也是挺有意思的一件事。\n\n@313, SIST, SYSU\n","source":"_posts/Hello-Blog.md","raw":"title: \"Hello, Blog!\"\ndate: 2015-01-15 21:29:56\ntags: [随笔]\n---\n我是一个很容易被其他事情转移注意力，然后中断手头上的工作的人。今天早上本打算继续昨晚遗留下来的工作，学一下如何用GDB调试C++程序。在网上找教程的过程中，发现了一个不错的Blog，然后就不知怎么地，我就想着建一个自己的博客。\n\n其实，建个人博客的想法挺久之前就有了。自己也试过用WordPress尝试过搭建博客，只是后来考虑到域名、空间的问题，就不了了之。无心插柳柳成荫，今天参照网上各个关于创建GitHub技术博客的教程，折腾了一天，居然就把个人博客这个事弄好了。想想，不知不觉已到一月中，如无意外，学生生涯就剩下一年半。现在开始，在这个博客上记录自己的一些想法，一些感悟。以后回过头来看看这些东西，应该也是挺有意思的一件事。\n\n@313, SIST, SYSU\n","slug":"Hello-Blog","published":1,"updated":"2018-06-10T17:05:07.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs770001ytk04qkogecr","content":"<p>我是一个很容易被其他事情转移注意力，然后中断手头上的工作的人。今天早上本打算继续昨晚遗留下来的工作，学一下如何用GDB调试C++程序。在网上找教程的过程中，发现了一个不错的Blog，然后就不知怎么地，我就想着建一个自己的博客。</p>\n<p>其实，建个人博客的想法挺久之前就有了。自己也试过用WordPress尝试过搭建博客，只是后来考虑到域名、空间的问题，就不了了之。无心插柳柳成荫，今天参照网上各个关于创建GitHub技术博客的教程，折腾了一天，居然就把个人博客这个事弄好了。想想，不知不觉已到一月中，如无意外，学生生涯就剩下一年半。现在开始，在这个博客上记录自己的一些想法，一些感悟。以后回过头来看看这些东西，应该也是挺有意思的一件事。</p>\n<p>@313, SIST, SYSU</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是一个很容易被其他事情转移注意力，然后中断手头上的工作的人。今天早上本打算继续昨晚遗留下来的工作，学一下如何用GDB调试C++程序。在网上找教程的过程中，发现了一个不错的Blog，然后就不知怎么地，我就想着建一个自己的博客。</p>\n<p>其实，建个人博客的想法挺久之前就有了。自己也试过用WordPress尝试过搭建博客，只是后来考虑到域名、空间的问题，就不了了之。无心插柳柳成荫，今天参照网上各个关于创建GitHub技术博客的教程，折腾了一天，居然就把个人博客这个事弄好了。想想，不知不觉已到一月中，如无意外，学生生涯就剩下一年半。现在开始，在这个博客上记录自己的一些想法，一些感悟。以后回过头来看看这些东西，应该也是挺有意思的一件事。</p>\n<p>@313, SIST, SYSU</p>\n"},{"title":"Ubuntu环境变量(PATH)修复","date":"2015-08-25T03:26:56.000Z","_content":"\n今天早上打开电脑，发现Ubuntu图形界面登录不了。在登录界面输入了密码后，画面闪一下又跳回登录界面。于是，切到换到命令行界面（同时按下Ctrl+Alt+F1），看看出了什么问题。\n\n命令行界面能顺利登录，但是sudo/ls等命令都用不了，提示错误\n> The command could not be located because '/usr/bin:/bin' is not included in the PATH environment variable.\n\n显然，PATH出问题了。回想到昨天晚上安装了scala和spark，应该是配置PATH的时候出问题了。于是，尝试用vim来重新编辑/etc/profile，但是，vim命令也报错....\n\n纠结，后来在网上找到解决方案，那就是用绝对路径：\n``` bash\n/usr/bin/sudo /usr/bin/vim /etc/profile\n```\n修复了/etc/profile文件后，再重启\n``` bash\n/usr/bin/sudo /sbin/reboot\n```\n重启后，又能重新登录图形界面了。\n","source":"_posts/fix-ubuntu-path.md","raw":"title: Ubuntu环境变量(PATH)修复\ndate: 2015-08-25 11:26:56\ntags: [随笔]\n---\n\n今天早上打开电脑，发现Ubuntu图形界面登录不了。在登录界面输入了密码后，画面闪一下又跳回登录界面。于是，切到换到命令行界面（同时按下Ctrl+Alt+F1），看看出了什么问题。\n\n命令行界面能顺利登录，但是sudo/ls等命令都用不了，提示错误\n> The command could not be located because '/usr/bin:/bin' is not included in the PATH environment variable.\n\n显然，PATH出问题了。回想到昨天晚上安装了scala和spark，应该是配置PATH的时候出问题了。于是，尝试用vim来重新编辑/etc/profile，但是，vim命令也报错....\n\n纠结，后来在网上找到解决方案，那就是用绝对路径：\n``` bash\n/usr/bin/sudo /usr/bin/vim /etc/profile\n```\n修复了/etc/profile文件后，再重启\n``` bash\n/usr/bin/sudo /sbin/reboot\n```\n重启后，又能重新登录图形界面了。\n","slug":"fix-ubuntu-path","published":1,"updated":"2018-06-10T17:05:07.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs7f0003ytk0no7mw9gd","content":"<p>今天早上打开电脑，发现Ubuntu图形界面登录不了。在登录界面输入了密码后，画面闪一下又跳回登录界面。于是，切到换到命令行界面（同时按下Ctrl+Alt+F1），看看出了什么问题。</p>\n<p>命令行界面能顺利登录，但是sudo/ls等命令都用不了，提示错误</p>\n<blockquote>\n<p>The command could not be located because ‘/usr/bin:/bin’ is not included in the PATH environment variable.</p>\n</blockquote>\n<p>显然，PATH出问题了。回想到昨天晚上安装了scala和spark，应该是配置PATH的时候出问题了。于是，尝试用vim来重新编辑/etc/profile，但是，vim命令也报错….</p>\n<p>纠结，后来在网上找到解决方案，那就是用绝对路径：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/sudo /usr/bin/vim /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>修复了/etc/profile文件后，再重启<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/sudo /sbin/reboot</span><br></pre></td></tr></table></figure></p>\n<p>重启后，又能重新登录图形界面了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天早上打开电脑，发现Ubuntu图形界面登录不了。在登录界面输入了密码后，画面闪一下又跳回登录界面。于是，切到换到命令行界面（同时按下Ctrl+Alt+F1），看看出了什么问题。</p>\n<p>命令行界面能顺利登录，但是sudo/ls等命令都用不了，提示错误</p>\n<blockquote>\n<p>The command could not be located because ‘/usr/bin:/bin’ is not included in the PATH environment variable.</p>\n</blockquote>\n<p>显然，PATH出问题了。回想到昨天晚上安装了scala和spark，应该是配置PATH的时候出问题了。于是，尝试用vim来重新编辑/etc/profile，但是，vim命令也报错….</p>\n<p>纠结，后来在网上找到解决方案，那就是用绝对路径：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/sudo /usr/bin/vim /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>修复了/etc/profile文件后，再重启<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/sudo /sbin/reboot</span><br></pre></td></tr></table></figure></p>\n<p>重启后，又能重新登录图形界面了。</p>\n"},{"title":"不同电脑上同步Hexo Blog","date":"2015-01-17T15:11:36.000Z","_content":"\n前天在实验室弄好这个Blog, 后来回到宿舍就有个问题: 怎么在宿舍更新我的博客, 然后同步上去? 难道每次都要到实验室电脑上写博客?这也太不方便了. Google一下, 找到了这个[解决办法](http://youthyblog.com/2014/06/28/%E4%BD%BF%E7%94%A8github%E7%AE%A1%E7%90%86hexo%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/), 思路就是在github上再新建一个repository, 用来同步博客.\n\n假定在电脑A上成功搭建了博客, 也同步到了github上的仓库username.github.io 现在想在电脑B上也能更新博客, 并同步到github上. 过程如下:\n\n首先, 在github上再键一个repository, 假定为HexoBlog. 进到电脑A上的博客的文件夹. 如果你的博客主题是从github上克隆下来的, 要把主题文件夹里的.git文件夹删掉. 以我自己的为例, 我用的主题是[yilia](https://github.com/litten/hexo-theme-yilia), 用 ls -la命令就看到 thems/yilia/ 下面的隐藏文件夹.git. 然后删掉.\n```Bash\nls -la themes/yilia\nrm -rf themes/yilia/.git\n```\n<!-- more -->\n好了, 接下来用github同步整个博客文件夹\n```Bash\ngit init\ngit add .\ngit commit -m \"First commit\"\n```\n\n这就完成了在电脑A上用git对博客文件夹进行管理, 接下来同步到刚刚新建的repository, 也就是HexoBlog\n```Bash\ngit remote add origin git@github.com:username/HexoBlog.git\n```\n上面username换成你自己的github用户名, HexoBlog换成刚刚新建的repository名字. 最后, push到github.\n```Bash\ngit push origin master\n```\n\n<br />\n上面是在电脑A上做的工作,接下来回到电脑B. 首先, 像在电脑A上搭建博客一样, 要在B上安装git, node.js, hexo 安装过程自己Google(既然在A上搭好博客了,安装过程应该会了). 然后把github上的repository克隆到电脑B上\n```Bash\ngit clone git@github.com:username/HexoBlog.git\n```\n按照Blog目录下自带的.gitignore文件, node_modules文件夹是不会同步的, 所以同步之后需要自己再次进行\n``` Bash\nnpm install\n```\n\n这样, 在电脑B上写了新文章后, 更新到github上的 username.github.io\n``` Bash\nhexo g\nhexo d\n```\n\n然后, 更新到github上的 HexoBlog (即刚刚新建的用来同步整个博客文件夹的repository)\n``` Bash\ngit add .\ngit push\n```\n\n这样, 就可以在不同电脑上同步博客了.\n\nhexo上有两个issue可以参考\n[issue527](https://github.com/hexojs/hexo/issues/527)\n[issue752](https://github.com/hexojs/hexo/issues/752)\n\n@至善园\n","source":"_posts/how-to-synchronize-blog.md","raw":"title: 不同电脑上同步Hexo Blog\ndate: 2015-01-17 23:11:36\ntags: [随笔]\n---\n\n前天在实验室弄好这个Blog, 后来回到宿舍就有个问题: 怎么在宿舍更新我的博客, 然后同步上去? 难道每次都要到实验室电脑上写博客?这也太不方便了. Google一下, 找到了这个[解决办法](http://youthyblog.com/2014/06/28/%E4%BD%BF%E7%94%A8github%E7%AE%A1%E7%90%86hexo%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/), 思路就是在github上再新建一个repository, 用来同步博客.\n\n假定在电脑A上成功搭建了博客, 也同步到了github上的仓库username.github.io 现在想在电脑B上也能更新博客, 并同步到github上. 过程如下:\n\n首先, 在github上再键一个repository, 假定为HexoBlog. 进到电脑A上的博客的文件夹. 如果你的博客主题是从github上克隆下来的, 要把主题文件夹里的.git文件夹删掉. 以我自己的为例, 我用的主题是[yilia](https://github.com/litten/hexo-theme-yilia), 用 ls -la命令就看到 thems/yilia/ 下面的隐藏文件夹.git. 然后删掉.\n```Bash\nls -la themes/yilia\nrm -rf themes/yilia/.git\n```\n<!-- more -->\n好了, 接下来用github同步整个博客文件夹\n```Bash\ngit init\ngit add .\ngit commit -m \"First commit\"\n```\n\n这就完成了在电脑A上用git对博客文件夹进行管理, 接下来同步到刚刚新建的repository, 也就是HexoBlog\n```Bash\ngit remote add origin git@github.com:username/HexoBlog.git\n```\n上面username换成你自己的github用户名, HexoBlog换成刚刚新建的repository名字. 最后, push到github.\n```Bash\ngit push origin master\n```\n\n<br />\n上面是在电脑A上做的工作,接下来回到电脑B. 首先, 像在电脑A上搭建博客一样, 要在B上安装git, node.js, hexo 安装过程自己Google(既然在A上搭好博客了,安装过程应该会了). 然后把github上的repository克隆到电脑B上\n```Bash\ngit clone git@github.com:username/HexoBlog.git\n```\n按照Blog目录下自带的.gitignore文件, node_modules文件夹是不会同步的, 所以同步之后需要自己再次进行\n``` Bash\nnpm install\n```\n\n这样, 在电脑B上写了新文章后, 更新到github上的 username.github.io\n``` Bash\nhexo g\nhexo d\n```\n\n然后, 更新到github上的 HexoBlog (即刚刚新建的用来同步整个博客文件夹的repository)\n``` Bash\ngit add .\ngit push\n```\n\n这样, 就可以在不同电脑上同步博客了.\n\nhexo上有两个issue可以参考\n[issue527](https://github.com/hexojs/hexo/issues/527)\n[issue752](https://github.com/hexojs/hexo/issues/752)\n\n@至善园\n","slug":"how-to-synchronize-blog","published":1,"updated":"2018-06-10T17:05:07.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs7i0004ytk0m7w5n25d","content":"<p>前天在实验室弄好这个Blog, 后来回到宿舍就有个问题: 怎么在宿舍更新我的博客, 然后同步上去? 难道每次都要到实验室电脑上写博客?这也太不方便了. Google一下, 找到了这个<a href=\"http://youthyblog.com/2014/06/28/%E4%BD%BF%E7%94%A8github%E7%AE%A1%E7%90%86hexo%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/\" target=\"_blank\" rel=\"noopener\">解决办法</a>, 思路就是在github上再新建一个repository, 用来同步博客.</p>\n<p>假定在电脑A上成功搭建了博客, 也同步到了github上的仓库username.github.io 现在想在电脑B上也能更新博客, 并同步到github上. 过程如下:</p>\n<p>首先, 在github上再键一个repository, 假定为HexoBlog. 进到电脑A上的博客的文件夹. 如果你的博客主题是从github上克隆下来的, 要把主题文件夹里的.git文件夹删掉. 以我自己的为例, 我用的主题是<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia</a>, 用 ls -la命令就看到 thems/yilia/ 下面的隐藏文件夹.git. 然后删掉.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -la themes/yilia</span><br><span class=\"line\">rm -rf themes/yilia/.git</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>好了, 接下来用github同步整个博客文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"First commit\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这就完成了在电脑A上用git对博客文件夹进行管理, 接下来同步到刚刚新建的repository, 也就是HexoBlog<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:username/HexoBlog.git</span><br></pre></td></tr></table></figure></p>\n<p>上面username换成你自己的github用户名, HexoBlog换成刚刚新建的repository名字. 最后, push到github.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<p><br><br>上面是在电脑A上做的工作,接下来回到电脑B. 首先, 像在电脑A上搭建博客一样, 要在B上安装git, node.js, hexo 安装过程自己Google(既然在A上搭好博客了,安装过程应该会了). 然后把github上的repository克隆到电脑B上<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:username/HexoBlog.git</span><br></pre></td></tr></table></figure></p>\n<p>按照Blog目录下自带的.gitignore文件, node_modules文件夹是不会同步的, 所以同步之后需要自己再次进行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>这样, 在电脑B上写了新文章后, 更新到github上的 username.github.io<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>然后, 更新到github上的 HexoBlog (即刚刚新建的用来同步整个博客文件夹的repository)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>这样, 就可以在不同电脑上同步博客了.</p>\n<p>hexo上有两个issue可以参考<br><a href=\"https://github.com/hexojs/hexo/issues/527\" target=\"_blank\" rel=\"noopener\">issue527</a><br><a href=\"https://github.com/hexojs/hexo/issues/752\" target=\"_blank\" rel=\"noopener\">issue752</a></p>\n<p>@至善园</p>\n","site":{"data":{}},"excerpt":"<p>前天在实验室弄好这个Blog, 后来回到宿舍就有个问题: 怎么在宿舍更新我的博客, 然后同步上去? 难道每次都要到实验室电脑上写博客?这也太不方便了. Google一下, 找到了这个<a href=\"http://youthyblog.com/2014/06/28/%E4%BD%BF%E7%94%A8github%E7%AE%A1%E7%90%86hexo%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/\" target=\"_blank\" rel=\"noopener\">解决办法</a>, 思路就是在github上再新建一个repository, 用来同步博客.</p>\n<p>假定在电脑A上成功搭建了博客, 也同步到了github上的仓库username.github.io 现在想在电脑B上也能更新博客, 并同步到github上. 过程如下:</p>\n<p>首先, 在github上再键一个repository, 假定为HexoBlog. 进到电脑A上的博客的文件夹. 如果你的博客主题是从github上克隆下来的, 要把主题文件夹里的.git文件夹删掉. 以我自己的为例, 我用的主题是<a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">yilia</a>, 用 ls -la命令就看到 thems/yilia/ 下面的隐藏文件夹.git. 然后删掉.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -la themes/yilia</span><br><span class=\"line\">rm -rf themes/yilia/.git</span><br></pre></td></tr></table></figure></p>","more":"<p>好了, 接下来用github同步整个博客文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"First commit\"</span></span><br></pre></td></tr></table></figure></p>\n<p>这就完成了在电脑A上用git对博客文件夹进行管理, 接下来同步到刚刚新建的repository, 也就是HexoBlog<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:username/HexoBlog.git</span><br></pre></td></tr></table></figure></p>\n<p>上面username换成你自己的github用户名, HexoBlog换成刚刚新建的repository名字. 最后, push到github.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<p><br><br>上面是在电脑A上做的工作,接下来回到电脑B. 首先, 像在电脑A上搭建博客一样, 要在B上安装git, node.js, hexo 安装过程自己Google(既然在A上搭好博客了,安装过程应该会了). 然后把github上的repository克隆到电脑B上<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:username/HexoBlog.git</span><br></pre></td></tr></table></figure></p>\n<p>按照Blog目录下自带的.gitignore文件, node_modules文件夹是不会同步的, 所以同步之后需要自己再次进行<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<p>这样, 在电脑B上写了新文章后, 更新到github上的 username.github.io<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>然后, 更新到github上的 HexoBlog (即刚刚新建的用来同步整个博客文件夹的repository)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>这样, 就可以在不同电脑上同步博客了.</p>\n<p>hexo上有两个issue可以参考<br><a href=\"https://github.com/hexojs/hexo/issues/527\" target=\"_blank\" rel=\"noopener\">issue527</a><br><a href=\"https://github.com/hexojs/hexo/issues/752\" target=\"_blank\" rel=\"noopener\">issue752</a></p>\n<p>@至善园</p>"},{"title":"Python Challenge (Level 10)","date":"2015-01-24T14:41:10.000Z","_content":"\n[第10关](http://www.pythonchallenge.com/pc/return/bull.html)\n\n\n图片下面提示算a[30]的长度. 点击图片上的牛, 会看到\n\n> a = [1, 11, 21, 1211, 111221, \n\n明显, 这是要找出a的规律, 算出a[30]. 想了很久, 智商不够, 完全看不出有什么规律. 照旧找网上的大神, 得到规律. \n<!-- more -->\n\n规律就是, 数组里面的后一个元素是对前一个元素的\"描述\". 比如说第a[1]是 **11**, 表示a[0]是 \"1 个 1\"; a[4]是**111221**, 表示a[3]是 \"1个1, 1个2, 2个1\". \n\n找到规律, 后面就简单了\n``` Python\ndef getNext(a):\n    a = str(a)\n    last = a[0]\n    last_n = 1\n    ret = []\n    for i in range(1, len(a)):\n        if a[i] == last:\n            last_n += 1\n        else:\n            ret += [str(last_n), last]\n            last = a[i]\n            last_n = 1\n    ret += [str(last_n), last]\n    ret = int(''.join(ret))\n    return ret\n\nstart = 1\n\nfor i in range(1, 31):\n    ne = getNext(start)\n    start = ne\n    print i, len(str(ne))\n```\n最后得到5808, 下一关 http://www.pythonchallenge.com/pc/return/5808.html\n","source":"_posts/pc10.md","raw":"title: Python Challenge (Level 10)\ndate: 2015-01-24 22:41:10\ntags: [Python]\n---\n\n[第10关](http://www.pythonchallenge.com/pc/return/bull.html)\n\n\n图片下面提示算a[30]的长度. 点击图片上的牛, 会看到\n\n> a = [1, 11, 21, 1211, 111221, \n\n明显, 这是要找出a的规律, 算出a[30]. 想了很久, 智商不够, 完全看不出有什么规律. 照旧找网上的大神, 得到规律. \n<!-- more -->\n\n规律就是, 数组里面的后一个元素是对前一个元素的\"描述\". 比如说第a[1]是 **11**, 表示a[0]是 \"1 个 1\"; a[4]是**111221**, 表示a[3]是 \"1个1, 1个2, 2个1\". \n\n找到规律, 后面就简单了\n``` Python\ndef getNext(a):\n    a = str(a)\n    last = a[0]\n    last_n = 1\n    ret = []\n    for i in range(1, len(a)):\n        if a[i] == last:\n            last_n += 1\n        else:\n            ret += [str(last_n), last]\n            last = a[i]\n            last_n = 1\n    ret += [str(last_n), last]\n    ret = int(''.join(ret))\n    return ret\n\nstart = 1\n\nfor i in range(1, 31):\n    ne = getNext(start)\n    start = ne\n    print i, len(str(ne))\n```\n最后得到5808, 下一关 http://www.pythonchallenge.com/pc/return/5808.html\n","slug":"pc10","published":1,"updated":"2018-06-10T17:05:07.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs7n0005ytk0utq14iwr","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/bull.html\" target=\"_blank\" rel=\"noopener\">第10关</a></p>\n<p>图片下面提示算a[30]的长度. 点击图片上的牛, 会看到</p>\n<blockquote>\n<p>a = [1, 11, 21, 1211, 111221, </p>\n</blockquote>\n<p>明显, 这是要找出a的规律, 算出a[30]. 想了很久, 智商不够, 完全看不出有什么规律. 照旧找网上的大神, 得到规律.<br><a id=\"more\"></a></p>\n<p>规律就是, 数组里面的后一个元素是对前一个元素的”描述”. 比如说第a[1]是 <strong>11</strong>, 表示a[0]是 “1 个 1”; a[4]是<strong>111221</strong>, 表示a[3]是 “1个1, 1个2, 2个1”. </p>\n<p>找到规律, 后面就简单了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getNext</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    a = str(a)</span><br><span class=\"line\">    last = a[<span class=\"number\">0</span>]</span><br><span class=\"line\">    last_n = <span class=\"number\">1</span></span><br><span class=\"line\">    ret = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(a)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a[i] == last:</span><br><span class=\"line\">            last_n += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ret += [str(last_n), last]</span><br><span class=\"line\">            last = a[i]</span><br><span class=\"line\">            last_n = <span class=\"number\">1</span></span><br><span class=\"line\">    ret += [str(last_n), last]</span><br><span class=\"line\">    ret = int(<span class=\"string\">''</span>.join(ret))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\">start = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">31</span>):</span><br><span class=\"line\">    ne = getNext(start)</span><br><span class=\"line\">    start = ne</span><br><span class=\"line\">    <span class=\"keyword\">print</span> i, len(str(ne))</span><br></pre></td></tr></table></figure></p>\n<p>最后得到5808, 下一关 <a href=\"http://www.pythonchallenge.com/pc/return/5808.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/5808.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/bull.html\" target=\"_blank\" rel=\"noopener\">第10关</a></p>\n<p>图片下面提示算a[30]的长度. 点击图片上的牛, 会看到</p>\n<blockquote>\n<p>a = [1, 11, 21, 1211, 111221, </p>\n</blockquote>\n<p>明显, 这是要找出a的规律, 算出a[30]. 想了很久, 智商不够, 完全看不出有什么规律. 照旧找网上的大神, 得到规律.<br>","more":"</p>\n<p>规律就是, 数组里面的后一个元素是对前一个元素的”描述”. 比如说第a[1]是 <strong>11</strong>, 表示a[0]是 “1 个 1”; a[4]是<strong>111221</strong>, 表示a[3]是 “1个1, 1个2, 2个1”. </p>\n<p>找到规律, 后面就简单了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getNext</span><span class=\"params\">(a)</span>:</span></span><br><span class=\"line\">    a = str(a)</span><br><span class=\"line\">    last = a[<span class=\"number\">0</span>]</span><br><span class=\"line\">    last_n = <span class=\"number\">1</span></span><br><span class=\"line\">    ret = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(a)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> a[i] == last:</span><br><span class=\"line\">            last_n += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ret += [str(last_n), last]</span><br><span class=\"line\">            last = a[i]</span><br><span class=\"line\">            last_n = <span class=\"number\">1</span></span><br><span class=\"line\">    ret += [str(last_n), last]</span><br><span class=\"line\">    ret = int(<span class=\"string\">''</span>.join(ret))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\">start = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">31</span>):</span><br><span class=\"line\">    ne = getNext(start)</span><br><span class=\"line\">    start = ne</span><br><span class=\"line\">    <span class=\"keyword\">print</span> i, len(str(ne))</span><br></pre></td></tr></table></figure></p>\n<p>最后得到5808, 下一关 <a href=\"http://www.pythonchallenge.com/pc/return/5808.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/5808.html</a></p>"},{"title":"Python Challenge (Level 11)","date":"2015-01-25T05:48:19.000Z","_content":"\n[第11关](http://www.pythonchallenge.com/pc/return/5808.html)\n\n一张模糊的图片, 网页标题是**odd even**. 图片看起来像是由不同的图片叠加得到的, 要按照odd, even像素把它分开. 仍然是要用到[Pillow](https://pillow.readthedocs.org/index.html)模块. 为了方便分割, 我还用到了[numpy](http://www.numpy.org/)\n\n<!-- more -->\n\n根据水平和垂直方向的奇偶位置, 把原图的像素分成四个部分, 每个部分形成一张小图, 有点像小波分解里的四个部分.\n``` Python\nfrom PIL import Image\nimport numpy as np\n\nim = Image.open('cave.jpg')\nwidth, height = im.size\nimdata = list(im.getdata())\nimdata = np.array(imdata)\nimdata = imdata.reshape((height, width, 3))\n\naa = imdata[0:height:2, 0:width:2, :]\nhh = imdata[0:height:2, 1:width:2, :]\nvv = imdata[1:height:2, 0:width:2, :]\ndd = imdata[1:height:2, 1:width:2, :]\nsub_imgs = [aa, hh, vv, dd]\nim2 = Image.new(im.mode, (width/2, height/2))\n\nfor img in sub_imgs:\n    img = img.reshape((-1, 3)).tolist()\n    img = [tuple(x) for x in img]\n    im2.putdata(img)\n    im2.show()\n```\n\n显示出来的四张图片, aa和dd是一样的, hh和vv是一样的. 图片上可以得到通关信息**evil** 下一关: http://www.pythonchallenge.com/pc/return/evil.html\n","source":"_posts/pc11.md","raw":"title: Python Challenge (Level 11)\ndate: 2015-01-25 13:48:19\ntags: [Python]\n---\n\n[第11关](http://www.pythonchallenge.com/pc/return/5808.html)\n\n一张模糊的图片, 网页标题是**odd even**. 图片看起来像是由不同的图片叠加得到的, 要按照odd, even像素把它分开. 仍然是要用到[Pillow](https://pillow.readthedocs.org/index.html)模块. 为了方便分割, 我还用到了[numpy](http://www.numpy.org/)\n\n<!-- more -->\n\n根据水平和垂直方向的奇偶位置, 把原图的像素分成四个部分, 每个部分形成一张小图, 有点像小波分解里的四个部分.\n``` Python\nfrom PIL import Image\nimport numpy as np\n\nim = Image.open('cave.jpg')\nwidth, height = im.size\nimdata = list(im.getdata())\nimdata = np.array(imdata)\nimdata = imdata.reshape((height, width, 3))\n\naa = imdata[0:height:2, 0:width:2, :]\nhh = imdata[0:height:2, 1:width:2, :]\nvv = imdata[1:height:2, 0:width:2, :]\ndd = imdata[1:height:2, 1:width:2, :]\nsub_imgs = [aa, hh, vv, dd]\nim2 = Image.new(im.mode, (width/2, height/2))\n\nfor img in sub_imgs:\n    img = img.reshape((-1, 3)).tolist()\n    img = [tuple(x) for x in img]\n    im2.putdata(img)\n    im2.show()\n```\n\n显示出来的四张图片, aa和dd是一样的, hh和vv是一样的. 图片上可以得到通关信息**evil** 下一关: http://www.pythonchallenge.com/pc/return/evil.html\n","slug":"pc11","published":1,"updated":"2018-06-10T17:05:07.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs7q0008ytk084ubfta4","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/5808.html\" target=\"_blank\" rel=\"noopener\">第11关</a></p>\n<p>一张模糊的图片, 网页标题是<strong>odd even</strong>. 图片看起来像是由不同的图片叠加得到的, 要按照odd, even像素把它分开. 仍然是要用到<a href=\"https://pillow.readthedocs.org/index.html\" target=\"_blank\" rel=\"noopener\">Pillow</a>模块. 为了方便分割, 我还用到了<a href=\"http://www.numpy.org/\" target=\"_blank\" rel=\"noopener\">numpy</a></p>\n<a id=\"more\"></a>\n<p>根据水平和垂直方向的奇偶位置, 把原图的像素分成四个部分, 每个部分形成一张小图, 有点像小波分解里的四个部分.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'cave.jpg'</span>)</span><br><span class=\"line\">width, height = im.size</span><br><span class=\"line\">imdata = list(im.getdata())</span><br><span class=\"line\">imdata = np.array(imdata)</span><br><span class=\"line\">imdata = imdata.reshape((height, width, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">aa = imdata[<span class=\"number\">0</span>:height:<span class=\"number\">2</span>, <span class=\"number\">0</span>:width:<span class=\"number\">2</span>, :]</span><br><span class=\"line\">hh = imdata[<span class=\"number\">0</span>:height:<span class=\"number\">2</span>, <span class=\"number\">1</span>:width:<span class=\"number\">2</span>, :]</span><br><span class=\"line\">vv = imdata[<span class=\"number\">1</span>:height:<span class=\"number\">2</span>, <span class=\"number\">0</span>:width:<span class=\"number\">2</span>, :]</span><br><span class=\"line\">dd = imdata[<span class=\"number\">1</span>:height:<span class=\"number\">2</span>, <span class=\"number\">1</span>:width:<span class=\"number\">2</span>, :]</span><br><span class=\"line\">sub_imgs = [aa, hh, vv, dd]</span><br><span class=\"line\">im2 = Image.new(im.mode, (width/<span class=\"number\">2</span>, height/<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> img <span class=\"keyword\">in</span> sub_imgs:</span><br><span class=\"line\">    img = img.reshape((<span class=\"number\">-1</span>, <span class=\"number\">3</span>)).tolist()</span><br><span class=\"line\">    img = [tuple(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> img]</span><br><span class=\"line\">    im2.putdata(img)</span><br><span class=\"line\">    im2.show()</span><br></pre></td></tr></table></figure></p>\n<p>显示出来的四张图片, aa和dd是一样的, hh和vv是一样的. 图片上可以得到通关信息<strong>evil</strong> 下一关: <a href=\"http://www.pythonchallenge.com/pc/return/evil.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/evil.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/5808.html\" target=\"_blank\" rel=\"noopener\">第11关</a></p>\n<p>一张模糊的图片, 网页标题是<strong>odd even</strong>. 图片看起来像是由不同的图片叠加得到的, 要按照odd, even像素把它分开. 仍然是要用到<a href=\"https://pillow.readthedocs.org/index.html\" target=\"_blank\" rel=\"noopener\">Pillow</a>模块. 为了方便分割, 我还用到了<a href=\"http://www.numpy.org/\" target=\"_blank\" rel=\"noopener\">numpy</a></p>","more":"<p>根据水平和垂直方向的奇偶位置, 把原图的像素分成四个部分, 每个部分形成一张小图, 有点像小波分解里的四个部分.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'cave.jpg'</span>)</span><br><span class=\"line\">width, height = im.size</span><br><span class=\"line\">imdata = list(im.getdata())</span><br><span class=\"line\">imdata = np.array(imdata)</span><br><span class=\"line\">imdata = imdata.reshape((height, width, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">aa = imdata[<span class=\"number\">0</span>:height:<span class=\"number\">2</span>, <span class=\"number\">0</span>:width:<span class=\"number\">2</span>, :]</span><br><span class=\"line\">hh = imdata[<span class=\"number\">0</span>:height:<span class=\"number\">2</span>, <span class=\"number\">1</span>:width:<span class=\"number\">2</span>, :]</span><br><span class=\"line\">vv = imdata[<span class=\"number\">1</span>:height:<span class=\"number\">2</span>, <span class=\"number\">0</span>:width:<span class=\"number\">2</span>, :]</span><br><span class=\"line\">dd = imdata[<span class=\"number\">1</span>:height:<span class=\"number\">2</span>, <span class=\"number\">1</span>:width:<span class=\"number\">2</span>, :]</span><br><span class=\"line\">sub_imgs = [aa, hh, vv, dd]</span><br><span class=\"line\">im2 = Image.new(im.mode, (width/<span class=\"number\">2</span>, height/<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> img <span class=\"keyword\">in</span> sub_imgs:</span><br><span class=\"line\">    img = img.reshape((<span class=\"number\">-1</span>, <span class=\"number\">3</span>)).tolist()</span><br><span class=\"line\">    img = [tuple(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> img]</span><br><span class=\"line\">    im2.putdata(img)</span><br><span class=\"line\">    im2.show()</span><br></pre></td></tr></table></figure></p>\n<p>显示出来的四张图片, aa和dd是一样的, hh和vv是一样的. 图片上可以得到通关信息<strong>evil</strong> 下一关: <a href=\"http://www.pythonchallenge.com/pc/return/evil.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/evil.html</a></p>"},{"title":"Python Challenge (Level 12)","date":"2015-01-26T06:36:08.000Z","_content":"\n[第12关](http://www.pythonchallenge.com/pc/return/evil.html)\n\n这一关需要写的代码只有短短几行，前提是你能解开所有的谜题。\n\n刚看到图片时，以为还是用到图像处理模块，后来发现没有用。 注意Page Source里面是**evil1.jpg** 而不是**evil.jpg**, 多了个1，根据一路通关过来的规律，有**1**我们就看下有没有**2**. 把链接后面改为evil2.jpg， 会看到一张图片， 上面写着\n\n> not jpg --.gfx\n\n<!-- more -->\n\n改为evil3.jpg，会看到提示**no more evils**。 好吧，为我们把evil2.jpg改为 evil2.gfx， 下载得到一个文件[evil2.gfx](http://www.pythonchallenge.com/pc/return/evil2.gfx).\n\n从未见过这种格式的文件， 网上介绍似乎是一种3D model/scene format， ASCII format, 详情可以看[这里](https://www.cs.duke.edu/courses/cps124/fall01/code/gfx_reader/docs/gfx_format.html).\n\n回过头看evil1.jpg， 图片上面是一个人在发五分牌， 似乎在提示我们把evil2.gfx文件按字节顺序轮流划分为五份。 比如原来文件是 <font color='red'>[b0, b1, b2, b3, b4, b5, b6, b7, b8, b9]</font>, 就分成 <font color='red'>[b0, b5], [b1, b6], [b2, b7], [b3, b8], [b4, b9]</font>.\n\n``` Python\nwith open('evil2.gfx', 'rb') as inFile:\n    data = inFile.read()\n\nfor i in range(5):\n    with open(str(i), 'wb') as outFile:\n        outFile.write(data[i::5])\n```\n\n最后会得到五章图片，上面分别有dis， pro， port， ional， ity, 最后一个是被划掉的。所以， 组合起来的通关信息就是**disproportionl**， 得到下一关网址： http://www.pythonchallenge.com/pc/return/disproportional.html\n","source":"_posts/pc12.md","raw":"title: Python Challenge (Level 12)\ndate: 2015-01-26 14:36:08\ntags: [Python]\n---\n\n[第12关](http://www.pythonchallenge.com/pc/return/evil.html)\n\n这一关需要写的代码只有短短几行，前提是你能解开所有的谜题。\n\n刚看到图片时，以为还是用到图像处理模块，后来发现没有用。 注意Page Source里面是**evil1.jpg** 而不是**evil.jpg**, 多了个1，根据一路通关过来的规律，有**1**我们就看下有没有**2**. 把链接后面改为evil2.jpg， 会看到一张图片， 上面写着\n\n> not jpg --.gfx\n\n<!-- more -->\n\n改为evil3.jpg，会看到提示**no more evils**。 好吧，为我们把evil2.jpg改为 evil2.gfx， 下载得到一个文件[evil2.gfx](http://www.pythonchallenge.com/pc/return/evil2.gfx).\n\n从未见过这种格式的文件， 网上介绍似乎是一种3D model/scene format， ASCII format, 详情可以看[这里](https://www.cs.duke.edu/courses/cps124/fall01/code/gfx_reader/docs/gfx_format.html).\n\n回过头看evil1.jpg， 图片上面是一个人在发五分牌， 似乎在提示我们把evil2.gfx文件按字节顺序轮流划分为五份。 比如原来文件是 <font color='red'>[b0, b1, b2, b3, b4, b5, b6, b7, b8, b9]</font>, 就分成 <font color='red'>[b0, b5], [b1, b6], [b2, b7], [b3, b8], [b4, b9]</font>.\n\n``` Python\nwith open('evil2.gfx', 'rb') as inFile:\n    data = inFile.read()\n\nfor i in range(5):\n    with open(str(i), 'wb') as outFile:\n        outFile.write(data[i::5])\n```\n\n最后会得到五章图片，上面分别有dis， pro， port， ional， ity, 最后一个是被划掉的。所以， 组合起来的通关信息就是**disproportionl**， 得到下一关网址： http://www.pythonchallenge.com/pc/return/disproportional.html\n","slug":"pc12","published":1,"updated":"2018-06-10T17:05:07.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs7t000aytk0jo2rbxcu","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/evil.html\" target=\"_blank\" rel=\"noopener\">第12关</a></p>\n<p>这一关需要写的代码只有短短几行，前提是你能解开所有的谜题。</p>\n<p>刚看到图片时，以为还是用到图像处理模块，后来发现没有用。 注意Page Source里面是<strong>evil1.jpg</strong> 而不是<strong>evil.jpg</strong>, 多了个1，根据一路通关过来的规律，有<strong>1</strong>我们就看下有没有<strong>2</strong>. 把链接后面改为evil2.jpg， 会看到一张图片， 上面写着</p>\n<blockquote>\n<p>not jpg –.gfx</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>改为evil3.jpg，会看到提示<strong>no more evils</strong>。 好吧，为我们把evil2.jpg改为 evil2.gfx， 下载得到一个文件<a href=\"http://www.pythonchallenge.com/pc/return/evil2.gfx\" target=\"_blank\" rel=\"noopener\">evil2.gfx</a>.</p>\n<p>从未见过这种格式的文件， 网上介绍似乎是一种3D model/scene format， ASCII format, 详情可以看<a href=\"https://www.cs.duke.edu/courses/cps124/fall01/code/gfx_reader/docs/gfx_format.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>回过头看evil1.jpg， 图片上面是一个人在发五分牌， 似乎在提示我们把evil2.gfx文件按字节顺序轮流划分为五份。 比如原来文件是 <font color=\"red\">[b0, b1, b2, b3, b4, b5, b6, b7, b8, b9]</font>, 就分成 <font color=\"red\">[b0, b5], [b1, b6], [b2, b7], [b3, b8], [b4, b9]</font>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'evil2.gfx'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> inFile:</span><br><span class=\"line\">    data = inFile.read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(str(i), <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> outFile:</span><br><span class=\"line\">        outFile.write(data[i::<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n<p>最后会得到五章图片，上面分别有dis， pro， port， ional， ity, 最后一个是被划掉的。所以， 组合起来的通关信息就是<strong>disproportionl</strong>， 得到下一关网址： <a href=\"http://www.pythonchallenge.com/pc/return/disproportional.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/disproportional.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/evil.html\" target=\"_blank\" rel=\"noopener\">第12关</a></p>\n<p>这一关需要写的代码只有短短几行，前提是你能解开所有的谜题。</p>\n<p>刚看到图片时，以为还是用到图像处理模块，后来发现没有用。 注意Page Source里面是<strong>evil1.jpg</strong> 而不是<strong>evil.jpg</strong>, 多了个1，根据一路通关过来的规律，有<strong>1</strong>我们就看下有没有<strong>2</strong>. 把链接后面改为evil2.jpg， 会看到一张图片， 上面写着</p>\n<blockquote>\n<p>not jpg –.gfx</p>\n</blockquote>","more":"<p>改为evil3.jpg，会看到提示<strong>no more evils</strong>。 好吧，为我们把evil2.jpg改为 evil2.gfx， 下载得到一个文件<a href=\"http://www.pythonchallenge.com/pc/return/evil2.gfx\" target=\"_blank\" rel=\"noopener\">evil2.gfx</a>.</p>\n<p>从未见过这种格式的文件， 网上介绍似乎是一种3D model/scene format， ASCII format, 详情可以看<a href=\"https://www.cs.duke.edu/courses/cps124/fall01/code/gfx_reader/docs/gfx_format.html\" target=\"_blank\" rel=\"noopener\">这里</a>.</p>\n<p>回过头看evil1.jpg， 图片上面是一个人在发五分牌， 似乎在提示我们把evil2.gfx文件按字节顺序轮流划分为五份。 比如原来文件是 <font color=\"red\">[b0, b1, b2, b3, b4, b5, b6, b7, b8, b9]</font>, 就分成 <font color=\"red\">[b0, b5], [b1, b6], [b2, b7], [b3, b8], [b4, b9]</font>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'evil2.gfx'</span>, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> inFile:</span><br><span class=\"line\">    data = inFile.read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(str(i), <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> outFile:</span><br><span class=\"line\">        outFile.write(data[i::<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n<p>最后会得到五章图片，上面分别有dis， pro， port， ional， ity, 最后一个是被划掉的。所以， 组合起来的通关信息就是<strong>disproportionl</strong>， 得到下一关网址： <a href=\"http://www.pythonchallenge.com/pc/return/disproportional.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/disproportional.html</a></p>"},{"title":"Python Challenge (Level 14)","date":"2015-01-28T16:11:42.000Z","_content":"\n[第14关](http://www.pythonchallenge.com/pc/return/italy.html)\n一个螺旋状的面包，网页title是**walk around**, 再加上大图的下面有一张100\\*100的小图。小图看不出是什么东西，只有竖条纹。把小图保存到本地，放大后发现很长的一条线，也就是说它并不是100\\*100的，而是10000\\*1的。只是在网页上被reshape成100\\*100而已。看来我们需要将这10000个像素，按照面包螺旋的形状，把它重新排列成100\\*100的大小。\n\n比如[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]排列成\n\n    1  12  11  10\n    2  13  16   9\n    3  14  15   8\n    4   5   6   7\n\n<!-- more -->\n\n现在的问题就是怎么把得到的一列pixel，按螺旋形式reshape成100\\*100大小的图片。\n\nPage Source里有这么一行提示\n\n> remember: 100*100 = (100+99+99+98) + (...\n\n100\\*100自然就是图片大小了，那后面的一串数是什么?为什么四个一组？原来。四个数正好是转一圈的步数。(100, 99, 99, 98)就是向下100, 再向右99, 再向上99, 再向左98. 这就绕了100\\*100大小的最外面一圈. 接着就是(98, 97, 97, 96)，以此类推，直到填满整个100\\*100的大小。很容易可以得到所有的步数。\n\n``` Python\nallSteps = [[i, i-1, i-1, i-2] for i in range(100, 0, -2)]\n```\n\n有了步数后，再定义一个前进N步，获取坐标的方法，就基本可以实现把一行pixel变成方形图片了。\n``` Python\n# -*- coding:utf-8 -*- \n\nfrom PIL import Image\n\ndef moveForward(startPos, direction, nStep):\n    \"\"\" 返回从startPos开始, 按照drection前进nStep依次得到的坐标,\n        包含startPos.\n\n    :type startPos: (int, int)\n    :param startPos: 开始坐标, (x, y)\n\n    :type direction: (int, int)\n    :param direction: 前进方向, 每个方向的取值只能为-1, 0, 1, \n                      分别表示坐标减小、不变、增加。\n                      不同的组合可以得到上下左右四个方向， 例如(0, 1)表示向右。\n\n    :type nStep: int\n    :param nStep: 前进步数， >=0\n    \"\"\"\n    pos = [None, None]\n    for i in range(len(startPos)):\n        if direction[i] == 0:\n            pos[i] = [startPos[i]] * nStep\n        elif direction[i] < 0:\n            pos[i] = range(startPos[i], startPos[i] - nStep, direction[i])\n        else:\n            pos[i] = range(startPos[i], startPos[i] + nStep, direction[i])\n    return zip(pos[0], pos[1])\n\ndef getPos(allSteps):\n    \"\"\" 给定以4个整数为一组的多组步数, 返回从(0, 0)开始,\n        以此按下、右、上、左前进所得到的所有坐标\n\n    :type allSteps: 2D int array, the second dimension is 4\n                    [[int, int, int, int], ..., [int, int, int, int]]\n    :param allSteps: 多组步数, 每一组都包含上下左右四个方向的步数.\n    \"\"\"\n    start_pos = (0, 0)\n    pos = []\n    for steps in allSteps:\n        # down\n        if pos:\n            start_pos = (pos[-1][0] + 1, pos[-1][1])\n        else:\n            start_pos = (0, 0)\n        pos += moveForward(start_pos, (1, 0), steps[0])\n        \n        # right\n        start_pos = (pos[-1][0], pos[-1][1] + 1)\n        pos += moveForward(start_pos, (0, 1), steps[1])\n\n        # up\n        start_pos = (pos[-1][0] - 1, pos[-1][1])\n        pos += moveForward(start_pos, (-1, 0), steps[2])\n\n        # left\n        if steps[3] <= 0:\n            break\n        else:\n            start_pos = (pos[-1][0], pos[-1][1] - 1)\n            pos += moveForward(start_pos, (0, -1), steps[3])\n\n    return pos\n\ndef main():\n    im = Image.open('wire.png')\n    imdata = list(im.getdata())\n    allSteps = [[i, i-1, i-1, i-2] for i in range(100, 0, -2)]\n    pos = getPos(allSteps)\n    newIm = Image.new(im.mode, (100, 100))\n    for i in range(len(pos)):\n        newIm.putpixel(pos[i], imdata[i])\n    newIm.show()\n\nif __name__ == \"__main__\" : main()\n```\n\n最后，会得到一张猫的图片，输入cat会跳到一个网页，告诉你这只猫叫做uzi,并且， you will hear from him later. http://www.pythonchallenge.com/pc/return/uzi.html\n","source":"_posts/pc14.md","raw":"title: Python Challenge (Level 14)\ndate: 2015-01-29 00:11:42\ntags: [Python]\n---\n\n[第14关](http://www.pythonchallenge.com/pc/return/italy.html)\n一个螺旋状的面包，网页title是**walk around**, 再加上大图的下面有一张100\\*100的小图。小图看不出是什么东西，只有竖条纹。把小图保存到本地，放大后发现很长的一条线，也就是说它并不是100\\*100的，而是10000\\*1的。只是在网页上被reshape成100\\*100而已。看来我们需要将这10000个像素，按照面包螺旋的形状，把它重新排列成100\\*100的大小。\n\n比如[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]排列成\n\n    1  12  11  10\n    2  13  16   9\n    3  14  15   8\n    4   5   6   7\n\n<!-- more -->\n\n现在的问题就是怎么把得到的一列pixel，按螺旋形式reshape成100\\*100大小的图片。\n\nPage Source里有这么一行提示\n\n> remember: 100*100 = (100+99+99+98) + (...\n\n100\\*100自然就是图片大小了，那后面的一串数是什么?为什么四个一组？原来。四个数正好是转一圈的步数。(100, 99, 99, 98)就是向下100, 再向右99, 再向上99, 再向左98. 这就绕了100\\*100大小的最外面一圈. 接着就是(98, 97, 97, 96)，以此类推，直到填满整个100\\*100的大小。很容易可以得到所有的步数。\n\n``` Python\nallSteps = [[i, i-1, i-1, i-2] for i in range(100, 0, -2)]\n```\n\n有了步数后，再定义一个前进N步，获取坐标的方法，就基本可以实现把一行pixel变成方形图片了。\n``` Python\n# -*- coding:utf-8 -*- \n\nfrom PIL import Image\n\ndef moveForward(startPos, direction, nStep):\n    \"\"\" 返回从startPos开始, 按照drection前进nStep依次得到的坐标,\n        包含startPos.\n\n    :type startPos: (int, int)\n    :param startPos: 开始坐标, (x, y)\n\n    :type direction: (int, int)\n    :param direction: 前进方向, 每个方向的取值只能为-1, 0, 1, \n                      分别表示坐标减小、不变、增加。\n                      不同的组合可以得到上下左右四个方向， 例如(0, 1)表示向右。\n\n    :type nStep: int\n    :param nStep: 前进步数， >=0\n    \"\"\"\n    pos = [None, None]\n    for i in range(len(startPos)):\n        if direction[i] == 0:\n            pos[i] = [startPos[i]] * nStep\n        elif direction[i] < 0:\n            pos[i] = range(startPos[i], startPos[i] - nStep, direction[i])\n        else:\n            pos[i] = range(startPos[i], startPos[i] + nStep, direction[i])\n    return zip(pos[0], pos[1])\n\ndef getPos(allSteps):\n    \"\"\" 给定以4个整数为一组的多组步数, 返回从(0, 0)开始,\n        以此按下、右、上、左前进所得到的所有坐标\n\n    :type allSteps: 2D int array, the second dimension is 4\n                    [[int, int, int, int], ..., [int, int, int, int]]\n    :param allSteps: 多组步数, 每一组都包含上下左右四个方向的步数.\n    \"\"\"\n    start_pos = (0, 0)\n    pos = []\n    for steps in allSteps:\n        # down\n        if pos:\n            start_pos = (pos[-1][0] + 1, pos[-1][1])\n        else:\n            start_pos = (0, 0)\n        pos += moveForward(start_pos, (1, 0), steps[0])\n        \n        # right\n        start_pos = (pos[-1][0], pos[-1][1] + 1)\n        pos += moveForward(start_pos, (0, 1), steps[1])\n\n        # up\n        start_pos = (pos[-1][0] - 1, pos[-1][1])\n        pos += moveForward(start_pos, (-1, 0), steps[2])\n\n        # left\n        if steps[3] <= 0:\n            break\n        else:\n            start_pos = (pos[-1][0], pos[-1][1] - 1)\n            pos += moveForward(start_pos, (0, -1), steps[3])\n\n    return pos\n\ndef main():\n    im = Image.open('wire.png')\n    imdata = list(im.getdata())\n    allSteps = [[i, i-1, i-1, i-2] for i in range(100, 0, -2)]\n    pos = getPos(allSteps)\n    newIm = Image.new(im.mode, (100, 100))\n    for i in range(len(pos)):\n        newIm.putpixel(pos[i], imdata[i])\n    newIm.show()\n\nif __name__ == \"__main__\" : main()\n```\n\n最后，会得到一张猫的图片，输入cat会跳到一个网页，告诉你这只猫叫做uzi,并且， you will hear from him later. http://www.pythonchallenge.com/pc/return/uzi.html\n","slug":"pc14","published":1,"updated":"2018-06-10T17:05:07.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs7w000dytk0b7pfzo4a","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/italy.html\" target=\"_blank\" rel=\"noopener\">第14关</a><br>一个螺旋状的面包，网页title是<strong>walk around</strong>, 再加上大图的下面有一张100*100的小图。小图看不出是什么东西，只有竖条纹。把小图保存到本地，放大后发现很长的一条线，也就是说它并不是100*100的，而是10000*1的。只是在网页上被reshape成100*100而已。看来我们需要将这10000个像素，按照面包螺旋的形状，把它重新排列成100*100的大小。</p>\n<p>比如[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]排列成</p>\n<pre><code>1  12  11  10\n2  13  16   9\n3  14  15   8\n4   5   6   7\n</code></pre><a id=\"more\"></a>\n<p>现在的问题就是怎么把得到的一列pixel，按螺旋形式reshape成100*100大小的图片。</p>\n<p>Page Source里有这么一行提示</p>\n<blockquote>\n<p>remember: 100*100 = (100+99+99+98) + (…</p>\n</blockquote>\n<p>100*100自然就是图片大小了，那后面的一串数是什么?为什么四个一组？原来。四个数正好是转一圈的步数。(100, 99, 99, 98)就是向下100, 再向右99, 再向上99, 再向左98. 这就绕了100*100大小的最外面一圈. 接着就是(98, 97, 97, 96)，以此类推，直到填满整个100*100的大小。很容易可以得到所有的步数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allSteps = [[i, i<span class=\"number\">-1</span>, i<span class=\"number\">-1</span>, i<span class=\"number\">-2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">-2</span>)]</span><br></pre></td></tr></table></figure>\n<p>有了步数后，再定义一个前进N步，获取坐标的方法，就基本可以实现把一行pixel变成方形图片了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*- </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">moveForward</span><span class=\"params\">(startPos, direction, nStep)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" 返回从startPos开始, 按照drection前进nStep依次得到的坐标,</span></span><br><span class=\"line\"><span class=\"string\">        包含startPos.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :type startPos: (int, int)</span></span><br><span class=\"line\"><span class=\"string\">    :param startPos: 开始坐标, (x, y)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :type direction: (int, int)</span></span><br><span class=\"line\"><span class=\"string\">    :param direction: 前进方向, 每个方向的取值只能为-1, 0, 1, </span></span><br><span class=\"line\"><span class=\"string\">                      分别表示坐标减小、不变、增加。</span></span><br><span class=\"line\"><span class=\"string\">                      不同的组合可以得到上下左右四个方向， 例如(0, 1)表示向右。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :type nStep: int</span></span><br><span class=\"line\"><span class=\"string\">    :param nStep: 前进步数， &gt;=0</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    pos = [<span class=\"keyword\">None</span>, <span class=\"keyword\">None</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(startPos)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> direction[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            pos[i] = [startPos[i]] * nStep</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> direction[i] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            pos[i] = range(startPos[i], startPos[i] - nStep, direction[i])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            pos[i] = range(startPos[i], startPos[i] + nStep, direction[i])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zip(pos[<span class=\"number\">0</span>], pos[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getPos</span><span class=\"params\">(allSteps)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" 给定以4个整数为一组的多组步数, 返回从(0, 0)开始,</span></span><br><span class=\"line\"><span class=\"string\">        以此按下、右、上、左前进所得到的所有坐标</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :type allSteps: 2D int array, the second dimension is 4</span></span><br><span class=\"line\"><span class=\"string\">                    [[int, int, int, int], ..., [int, int, int, int]]</span></span><br><span class=\"line\"><span class=\"string\">    :param allSteps: 多组步数, 每一组都包含上下左右四个方向的步数.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    start_pos = (<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    pos = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> steps <span class=\"keyword\">in</span> allSteps:</span><br><span class=\"line\">        <span class=\"comment\"># down</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pos:</span><br><span class=\"line\">            start_pos = (pos[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] + <span class=\"number\">1</span>, pos[<span class=\"number\">-1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            start_pos = (<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        pos += moveForward(start_pos, (<span class=\"number\">1</span>, <span class=\"number\">0</span>), steps[<span class=\"number\">0</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># right</span></span><br><span class=\"line\">        start_pos = (pos[<span class=\"number\">-1</span>][<span class=\"number\">0</span>], pos[<span class=\"number\">-1</span>][<span class=\"number\">1</span>] + <span class=\"number\">1</span>)</span><br><span class=\"line\">        pos += moveForward(start_pos, (<span class=\"number\">0</span>, <span class=\"number\">1</span>), steps[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># up</span></span><br><span class=\"line\">        start_pos = (pos[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] - <span class=\"number\">1</span>, pos[<span class=\"number\">-1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">        pos += moveForward(start_pos, (<span class=\"number\">-1</span>, <span class=\"number\">0</span>), steps[<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># left</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> steps[<span class=\"number\">3</span>] &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            start_pos = (pos[<span class=\"number\">-1</span>][<span class=\"number\">0</span>], pos[<span class=\"number\">-1</span>][<span class=\"number\">1</span>] - <span class=\"number\">1</span>)</span><br><span class=\"line\">            pos += moveForward(start_pos, (<span class=\"number\">0</span>, <span class=\"number\">-1</span>), steps[<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pos</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    im = Image.open(<span class=\"string\">'wire.png'</span>)</span><br><span class=\"line\">    imdata = list(im.getdata())</span><br><span class=\"line\">    allSteps = [[i, i<span class=\"number\">-1</span>, i<span class=\"number\">-1</span>, i<span class=\"number\">-2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">-2</span>)]</span><br><span class=\"line\">    pos = getPos(allSteps)</span><br><span class=\"line\">    newIm = Image.new(im.mode, (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(pos)):</span><br><span class=\"line\">        newIm.putpixel(pos[i], imdata[i])</span><br><span class=\"line\">    newIm.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : main()</span><br></pre></td></tr></table></figure></p>\n<p>最后，会得到一张猫的图片，输入cat会跳到一个网页，告诉你这只猫叫做uzi,并且， you will hear from him later. <a href=\"http://www.pythonchallenge.com/pc/return/uzi.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/uzi.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/italy.html\" target=\"_blank\" rel=\"noopener\">第14关</a><br>一个螺旋状的面包，网页title是<strong>walk around</strong>, 再加上大图的下面有一张100*100的小图。小图看不出是什么东西，只有竖条纹。把小图保存到本地，放大后发现很长的一条线，也就是说它并不是100*100的，而是10000*1的。只是在网页上被reshape成100*100而已。看来我们需要将这10000个像素，按照面包螺旋的形状，把它重新排列成100*100的大小。</p>\n<p>比如[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]排列成</p>\n<pre><code>1  12  11  10\n2  13  16   9\n3  14  15   8\n4   5   6   7\n</code></pre>","more":"<p>现在的问题就是怎么把得到的一列pixel，按螺旋形式reshape成100*100大小的图片。</p>\n<p>Page Source里有这么一行提示</p>\n<blockquote>\n<p>remember: 100*100 = (100+99+99+98) + (…</p>\n</blockquote>\n<p>100*100自然就是图片大小了，那后面的一串数是什么?为什么四个一组？原来。四个数正好是转一圈的步数。(100, 99, 99, 98)就是向下100, 再向右99, 再向上99, 再向左98. 这就绕了100*100大小的最外面一圈. 接着就是(98, 97, 97, 96)，以此类推，直到填满整个100*100的大小。很容易可以得到所有的步数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allSteps = [[i, i<span class=\"number\">-1</span>, i<span class=\"number\">-1</span>, i<span class=\"number\">-2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">-2</span>)]</span><br></pre></td></tr></table></figure>\n<p>有了步数后，再定义一个前进N步，获取坐标的方法，就基本可以实现把一行pixel变成方形图片了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*- </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">moveForward</span><span class=\"params\">(startPos, direction, nStep)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" 返回从startPos开始, 按照drection前进nStep依次得到的坐标,</span></span><br><span class=\"line\"><span class=\"string\">        包含startPos.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :type startPos: (int, int)</span></span><br><span class=\"line\"><span class=\"string\">    :param startPos: 开始坐标, (x, y)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :type direction: (int, int)</span></span><br><span class=\"line\"><span class=\"string\">    :param direction: 前进方向, 每个方向的取值只能为-1, 0, 1, </span></span><br><span class=\"line\"><span class=\"string\">                      分别表示坐标减小、不变、增加。</span></span><br><span class=\"line\"><span class=\"string\">                      不同的组合可以得到上下左右四个方向， 例如(0, 1)表示向右。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :type nStep: int</span></span><br><span class=\"line\"><span class=\"string\">    :param nStep: 前进步数， &gt;=0</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    pos = [<span class=\"keyword\">None</span>, <span class=\"keyword\">None</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(startPos)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> direction[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            pos[i] = [startPos[i]] * nStep</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> direction[i] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            pos[i] = range(startPos[i], startPos[i] - nStep, direction[i])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            pos[i] = range(startPos[i], startPos[i] + nStep, direction[i])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zip(pos[<span class=\"number\">0</span>], pos[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getPos</span><span class=\"params\">(allSteps)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" 给定以4个整数为一组的多组步数, 返回从(0, 0)开始,</span></span><br><span class=\"line\"><span class=\"string\">        以此按下、右、上、左前进所得到的所有坐标</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :type allSteps: 2D int array, the second dimension is 4</span></span><br><span class=\"line\"><span class=\"string\">                    [[int, int, int, int], ..., [int, int, int, int]]</span></span><br><span class=\"line\"><span class=\"string\">    :param allSteps: 多组步数, 每一组都包含上下左右四个方向的步数.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    start_pos = (<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    pos = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> steps <span class=\"keyword\">in</span> allSteps:</span><br><span class=\"line\">        <span class=\"comment\"># down</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pos:</span><br><span class=\"line\">            start_pos = (pos[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] + <span class=\"number\">1</span>, pos[<span class=\"number\">-1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            start_pos = (<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        pos += moveForward(start_pos, (<span class=\"number\">1</span>, <span class=\"number\">0</span>), steps[<span class=\"number\">0</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># right</span></span><br><span class=\"line\">        start_pos = (pos[<span class=\"number\">-1</span>][<span class=\"number\">0</span>], pos[<span class=\"number\">-1</span>][<span class=\"number\">1</span>] + <span class=\"number\">1</span>)</span><br><span class=\"line\">        pos += moveForward(start_pos, (<span class=\"number\">0</span>, <span class=\"number\">1</span>), steps[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># up</span></span><br><span class=\"line\">        start_pos = (pos[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] - <span class=\"number\">1</span>, pos[<span class=\"number\">-1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">        pos += moveForward(start_pos, (<span class=\"number\">-1</span>, <span class=\"number\">0</span>), steps[<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># left</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> steps[<span class=\"number\">3</span>] &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            start_pos = (pos[<span class=\"number\">-1</span>][<span class=\"number\">0</span>], pos[<span class=\"number\">-1</span>][<span class=\"number\">1</span>] - <span class=\"number\">1</span>)</span><br><span class=\"line\">            pos += moveForward(start_pos, (<span class=\"number\">0</span>, <span class=\"number\">-1</span>), steps[<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pos</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    im = Image.open(<span class=\"string\">'wire.png'</span>)</span><br><span class=\"line\">    imdata = list(im.getdata())</span><br><span class=\"line\">    allSteps = [[i, i<span class=\"number\">-1</span>, i<span class=\"number\">-1</span>, i<span class=\"number\">-2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>, <span class=\"number\">0</span>, <span class=\"number\">-2</span>)]</span><br><span class=\"line\">    pos = getPos(allSteps)</span><br><span class=\"line\">    newIm = Image.new(im.mode, (<span class=\"number\">100</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(pos)):</span><br><span class=\"line\">        newIm.putpixel(pos[i], imdata[i])</span><br><span class=\"line\">    newIm.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : main()</span><br></pre></td></tr></table></figure></p>\n<p>最后，会得到一张猫的图片，输入cat会跳到一个网页，告诉你这只猫叫做uzi,并且， you will hear from him later. <a href=\"http://www.pythonchallenge.com/pc/return/uzi.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/uzi.html</a></p>"},{"title":"Python Challenge (Level 15)","date":"2015-01-29T11:40:41.000Z","_content":"\n[第15关](http://www.pythonchallenge.com/pc/return/uzi.html)\n\n图片是一月份的日历，Page Source里提示\n\n> he ain't the youngest, he is the second\n> todo: buy flowers for tomorrow\n\n首先， todo是要为明天买花，所以明天（01-27）应该是某个纪念日。然后，他不是最年轻的，只是第二。怎么判断这个他是第二年轻呢，我们需要找到哪一年。可惜，年份中间两个字没有了，只能看出是1xx6. 显然，我们要根据这一页日历推算出年份。\n\n\n看图片的右下角，有两个小的月份日历，应该是对应着前一个和后一个月。所以，右边的应该是二月的。放大后，我们会发现，这个二月比较特殊，<font color=\"red\">有29天</font>，所以这应该是闰年。\n\n但是，这样筛选出来的依然不对。我们还有信息没用到，那就是日期(date)和星期几(weekday)的对应关系。也就是说，<font color=\"red\">1月27是星期二</font>这个信息我们可以用。至此，可以得到这个日期了。\n\n<!-- more -->\n\n``` Python\n# -*- coding:utf-8 -*-\n\nimport datetime\n\n# 闰年\nyears = [y for y in range(1006, 1997) if str(y)[-1] == '6' and y % 4 == 0]\n\n# date和weekday对应\nyear_c = []\nfor y in years:\n    d = datetime.date(y, 1, 27)\n    if d.weekday() == 1:\n        year_c.append(y)\n\n# second youngest\nprint year_c[-2]\n```\n\n现在，我们得到1756年01月27日这个日子，这一天发生了什么事呢？Google \"1756 01 27\"，发现搜索结果指向同一个人——Mozart.\nhttp://www.pythonchallenge.com/pc/return/mozart.html\n","source":"_posts/pc15.md","raw":"title: Python Challenge (Level 15)\ndate: 2015-01-29 19:40:41\ntags: [Python]\n---\n\n[第15关](http://www.pythonchallenge.com/pc/return/uzi.html)\n\n图片是一月份的日历，Page Source里提示\n\n> he ain't the youngest, he is the second\n> todo: buy flowers for tomorrow\n\n首先， todo是要为明天买花，所以明天（01-27）应该是某个纪念日。然后，他不是最年轻的，只是第二。怎么判断这个他是第二年轻呢，我们需要找到哪一年。可惜，年份中间两个字没有了，只能看出是1xx6. 显然，我们要根据这一页日历推算出年份。\n\n\n看图片的右下角，有两个小的月份日历，应该是对应着前一个和后一个月。所以，右边的应该是二月的。放大后，我们会发现，这个二月比较特殊，<font color=\"red\">有29天</font>，所以这应该是闰年。\n\n但是，这样筛选出来的依然不对。我们还有信息没用到，那就是日期(date)和星期几(weekday)的对应关系。也就是说，<font color=\"red\">1月27是星期二</font>这个信息我们可以用。至此，可以得到这个日期了。\n\n<!-- more -->\n\n``` Python\n# -*- coding:utf-8 -*-\n\nimport datetime\n\n# 闰年\nyears = [y for y in range(1006, 1997) if str(y)[-1] == '6' and y % 4 == 0]\n\n# date和weekday对应\nyear_c = []\nfor y in years:\n    d = datetime.date(y, 1, 27)\n    if d.weekday() == 1:\n        year_c.append(y)\n\n# second youngest\nprint year_c[-2]\n```\n\n现在，我们得到1756年01月27日这个日子，这一天发生了什么事呢？Google \"1756 01 27\"，发现搜索结果指向同一个人——Mozart.\nhttp://www.pythonchallenge.com/pc/return/mozart.html\n","slug":"pc15","published":1,"updated":"2018-06-10T17:05:07.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs7z000fytk0on8u0sxb","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/uzi.html\" target=\"_blank\" rel=\"noopener\">第15关</a></p>\n<p>图片是一月份的日历，Page Source里提示</p>\n<blockquote>\n<p>he ain’t the youngest, he is the second<br>todo: buy flowers for tomorrow</p>\n</blockquote>\n<p>首先， todo是要为明天买花，所以明天（01-27）应该是某个纪念日。然后，他不是最年轻的，只是第二。怎么判断这个他是第二年轻呢，我们需要找到哪一年。可惜，年份中间两个字没有了，只能看出是1xx6. 显然，我们要根据这一页日历推算出年份。</p>\n<p>看图片的右下角，有两个小的月份日历，应该是对应着前一个和后一个月。所以，右边的应该是二月的。放大后，我们会发现，这个二月比较特殊，<font color=\"red\">有29天</font>，所以这应该是闰年。</p>\n<p>但是，这样筛选出来的依然不对。我们还有信息没用到，那就是日期(date)和星期几(weekday)的对应关系。也就是说，<font color=\"red\">1月27是星期二</font>这个信息我们可以用。至此，可以得到这个日期了。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 闰年</span></span><br><span class=\"line\">years = [y <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">1006</span>, <span class=\"number\">1997</span>) <span class=\"keyword\">if</span> str(y)[<span class=\"number\">-1</span>] == <span class=\"string\">'6'</span> <span class=\"keyword\">and</span> y % <span class=\"number\">4</span> == <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># date和weekday对应</span></span><br><span class=\"line\">year_c = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> years:</span><br><span class=\"line\">    d = datetime.date(y, <span class=\"number\">1</span>, <span class=\"number\">27</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d.weekday() == <span class=\"number\">1</span>:</span><br><span class=\"line\">        year_c.append(y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># second youngest</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> year_c[<span class=\"number\">-2</span>]</span><br></pre></td></tr></table></figure>\n<p>现在，我们得到1756年01月27日这个日子，这一天发生了什么事呢？Google “1756 01 27”，发现搜索结果指向同一个人——Mozart.<br><a href=\"http://www.pythonchallenge.com/pc/return/mozart.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/mozart.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/uzi.html\" target=\"_blank\" rel=\"noopener\">第15关</a></p>\n<p>图片是一月份的日历，Page Source里提示</p>\n<blockquote>\n<p>he ain’t the youngest, he is the second<br>todo: buy flowers for tomorrow</p>\n</blockquote>\n<p>首先， todo是要为明天买花，所以明天（01-27）应该是某个纪念日。然后，他不是最年轻的，只是第二。怎么判断这个他是第二年轻呢，我们需要找到哪一年。可惜，年份中间两个字没有了，只能看出是1xx6. 显然，我们要根据这一页日历推算出年份。</p>\n<p>看图片的右下角，有两个小的月份日历，应该是对应着前一个和后一个月。所以，右边的应该是二月的。放大后，我们会发现，这个二月比较特殊，<font color=\"red\">有29天</font>，所以这应该是闰年。</p>\n<p>但是，这样筛选出来的依然不对。我们还有信息没用到，那就是日期(date)和星期几(weekday)的对应关系。也就是说，<font color=\"red\">1月27是星期二</font>这个信息我们可以用。至此，可以得到这个日期了。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 闰年</span></span><br><span class=\"line\">years = [y <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(<span class=\"number\">1006</span>, <span class=\"number\">1997</span>) <span class=\"keyword\">if</span> str(y)[<span class=\"number\">-1</span>] == <span class=\"string\">'6'</span> <span class=\"keyword\">and</span> y % <span class=\"number\">4</span> == <span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># date和weekday对应</span></span><br><span class=\"line\">year_c = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> years:</span><br><span class=\"line\">    d = datetime.date(y, <span class=\"number\">1</span>, <span class=\"number\">27</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d.weekday() == <span class=\"number\">1</span>:</span><br><span class=\"line\">        year_c.append(y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># second youngest</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> year_c[<span class=\"number\">-2</span>]</span><br></pre></td></tr></table></figure>\n<p>现在，我们得到1756年01月27日这个日子，这一天发生了什么事呢？Google “1756 01 27”，发现搜索结果指向同一个人——Mozart.<br><a href=\"http://www.pythonchallenge.com/pc/return/mozart.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/mozart.html</a></p>"},{"title":"Python Challenge (Level 13)","date":"2015-01-27T07:46:29.000Z","_content":"\n[第13关](http://www.pythonchallenge.com/pc/return/disproportional.html)\n\n图片下面提示**phone that evil**, 似乎要找到evil的number. 点击图片上电话的5键，会跳到一个新网页。但好像有些问题。\n> This XML file does not appear to have any style information associated with it. The document tree is shown below.\n\n没什么头绪，网上大神提示说要用到[xmlrpclib](https://docs.python.org/2/library/xmlrpclib.html). 根据维基百科上的介绍，XML-RPC是一个远程过程调用的分布式计算协议，通过XML将调用函数封装，并使用HTTP协议作为传送机制。\n\n没用过这些东西，不太了解，只能慢慢尝试。在xmlrpclib的官方手册页面上，我们可以看到ServerProxy Objects的system属性下面有**listMethods**这个方法\n\n> ServerProxy.system.listMethods()\n\tThis method returns a list of strings, one for each (non-system) method supported by the XML-RPC server.\n\n<!-- more -->\n\n可以尝试一下\n``` Python\nimport xmlrpclib\n\nproxy = xmlrpclib.ServerProxy(\"http://www.pythonchallenge.com/pc/phonebook.php\")\nproxy.system.listMethods()\n\n#输出如下\n'''\n['phone',\n 'system.listMethods',\n 'system.methodHelp',\n 'system.methodSignature',\n 'system.multicall',\n 'system.getCapabilities']\n'''\n```\n\nBingo, 里面有个**phone**方法。我们在看看它是干什么的\n``` Python\nIn [4]: proxy.system.methodHelp('phone')\nOut[4]: 'Returns the phone of a person'\n```\n\n看来，这个**phone**就是我们要调用的方法，但问题在于参数person是谁呢？ 原来，这还要用到上一关的遗留问题。上一个[evil3.jpg页面](http://www.pythonchallenge.com/pc/return/evil3.jpg)提示no more evils. 但事实上， [evil4.jpg](http://www.pythonchallenge.com/pc/return/evil4.jpg)里还有一些内容，但是我尝试过用chrome和firefox都显示不出图片。网上有人说用IE可以打开，我没试过。我的解决方法是利用chrome审查元素(Inspect element)的功能，再点击图片连接，会有以下提示信息\n> Bert is evil! go back!\n\n总算找到你了， Bert\n``` Bash\nIn [5]: proxy.phone(\"Bert\")\nOut[5]: '555-ITALY'\n```\n输入555-ITALY，还是不对。其实只用<font color=\"red\">ITALY</font>就可以了，不明白555-作用何在。 http://www.pythonchallenge.com/pc/return/italy.html\n","source":"_posts/pc13.md","raw":"title: Python Challenge (Level 13)\ndate: 2015-01-27 15:46:29\ntags: [Python]\n---\n\n[第13关](http://www.pythonchallenge.com/pc/return/disproportional.html)\n\n图片下面提示**phone that evil**, 似乎要找到evil的number. 点击图片上电话的5键，会跳到一个新网页。但好像有些问题。\n> This XML file does not appear to have any style information associated with it. The document tree is shown below.\n\n没什么头绪，网上大神提示说要用到[xmlrpclib](https://docs.python.org/2/library/xmlrpclib.html). 根据维基百科上的介绍，XML-RPC是一个远程过程调用的分布式计算协议，通过XML将调用函数封装，并使用HTTP协议作为传送机制。\n\n没用过这些东西，不太了解，只能慢慢尝试。在xmlrpclib的官方手册页面上，我们可以看到ServerProxy Objects的system属性下面有**listMethods**这个方法\n\n> ServerProxy.system.listMethods()\n\tThis method returns a list of strings, one for each (non-system) method supported by the XML-RPC server.\n\n<!-- more -->\n\n可以尝试一下\n``` Python\nimport xmlrpclib\n\nproxy = xmlrpclib.ServerProxy(\"http://www.pythonchallenge.com/pc/phonebook.php\")\nproxy.system.listMethods()\n\n#输出如下\n'''\n['phone',\n 'system.listMethods',\n 'system.methodHelp',\n 'system.methodSignature',\n 'system.multicall',\n 'system.getCapabilities']\n'''\n```\n\nBingo, 里面有个**phone**方法。我们在看看它是干什么的\n``` Python\nIn [4]: proxy.system.methodHelp('phone')\nOut[4]: 'Returns the phone of a person'\n```\n\n看来，这个**phone**就是我们要调用的方法，但问题在于参数person是谁呢？ 原来，这还要用到上一关的遗留问题。上一个[evil3.jpg页面](http://www.pythonchallenge.com/pc/return/evil3.jpg)提示no more evils. 但事实上， [evil4.jpg](http://www.pythonchallenge.com/pc/return/evil4.jpg)里还有一些内容，但是我尝试过用chrome和firefox都显示不出图片。网上有人说用IE可以打开，我没试过。我的解决方法是利用chrome审查元素(Inspect element)的功能，再点击图片连接，会有以下提示信息\n> Bert is evil! go back!\n\n总算找到你了， Bert\n``` Bash\nIn [5]: proxy.phone(\"Bert\")\nOut[5]: '555-ITALY'\n```\n输入555-ITALY，还是不对。其实只用<font color=\"red\">ITALY</font>就可以了，不明白555-作用何在。 http://www.pythonchallenge.com/pc/return/italy.html\n","slug":"pc13","published":1,"updated":"2018-06-10T17:05:07.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs82000iytk09vcd0erm","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/disproportional.html\" target=\"_blank\" rel=\"noopener\">第13关</a></p>\n<p>图片下面提示<strong>phone that evil</strong>, 似乎要找到evil的number. 点击图片上电话的5键，会跳到一个新网页。但好像有些问题。</p>\n<blockquote>\n<p>This XML file does not appear to have any style information associated with it. The document tree is shown below.</p>\n</blockquote>\n<p>没什么头绪，网上大神提示说要用到<a href=\"https://docs.python.org/2/library/xmlrpclib.html\" target=\"_blank\" rel=\"noopener\">xmlrpclib</a>. 根据维基百科上的介绍，XML-RPC是一个远程过程调用的分布式计算协议，通过XML将调用函数封装，并使用HTTP协议作为传送机制。</p>\n<p>没用过这些东西，不太了解，只能慢慢尝试。在xmlrpclib的官方手册页面上，我们可以看到ServerProxy Objects的system属性下面有<strong>listMethods</strong>这个方法</p>\n<blockquote>\n<p>ServerProxy.system.listMethods()<br>    This method returns a list of strings, one for each (non-system) method supported by the XML-RPC server.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>可以尝试一下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xmlrpclib</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = xmlrpclib.ServerProxy(<span class=\"string\">\"http://www.pythonchallenge.com/pc/phonebook.php\"</span>)</span><br><span class=\"line\">proxy.system.listMethods()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出如下</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">['phone',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.listMethods',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.methodHelp',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.methodSignature',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.multicall',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.getCapabilities']</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>Bingo, 里面有个<strong>phone</strong>方法。我们在看看它是干什么的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">4</span>]: proxy.system.methodHelp(<span class=\"string\">'phone'</span>)</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: <span class=\"string\">'Returns the phone of a person'</span></span><br></pre></td></tr></table></figure></p>\n<p>看来，这个<strong>phone</strong>就是我们要调用的方法，但问题在于参数person是谁呢？ 原来，这还要用到上一关的遗留问题。上一个<a href=\"http://www.pythonchallenge.com/pc/return/evil3.jpg\" target=\"_blank\" rel=\"noopener\">evil3.jpg页面</a>提示no more evils. 但事实上， <a href=\"http://www.pythonchallenge.com/pc/return/evil4.jpg\" target=\"_blank\" rel=\"noopener\">evil4.jpg</a>里还有一些内容，但是我尝试过用chrome和firefox都显示不出图片。网上有人说用IE可以打开，我没试过。我的解决方法是利用chrome审查元素(Inspect element)的功能，再点击图片连接，会有以下提示信息</p>\n<blockquote>\n<p>Bert is evil! go back!</p>\n</blockquote>\n<p>总算找到你了， Bert<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [5]: proxy.phone(<span class=\"string\">\"Bert\"</span>)</span><br><span class=\"line\">Out[5]: <span class=\"string\">'555-ITALY'</span></span><br></pre></td></tr></table></figure></p>\n<p>输入555-ITALY，还是不对。其实只用<font color=\"red\">ITALY</font>就可以了，不明白555-作用何在。 <a href=\"http://www.pythonchallenge.com/pc/return/italy.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/italy.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/disproportional.html\" target=\"_blank\" rel=\"noopener\">第13关</a></p>\n<p>图片下面提示<strong>phone that evil</strong>, 似乎要找到evil的number. 点击图片上电话的5键，会跳到一个新网页。但好像有些问题。</p>\n<blockquote>\n<p>This XML file does not appear to have any style information associated with it. The document tree is shown below.</p>\n</blockquote>\n<p>没什么头绪，网上大神提示说要用到<a href=\"https://docs.python.org/2/library/xmlrpclib.html\" target=\"_blank\" rel=\"noopener\">xmlrpclib</a>. 根据维基百科上的介绍，XML-RPC是一个远程过程调用的分布式计算协议，通过XML将调用函数封装，并使用HTTP协议作为传送机制。</p>\n<p>没用过这些东西，不太了解，只能慢慢尝试。在xmlrpclib的官方手册页面上，我们可以看到ServerProxy Objects的system属性下面有<strong>listMethods</strong>这个方法</p>\n<blockquote>\n<p>ServerProxy.system.listMethods()<br>    This method returns a list of strings, one for each (non-system) method supported by the XML-RPC server.</p>\n</blockquote>","more":"<p>可以尝试一下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xmlrpclib</span><br><span class=\"line\"></span><br><span class=\"line\">proxy = xmlrpclib.ServerProxy(<span class=\"string\">\"http://www.pythonchallenge.com/pc/phonebook.php\"</span>)</span><br><span class=\"line\">proxy.system.listMethods()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出如下</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">['phone',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.listMethods',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.methodHelp',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.methodSignature',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.multicall',</span></span><br><span class=\"line\"><span class=\"string\"> 'system.getCapabilities']</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>Bingo, 里面有个<strong>phone</strong>方法。我们在看看它是干什么的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">4</span>]: proxy.system.methodHelp(<span class=\"string\">'phone'</span>)</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: <span class=\"string\">'Returns the phone of a person'</span></span><br></pre></td></tr></table></figure></p>\n<p>看来，这个<strong>phone</strong>就是我们要调用的方法，但问题在于参数person是谁呢？ 原来，这还要用到上一关的遗留问题。上一个<a href=\"http://www.pythonchallenge.com/pc/return/evil3.jpg\" target=\"_blank\" rel=\"noopener\">evil3.jpg页面</a>提示no more evils. 但事实上， <a href=\"http://www.pythonchallenge.com/pc/return/evil4.jpg\" target=\"_blank\" rel=\"noopener\">evil4.jpg</a>里还有一些内容，但是我尝试过用chrome和firefox都显示不出图片。网上有人说用IE可以打开，我没试过。我的解决方法是利用chrome审查元素(Inspect element)的功能，再点击图片连接，会有以下提示信息</p>\n<blockquote>\n<p>Bert is evil! go back!</p>\n</blockquote>\n<p>总算找到你了， Bert<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [5]: proxy.phone(<span class=\"string\">\"Bert\"</span>)</span><br><span class=\"line\">Out[5]: <span class=\"string\">'555-ITALY'</span></span><br></pre></td></tr></table></figure></p>\n<p>输入555-ITALY，还是不对。其实只用<font color=\"red\">ITALY</font>就可以了，不明白555-作用何在。 <a href=\"http://www.pythonchallenge.com/pc/return/italy.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/italy.html</a></p>"},{"title":"Python Challenge (Level 16)","date":"2015-01-30T16:09:47.000Z","_content":"\n[第16关](http://www.pythonchallenge.com/pc/return/mozart.html)\n\n一张杂乱无章的图片，我们把它放大后会发现它的每一行都有一小段紫色的像素。然后网页的title是**let me get this straight**. 那我们就把每一行的紫色像素都对齐，然后该行的其余像素根据与紫色像素的相对位置进行平移。其实就是循环移位，把紫色像素对齐。这里我把紫色像素移到行首。\n\n代码用到了[Numpy](http://www.numpy.org/)，这是一个很有用的科学计算库，作为Pythoner，很有必要看一下。\n\n<!-- more -->\n\n``` Python\n# -*- coding:utf-8 -*-\n\nfrom PIL import Image\nimport numpy as np\n\nim = Image.open('mozart.gif')\nimdata = list(im.getdata())\nimdata = np.array(imdata)\nimdata = imdata.reshape((480, 640))\nimdata2 = np.zeros(imdata.shape)\n\nfor row in range(imdata.shape[0]):\n    # 紫色线段坐标\n    idx = np.where(imdata[row, :] == 195)\n    idx = idx[0][0] - 1\n    # 循环平移，将紫色段移到每一行开头\n    imdata2[row, :] = np.r_[imdata[row, idx : 640], imdata[row, 0 : idx]]\n\nimdata2.shape = (480 * 640, )\nim.putdata(imdata2)\nim.show()\n```\n\n重新排列后的图片显示出**romance**这个单词。http://www.pythonchallenge.com/pc/return/romance.html\n","source":"_posts/pc16.md","raw":"title: Python Challenge (Level 16)\ndate: 2015-01-31 00:09:47\ntags: [Python]\n---\n\n[第16关](http://www.pythonchallenge.com/pc/return/mozart.html)\n\n一张杂乱无章的图片，我们把它放大后会发现它的每一行都有一小段紫色的像素。然后网页的title是**let me get this straight**. 那我们就把每一行的紫色像素都对齐，然后该行的其余像素根据与紫色像素的相对位置进行平移。其实就是循环移位，把紫色像素对齐。这里我把紫色像素移到行首。\n\n代码用到了[Numpy](http://www.numpy.org/)，这是一个很有用的科学计算库，作为Pythoner，很有必要看一下。\n\n<!-- more -->\n\n``` Python\n# -*- coding:utf-8 -*-\n\nfrom PIL import Image\nimport numpy as np\n\nim = Image.open('mozart.gif')\nimdata = list(im.getdata())\nimdata = np.array(imdata)\nimdata = imdata.reshape((480, 640))\nimdata2 = np.zeros(imdata.shape)\n\nfor row in range(imdata.shape[0]):\n    # 紫色线段坐标\n    idx = np.where(imdata[row, :] == 195)\n    idx = idx[0][0] - 1\n    # 循环平移，将紫色段移到每一行开头\n    imdata2[row, :] = np.r_[imdata[row, idx : 640], imdata[row, 0 : idx]]\n\nimdata2.shape = (480 * 640, )\nim.putdata(imdata2)\nim.show()\n```\n\n重新排列后的图片显示出**romance**这个单词。http://www.pythonchallenge.com/pc/return/romance.html\n","slug":"pc16","published":1,"updated":"2018-06-10T17:05:07.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs84000kytk036baxrvg","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/mozart.html\" target=\"_blank\" rel=\"noopener\">第16关</a></p>\n<p>一张杂乱无章的图片，我们把它放大后会发现它的每一行都有一小段紫色的像素。然后网页的title是<strong>let me get this straight</strong>. 那我们就把每一行的紫色像素都对齐，然后该行的其余像素根据与紫色像素的相对位置进行平移。其实就是循环移位，把紫色像素对齐。这里我把紫色像素移到行首。</p>\n<p>代码用到了<a href=\"http://www.numpy.org/\" target=\"_blank\" rel=\"noopener\">Numpy</a>，这是一个很有用的科学计算库，作为Pythoner，很有必要看一下。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'mozart.gif'</span>)</span><br><span class=\"line\">imdata = list(im.getdata())</span><br><span class=\"line\">imdata = np.array(imdata)</span><br><span class=\"line\">imdata = imdata.reshape((<span class=\"number\">480</span>, <span class=\"number\">640</span>))</span><br><span class=\"line\">imdata2 = np.zeros(imdata.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(imdata.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"comment\"># 紫色线段坐标</span></span><br><span class=\"line\">    idx = np.where(imdata[row, :] == <span class=\"number\">195</span>)</span><br><span class=\"line\">    idx = idx[<span class=\"number\">0</span>][<span class=\"number\">0</span>] - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 循环平移，将紫色段移到每一行开头</span></span><br><span class=\"line\">    imdata2[row, :] = np.r_[imdata[row, idx : <span class=\"number\">640</span>], imdata[row, <span class=\"number\">0</span> : idx]]</span><br><span class=\"line\"></span><br><span class=\"line\">imdata2.shape = (<span class=\"number\">480</span> * <span class=\"number\">640</span>, )</span><br><span class=\"line\">im.putdata(imdata2)</span><br><span class=\"line\">im.show()</span><br></pre></td></tr></table></figure>\n<p>重新排列后的图片显示出<strong>romance</strong>这个单词。<a href=\"http://www.pythonchallenge.com/pc/return/romance.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/romance.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/mozart.html\" target=\"_blank\" rel=\"noopener\">第16关</a></p>\n<p>一张杂乱无章的图片，我们把它放大后会发现它的每一行都有一小段紫色的像素。然后网页的title是<strong>let me get this straight</strong>. 那我们就把每一行的紫色像素都对齐，然后该行的其余像素根据与紫色像素的相对位置进行平移。其实就是循环移位，把紫色像素对齐。这里我把紫色像素移到行首。</p>\n<p>代码用到了<a href=\"http://www.numpy.org/\" target=\"_blank\" rel=\"noopener\">Numpy</a>，这是一个很有用的科学计算库，作为Pythoner，很有必要看一下。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'mozart.gif'</span>)</span><br><span class=\"line\">imdata = list(im.getdata())</span><br><span class=\"line\">imdata = np.array(imdata)</span><br><span class=\"line\">imdata = imdata.reshape((<span class=\"number\">480</span>, <span class=\"number\">640</span>))</span><br><span class=\"line\">imdata2 = np.zeros(imdata.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(imdata.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"comment\"># 紫色线段坐标</span></span><br><span class=\"line\">    idx = np.where(imdata[row, :] == <span class=\"number\">195</span>)</span><br><span class=\"line\">    idx = idx[<span class=\"number\">0</span>][<span class=\"number\">0</span>] - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 循环平移，将紫色段移到每一行开头</span></span><br><span class=\"line\">    imdata2[row, :] = np.r_[imdata[row, idx : <span class=\"number\">640</span>], imdata[row, <span class=\"number\">0</span> : idx]]</span><br><span class=\"line\"></span><br><span class=\"line\">imdata2.shape = (<span class=\"number\">480</span> * <span class=\"number\">640</span>, )</span><br><span class=\"line\">im.putdata(imdata2)</span><br><span class=\"line\">im.show()</span><br></pre></td></tr></table></figure>\n<p>重新排列后的图片显示出<strong>romance</strong>这个单词。<a href=\"http://www.pythonchallenge.com/pc/return/romance.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/romance.html</a></p>"},{"title":"Python Challenge (Level 17)","date":"2015-01-31T14:41:44.000Z","_content":"\n[第17关](http://www.pythonchallenge.com/pc/return/romance.html)\n\n这一关颇为复杂，所以我不打算写太多探索的过程（其实也没怎么探索，基本是看网上答案的），简略解释一下过程。\n\n先把可能用到的库给出来，后面的代码就不再重复了。\n``` Python\nfrom urllib2 import Request, build_opener, HTTPCookieProcessor, HTTPHandler\nimport urllib\nimport cookielib\nimport re\nimport bz2\nimport xmlrpclib\n```\n\n<!-- more -->\n大图是一些cookies，左下角的小图其实就是[第4关](http://kwangka.github.io/2015/01/18/PC-Part1/)的图。所以，我们要查看一下cookie\n``` Python\ncj = cookielib.CookieJar()\nopener = build_opener(HTTPCookieProcessor(cj), HTTPHandler)\nf = opener.open(\"http://www.pythonchallenge.com/pc/def/linkedlist.php\")\nhtml = f.read()\nfor cookie in cj:\n    print cookie\n```\n\n得到以下信息\n\n> you+should+have+followed+busynothing\n\n所以，是要像第4关那样，不断获取下一个页面，不过要将**nothing**改为**busynothing**，同时还要保存期间得到的cookie\n``` Python\npat = re.compile('and the next busynothing is (\\d+)')\nurl_template = r'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing={0}'\nnext_num = '12345'\ncookies = []\nwhile True:\n    f = opener.open(url_template.format(next_num))\n    html = f.read()\n    for cookie in cj:\n        cookies.append(cookie)\n    matchRes = pat.findall(html)\n    if matchRes:\n        next_num = matchRes[0]\n        print next_num\n    else:\n        break\n```\n得到的cookie里面，组合起来是'BZh91...'这样一串数据，用到bz2进行decompression，与[第8关](http://kwangka.github.io/2015/01/22/pc8/)类似\n``` Python\nvalues = [x.value for x in cookies]\nmsg = urllib.unquote_plus(\"\".join(values))\nprint bz2.decompress(msg)\n```\n\n得到以下信息\n\n> is it the 26th already? call his father and inform him that \"the flowers are on their way\". he'll understand.\n\n\"26th\"，\"flowers\"，这些信息都与[Mozart](http://kwangka.github.io/2015/01/29/pc15/)那一关有关联。Mozart的父亲是**Leopold Mozart**. 打电话，又要用到[第13关](http://kwangka.github.io/2015/01/27/pc13/)的phonebook。\n\n``` Python\nproxy = xmlrpclib.ServerProxy(\"http://www.pythonchallenge.com/pc/phonebook.php\")\nprint proxy.phone(\"Leopold\")\n```\n得到\n> 555-VIOLIN\n\n这还没完，直接输入violin还不能过关，还要用到cookie\n``` Python\nlist(cj)[0].value = 'the+flowers+are+on+their+way'\nprint opener.open('http://www.pythonchallenge.com/pc/stuff/violin.php').read()\n```\n终于得到了通关信息——balloons\n\n> oh well, don't you dare to forget the balloons.\n\nhttp://www.pythonchallenge.com/pc/return/balloons.html\n\n","source":"_posts/pc17.md","raw":"title: Python Challenge (Level 17)\ndate: 2015-01-31 22:41:44\ntags: [Python]\n---\n\n[第17关](http://www.pythonchallenge.com/pc/return/romance.html)\n\n这一关颇为复杂，所以我不打算写太多探索的过程（其实也没怎么探索，基本是看网上答案的），简略解释一下过程。\n\n先把可能用到的库给出来，后面的代码就不再重复了。\n``` Python\nfrom urllib2 import Request, build_opener, HTTPCookieProcessor, HTTPHandler\nimport urllib\nimport cookielib\nimport re\nimport bz2\nimport xmlrpclib\n```\n\n<!-- more -->\n大图是一些cookies，左下角的小图其实就是[第4关](http://kwangka.github.io/2015/01/18/PC-Part1/)的图。所以，我们要查看一下cookie\n``` Python\ncj = cookielib.CookieJar()\nopener = build_opener(HTTPCookieProcessor(cj), HTTPHandler)\nf = opener.open(\"http://www.pythonchallenge.com/pc/def/linkedlist.php\")\nhtml = f.read()\nfor cookie in cj:\n    print cookie\n```\n\n得到以下信息\n\n> you+should+have+followed+busynothing\n\n所以，是要像第4关那样，不断获取下一个页面，不过要将**nothing**改为**busynothing**，同时还要保存期间得到的cookie\n``` Python\npat = re.compile('and the next busynothing is (\\d+)')\nurl_template = r'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing={0}'\nnext_num = '12345'\ncookies = []\nwhile True:\n    f = opener.open(url_template.format(next_num))\n    html = f.read()\n    for cookie in cj:\n        cookies.append(cookie)\n    matchRes = pat.findall(html)\n    if matchRes:\n        next_num = matchRes[0]\n        print next_num\n    else:\n        break\n```\n得到的cookie里面，组合起来是'BZh91...'这样一串数据，用到bz2进行decompression，与[第8关](http://kwangka.github.io/2015/01/22/pc8/)类似\n``` Python\nvalues = [x.value for x in cookies]\nmsg = urllib.unquote_plus(\"\".join(values))\nprint bz2.decompress(msg)\n```\n\n得到以下信息\n\n> is it the 26th already? call his father and inform him that \"the flowers are on their way\". he'll understand.\n\n\"26th\"，\"flowers\"，这些信息都与[Mozart](http://kwangka.github.io/2015/01/29/pc15/)那一关有关联。Mozart的父亲是**Leopold Mozart**. 打电话，又要用到[第13关](http://kwangka.github.io/2015/01/27/pc13/)的phonebook。\n\n``` Python\nproxy = xmlrpclib.ServerProxy(\"http://www.pythonchallenge.com/pc/phonebook.php\")\nprint proxy.phone(\"Leopold\")\n```\n得到\n> 555-VIOLIN\n\n这还没完，直接输入violin还不能过关，还要用到cookie\n``` Python\nlist(cj)[0].value = 'the+flowers+are+on+their+way'\nprint opener.open('http://www.pythonchallenge.com/pc/stuff/violin.php').read()\n```\n终于得到了通关信息——balloons\n\n> oh well, don't you dare to forget the balloons.\n\nhttp://www.pythonchallenge.com/pc/return/balloons.html\n\n","slug":"pc17","published":1,"updated":"2018-06-10T17:05:07.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs87000mytk0zax2ggom","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/romance.html\" target=\"_blank\" rel=\"noopener\">第17关</a></p>\n<p>这一关颇为复杂，所以我不打算写太多探索的过程（其实也没怎么探索，基本是看网上答案的），简略解释一下过程。</p>\n<p>先把可能用到的库给出来，后面的代码就不再重复了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> urllib2 <span class=\"keyword\">import</span> Request, build_opener, HTTPCookieProcessor, HTTPHandler</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> cookielib</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> bz2</span><br><span class=\"line\"><span class=\"keyword\">import</span> xmlrpclib</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>大图是一些cookies，左下角的小图其实就是<a href=\"http://kwangka.github.io/2015/01/18/PC-Part1/\" target=\"_blank\" rel=\"noopener\">第4关</a>的图。所以，我们要查看一下cookie<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cj = cookielib.CookieJar()</span><br><span class=\"line\">opener = build_opener(HTTPCookieProcessor(cj), HTTPHandler)</span><br><span class=\"line\">f = opener.open(<span class=\"string\">\"http://www.pythonchallenge.com/pc/def/linkedlist.php\"</span>)</span><br><span class=\"line\">html = f.read()</span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cj:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> cookie</span><br></pre></td></tr></table></figure></p>\n<p>得到以下信息</p>\n<blockquote>\n<p>you+should+have+followed+busynothing</p>\n</blockquote>\n<p>所以，是要像第4关那样，不断获取下一个页面，不过要将<strong>nothing</strong>改为<strong>busynothing</strong>，同时还要保存期间得到的cookie<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pat = re.compile(<span class=\"string\">'and the next busynothing is (\\d+)'</span>)</span><br><span class=\"line\">url_template = <span class=\"string\">r'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=&#123;0&#125;'</span></span><br><span class=\"line\">next_num = <span class=\"string\">'12345'</span></span><br><span class=\"line\">cookies = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    f = opener.open(url_template.format(next_num))</span><br><span class=\"line\">    html = f.read()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cj:</span><br><span class=\"line\">        cookies.append(cookie)</span><br><span class=\"line\">    matchRes = pat.findall(html)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> matchRes:</span><br><span class=\"line\">        next_num = matchRes[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">print</span> next_num</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure></p>\n<p>得到的cookie里面，组合起来是’BZh91…’这样一串数据，用到bz2进行decompression，与<a href=\"http://kwangka.github.io/2015/01/22/pc8/\" target=\"_blank\" rel=\"noopener\">第8关</a>类似<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values = [x.value <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cookies]</span><br><span class=\"line\">msg = urllib.unquote_plus(<span class=\"string\">\"\"</span>.join(values))</span><br><span class=\"line\"><span class=\"keyword\">print</span> bz2.decompress(msg)</span><br></pre></td></tr></table></figure></p>\n<p>得到以下信息</p>\n<blockquote>\n<p>is it the 26th already? call his father and inform him that “the flowers are on their way”. he’ll understand.</p>\n</blockquote>\n<p>“26th”，”flowers”，这些信息都与<a href=\"http://kwangka.github.io/2015/01/29/pc15/\" target=\"_blank\" rel=\"noopener\">Mozart</a>那一关有关联。Mozart的父亲是<strong>Leopold Mozart</strong>. 打电话，又要用到<a href=\"http://kwangka.github.io/2015/01/27/pc13/\" target=\"_blank\" rel=\"noopener\">第13关</a>的phonebook。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy = xmlrpclib.ServerProxy(<span class=\"string\">\"http://www.pythonchallenge.com/pc/phonebook.php\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> proxy.phone(<span class=\"string\">\"Leopold\"</span>)</span><br></pre></td></tr></table></figure>\n<p>得到</p>\n<blockquote>\n<p>555-VIOLIN</p>\n</blockquote>\n<p>这还没完，直接输入violin还不能过关，还要用到cookie<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list(cj)[<span class=\"number\">0</span>].value = <span class=\"string\">'the+flowers+are+on+their+way'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> opener.open(<span class=\"string\">'http://www.pythonchallenge.com/pc/stuff/violin.php'</span>).read()</span><br></pre></td></tr></table></figure></p>\n<p>终于得到了通关信息——balloons</p>\n<blockquote>\n<p>oh well, don’t you dare to forget the balloons.</p>\n</blockquote>\n<p><a href=\"http://www.pythonchallenge.com/pc/return/balloons.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/balloons.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/romance.html\" target=\"_blank\" rel=\"noopener\">第17关</a></p>\n<p>这一关颇为复杂，所以我不打算写太多探索的过程（其实也没怎么探索，基本是看网上答案的），简略解释一下过程。</p>\n<p>先把可能用到的库给出来，后面的代码就不再重复了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> urllib2 <span class=\"keyword\">import</span> Request, build_opener, HTTPCookieProcessor, HTTPHandler</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> cookielib</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> bz2</span><br><span class=\"line\"><span class=\"keyword\">import</span> xmlrpclib</span><br></pre></td></tr></table></figure></p>","more":"<p>大图是一些cookies，左下角的小图其实就是<a href=\"http://kwangka.github.io/2015/01/18/PC-Part1/\" target=\"_blank\" rel=\"noopener\">第4关</a>的图。所以，我们要查看一下cookie<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cj = cookielib.CookieJar()</span><br><span class=\"line\">opener = build_opener(HTTPCookieProcessor(cj), HTTPHandler)</span><br><span class=\"line\">f = opener.open(<span class=\"string\">\"http://www.pythonchallenge.com/pc/def/linkedlist.php\"</span>)</span><br><span class=\"line\">html = f.read()</span><br><span class=\"line\"><span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cj:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> cookie</span><br></pre></td></tr></table></figure></p>\n<p>得到以下信息</p>\n<blockquote>\n<p>you+should+have+followed+busynothing</p>\n</blockquote>\n<p>所以，是要像第4关那样，不断获取下一个页面，不过要将<strong>nothing</strong>改为<strong>busynothing</strong>，同时还要保存期间得到的cookie<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pat = re.compile(<span class=\"string\">'and the next busynothing is (\\d+)'</span>)</span><br><span class=\"line\">url_template = <span class=\"string\">r'http://www.pythonchallenge.com/pc/def/linkedlist.php?busynothing=&#123;0&#125;'</span></span><br><span class=\"line\">next_num = <span class=\"string\">'12345'</span></span><br><span class=\"line\">cookies = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    f = opener.open(url_template.format(next_num))</span><br><span class=\"line\">    html = f.read()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> cookie <span class=\"keyword\">in</span> cj:</span><br><span class=\"line\">        cookies.append(cookie)</span><br><span class=\"line\">    matchRes = pat.findall(html)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> matchRes:</span><br><span class=\"line\">        next_num = matchRes[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">print</span> next_num</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure></p>\n<p>得到的cookie里面，组合起来是’BZh91…’这样一串数据，用到bz2进行decompression，与<a href=\"http://kwangka.github.io/2015/01/22/pc8/\" target=\"_blank\" rel=\"noopener\">第8关</a>类似<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values = [x.value <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cookies]</span><br><span class=\"line\">msg = urllib.unquote_plus(<span class=\"string\">\"\"</span>.join(values))</span><br><span class=\"line\"><span class=\"keyword\">print</span> bz2.decompress(msg)</span><br></pre></td></tr></table></figure></p>\n<p>得到以下信息</p>\n<blockquote>\n<p>is it the 26th already? call his father and inform him that “the flowers are on their way”. he’ll understand.</p>\n</blockquote>\n<p>“26th”，”flowers”，这些信息都与<a href=\"http://kwangka.github.io/2015/01/29/pc15/\" target=\"_blank\" rel=\"noopener\">Mozart</a>那一关有关联。Mozart的父亲是<strong>Leopold Mozart</strong>. 打电话，又要用到<a href=\"http://kwangka.github.io/2015/01/27/pc13/\" target=\"_blank\" rel=\"noopener\">第13关</a>的phonebook。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy = xmlrpclib.ServerProxy(<span class=\"string\">\"http://www.pythonchallenge.com/pc/phonebook.php\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> proxy.phone(<span class=\"string\">\"Leopold\"</span>)</span><br></pre></td></tr></table></figure>\n<p>得到</p>\n<blockquote>\n<p>555-VIOLIN</p>\n</blockquote>\n<p>这还没完，直接输入violin还不能过关，还要用到cookie<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list(cj)[<span class=\"number\">0</span>].value = <span class=\"string\">'the+flowers+are+on+their+way'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> opener.open(<span class=\"string\">'http://www.pythonchallenge.com/pc/stuff/violin.php'</span>).read()</span><br></pre></td></tr></table></figure></p>\n<p>终于得到了通关信息——balloons</p>\n<blockquote>\n<p>oh well, don’t you dare to forget the balloons.</p>\n</blockquote>\n<p><a href=\"http://www.pythonchallenge.com/pc/return/balloons.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/balloons.html</a></p>"},{"title":"Python Challenge (Level 18)","date":"2015-02-01T10:12:43.000Z","_content":"\n[第18关](http://www.pythonchallenge.com/pc/return/balloons.html)\n\n看到两张很相似的图片，再根据提示**can you tell the difference**，很容易就会想到两张图相减，看看结果是什么。很遗憾，得到的结果还是一张类似的图片，没有通关信息。\n\nPage Source里面有提示\n\n> it is more obvious that what you might think\n\n这里that应该是than!?，也就是说，我们似乎想得太复杂了。左右两张图图像内容是一样的，只是亮度不同。亮度->brightness。URl换为brightness，但是好像没什么变化。View Page Source你就会发现提示信息变了\n\n> maybe consider deltas.gz\n\n<!-- more -->\n\n把deltas.gz下载下来，解压后发现里面是一些16进制的信息，分为左右两栏。记得前面提到这一关是要<font color=\"red\">tell the difference</font>，对于这两栏的信息，我们要用到[difflib](https://docs.python.org/2/library/difflib.html?highlight=difflib#differ-objects)来比较它们。然后，把得到的信息进行decode，输出到文件。最后发现，得到的文件是三张图片，里面包含通关信息。\n``` Python\n# -*- coding:utf-8 -*-\n\nimport gzip\nimport codecs\nimport difflib\nimport re\n\nf = gzip.open('deltas.gz', 'rb')\ncontents = f.read()\nf.close()\n\nlines = contents.strip().split('\\n')\nstr1 = []\nstr2 = []\nfor line in lines:\n    # 左右两列分开\n    str1.append(line[0 : 53])\n    str2.append(line[56 : 109])\n\nstr_diff = list(difflib.Differ().compare(str1, str2))\n# 得到的结果有三种，分别以'-','+', ' '开头，具体含义可以看difflib官方手册\npng_datas = [''.join(filter(lambda l : l[0] == c, str_diff)) for c in ' -+']\n\nfor i in range(len(png_datas)):\n    png_data = re.sub(r'[^0-9a-fA-F]', '', png_datas[i])\n    png_data = codecs.getdecoder('hex')(png_data)[0]\n    with open(('png%d' % i), 'wb') as handle:\n        handle.write(png_data)\n```\n\n得到的三张图片里包含的信息为<font color=\"purple\">../hex/bin.html</font>、<font color=\"red\">butter</font>、<font color=\"green\">fly</font>.\n下一关地址 http://www.pythonchallenge.com/pc/hex/bin.html  用户名：butter，密码：fly\n","source":"_posts/pc18.md","raw":"title: Python Challenge (Level 18)\ndate: 2015-02-01 18:12:43\ntags: [Python]\n---\n\n[第18关](http://www.pythonchallenge.com/pc/return/balloons.html)\n\n看到两张很相似的图片，再根据提示**can you tell the difference**，很容易就会想到两张图相减，看看结果是什么。很遗憾，得到的结果还是一张类似的图片，没有通关信息。\n\nPage Source里面有提示\n\n> it is more obvious that what you might think\n\n这里that应该是than!?，也就是说，我们似乎想得太复杂了。左右两张图图像内容是一样的，只是亮度不同。亮度->brightness。URl换为brightness，但是好像没什么变化。View Page Source你就会发现提示信息变了\n\n> maybe consider deltas.gz\n\n<!-- more -->\n\n把deltas.gz下载下来，解压后发现里面是一些16进制的信息，分为左右两栏。记得前面提到这一关是要<font color=\"red\">tell the difference</font>，对于这两栏的信息，我们要用到[difflib](https://docs.python.org/2/library/difflib.html?highlight=difflib#differ-objects)来比较它们。然后，把得到的信息进行decode，输出到文件。最后发现，得到的文件是三张图片，里面包含通关信息。\n``` Python\n# -*- coding:utf-8 -*-\n\nimport gzip\nimport codecs\nimport difflib\nimport re\n\nf = gzip.open('deltas.gz', 'rb')\ncontents = f.read()\nf.close()\n\nlines = contents.strip().split('\\n')\nstr1 = []\nstr2 = []\nfor line in lines:\n    # 左右两列分开\n    str1.append(line[0 : 53])\n    str2.append(line[56 : 109])\n\nstr_diff = list(difflib.Differ().compare(str1, str2))\n# 得到的结果有三种，分别以'-','+', ' '开头，具体含义可以看difflib官方手册\npng_datas = [''.join(filter(lambda l : l[0] == c, str_diff)) for c in ' -+']\n\nfor i in range(len(png_datas)):\n    png_data = re.sub(r'[^0-9a-fA-F]', '', png_datas[i])\n    png_data = codecs.getdecoder('hex')(png_data)[0]\n    with open(('png%d' % i), 'wb') as handle:\n        handle.write(png_data)\n```\n\n得到的三张图片里包含的信息为<font color=\"purple\">../hex/bin.html</font>、<font color=\"red\">butter</font>、<font color=\"green\">fly</font>.\n下一关地址 http://www.pythonchallenge.com/pc/hex/bin.html  用户名：butter，密码：fly\n","slug":"pc18","published":1,"updated":"2018-06-10T17:05:07.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8a000oytk0igsi3i01","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/balloons.html\" target=\"_blank\" rel=\"noopener\">第18关</a></p>\n<p>看到两张很相似的图片，再根据提示<strong>can you tell the difference</strong>，很容易就会想到两张图相减，看看结果是什么。很遗憾，得到的结果还是一张类似的图片，没有通关信息。</p>\n<p>Page Source里面有提示</p>\n<blockquote>\n<p>it is more obvious that what you might think</p>\n</blockquote>\n<p>这里that应该是than!?，也就是说，我们似乎想得太复杂了。左右两张图图像内容是一样的，只是亮度不同。亮度-&gt;brightness。URl换为brightness，但是好像没什么变化。View Page Source你就会发现提示信息变了</p>\n<blockquote>\n<p>maybe consider deltas.gz</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>把deltas.gz下载下来，解压后发现里面是一些16进制的信息，分为左右两栏。记得前面提到这一关是要<font color=\"red\">tell the difference</font>，对于这两栏的信息，我们要用到<a href=\"https://docs.python.org/2/library/difflib.html?highlight=difflib#differ-objects\" target=\"_blank\" rel=\"noopener\">difflib</a>来比较它们。然后，把得到的信息进行decode，输出到文件。最后发现，得到的文件是三张图片，里面包含通关信息。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"keyword\">import</span> difflib</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">f = gzip.open(<span class=\"string\">'deltas.gz'</span>, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">contents = f.read()</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">lines = contents.strip().split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">str1 = []</span><br><span class=\"line\">str2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    <span class=\"comment\"># 左右两列分开</span></span><br><span class=\"line\">    str1.append(line[<span class=\"number\">0</span> : <span class=\"number\">53</span>])</span><br><span class=\"line\">    str2.append(line[<span class=\"number\">56</span> : <span class=\"number\">109</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">str_diff = list(difflib.Differ().compare(str1, str2))</span><br><span class=\"line\"><span class=\"comment\"># 得到的结果有三种，分别以'-','+', ' '开头，具体含义可以看difflib官方手册</span></span><br><span class=\"line\">png_datas = [<span class=\"string\">''</span>.join(filter(<span class=\"keyword\">lambda</span> l : l[<span class=\"number\">0</span>] == c, str_diff)) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> <span class=\"string\">' -+'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(png_datas)):</span><br><span class=\"line\">    png_data = re.sub(<span class=\"string\">r'[^0-9a-fA-F]'</span>, <span class=\"string\">''</span>, png_datas[i])</span><br><span class=\"line\">    png_data = codecs.getdecoder(<span class=\"string\">'hex'</span>)(png_data)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open((<span class=\"string\">'png%d'</span> % i), <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> handle:</span><br><span class=\"line\">        handle.write(png_data)</span><br></pre></td></tr></table></figure></p>\n<p>得到的三张图片里包含的信息为<font color=\"purple\">../hex/bin.html</font>、<font color=\"red\">butter</font>、<font color=\"green\">fly</font>.<br>下一关地址 <a href=\"http://www.pythonchallenge.com/pc/hex/bin.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/bin.html</a>  用户名：butter，密码：fly</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/balloons.html\" target=\"_blank\" rel=\"noopener\">第18关</a></p>\n<p>看到两张很相似的图片，再根据提示<strong>can you tell the difference</strong>，很容易就会想到两张图相减，看看结果是什么。很遗憾，得到的结果还是一张类似的图片，没有通关信息。</p>\n<p>Page Source里面有提示</p>\n<blockquote>\n<p>it is more obvious that what you might think</p>\n</blockquote>\n<p>这里that应该是than!?，也就是说，我们似乎想得太复杂了。左右两张图图像内容是一样的，只是亮度不同。亮度-&gt;brightness。URl换为brightness，但是好像没什么变化。View Page Source你就会发现提示信息变了</p>\n<blockquote>\n<p>maybe consider deltas.gz</p>\n</blockquote>","more":"<p>把deltas.gz下载下来，解压后发现里面是一些16进制的信息，分为左右两栏。记得前面提到这一关是要<font color=\"red\">tell the difference</font>，对于这两栏的信息，我们要用到<a href=\"https://docs.python.org/2/library/difflib.html?highlight=difflib#differ-objects\" target=\"_blank\" rel=\"noopener\">difflib</a>来比较它们。然后，把得到的信息进行decode，输出到文件。最后发现，得到的文件是三张图片，里面包含通关信息。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"keyword\">import</span> difflib</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">f = gzip.open(<span class=\"string\">'deltas.gz'</span>, <span class=\"string\">'rb'</span>)</span><br><span class=\"line\">contents = f.read()</span><br><span class=\"line\">f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">lines = contents.strip().split(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">str1 = []</span><br><span class=\"line\">str2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">    <span class=\"comment\"># 左右两列分开</span></span><br><span class=\"line\">    str1.append(line[<span class=\"number\">0</span> : <span class=\"number\">53</span>])</span><br><span class=\"line\">    str2.append(line[<span class=\"number\">56</span> : <span class=\"number\">109</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">str_diff = list(difflib.Differ().compare(str1, str2))</span><br><span class=\"line\"><span class=\"comment\"># 得到的结果有三种，分别以'-','+', ' '开头，具体含义可以看difflib官方手册</span></span><br><span class=\"line\">png_datas = [<span class=\"string\">''</span>.join(filter(<span class=\"keyword\">lambda</span> l : l[<span class=\"number\">0</span>] == c, str_diff)) <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> <span class=\"string\">' -+'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(png_datas)):</span><br><span class=\"line\">    png_data = re.sub(<span class=\"string\">r'[^0-9a-fA-F]'</span>, <span class=\"string\">''</span>, png_datas[i])</span><br><span class=\"line\">    png_data = codecs.getdecoder(<span class=\"string\">'hex'</span>)(png_data)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open((<span class=\"string\">'png%d'</span> % i), <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> handle:</span><br><span class=\"line\">        handle.write(png_data)</span><br></pre></td></tr></table></figure></p>\n<p>得到的三张图片里包含的信息为<font color=\"purple\">../hex/bin.html</font>、<font color=\"red\">butter</font>、<font color=\"green\">fly</font>.<br>下一关地址 <a href=\"http://www.pythonchallenge.com/pc/hex/bin.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/bin.html</a>  用户名：butter，密码：fly</p>"},{"title":"Python Challenge (Level 19)","date":"2015-02-02T05:51:08.000Z","_content":"\n[第19关](http://www.pythonchallenge.com/pc/hex/bin.html)\n\n一张印度的地图，好像没什么有用的信息。Page Source里面有一大段字符串。再根据里面的提示\n\n> Content-type: audio/x-wav; name=\"indian.wav\"\n> Content-transfer-encoding: base64\n\n不难想出是要把这一段字符串decode，得到wav音频，然后听听里面有什么信息。这里用到[base64](https://docs.python.org/2/library/base64.html?highlight=base64)\n\n``` Python\nmsg = \"\"  #这里补上Page Source里的字符串\nopen('indian.wav', 'wb').write(base64.decodestring(msg))\n```\n\n得到[**sorry**](http://www.pythonchallenge.com/pc/hex/sorry.html) 但是不对，只看到这个\n\n> \\- \"what are you apologizing for?\"\n\n<!-- more -->\n\n根据Page Source里的提示<font color=\"red\">**\"Maybe my computer is out of order.\"**</font>，再结合那张印度地图，海洋和陆地的颜色标反了。因此，我们尝试一下把音频里面的每一帧颠倒一下，看看输出是什么。这里要用到[wave](https://docs.python.org/2/library/wave.html?highlight=wave)模块。\n\n``` Python\n# -*- coding:utf-8 -*-\nindia = wave.open('indian.wav', 'r')\nindia_frames = india.readframes(india.getnframes())\nindia_swap = wave.open('indian_swap.wav', 'w')\nindia_swap.setnchannels(1)\nindia_swap.setframerate(india.getframerate())\nindia_swap.setsampwidth(india.getsampwidth())\n\nindia_swap_frames = []\nfor i in range(0, len(india_frames), 2):\n    # 每一帧前后颠倒\n    india_swap_frames.append(india_frames[i+1])\n    india_swap_frames.append(india_frames[i])\n\nindia_swap_frames = ''.join(india_swap_frames)\nindia_swap.writeframes(india_swap_frames)\nindia_swap.close()\nindia.close()\n```\n\n不难听出**You are a idiot**. 改成idiot后，跳到的网页上有一句话\n\n> \"Now you should apologize...\"\n\n跟前面的\"what are you apologizing for?\"呼应了哈！！ 下一关 http://www.pythonchallenge.com/pc/hex/idiot2.html\n","source":"_posts/pc19.md","raw":"title: Python Challenge (Level 19)\ndate: 2015-02-02 13:51:08\ntags: [Python]\n---\n\n[第19关](http://www.pythonchallenge.com/pc/hex/bin.html)\n\n一张印度的地图，好像没什么有用的信息。Page Source里面有一大段字符串。再根据里面的提示\n\n> Content-type: audio/x-wav; name=\"indian.wav\"\n> Content-transfer-encoding: base64\n\n不难想出是要把这一段字符串decode，得到wav音频，然后听听里面有什么信息。这里用到[base64](https://docs.python.org/2/library/base64.html?highlight=base64)\n\n``` Python\nmsg = \"\"  #这里补上Page Source里的字符串\nopen('indian.wav', 'wb').write(base64.decodestring(msg))\n```\n\n得到[**sorry**](http://www.pythonchallenge.com/pc/hex/sorry.html) 但是不对，只看到这个\n\n> \\- \"what are you apologizing for?\"\n\n<!-- more -->\n\n根据Page Source里的提示<font color=\"red\">**\"Maybe my computer is out of order.\"**</font>，再结合那张印度地图，海洋和陆地的颜色标反了。因此，我们尝试一下把音频里面的每一帧颠倒一下，看看输出是什么。这里要用到[wave](https://docs.python.org/2/library/wave.html?highlight=wave)模块。\n\n``` Python\n# -*- coding:utf-8 -*-\nindia = wave.open('indian.wav', 'r')\nindia_frames = india.readframes(india.getnframes())\nindia_swap = wave.open('indian_swap.wav', 'w')\nindia_swap.setnchannels(1)\nindia_swap.setframerate(india.getframerate())\nindia_swap.setsampwidth(india.getsampwidth())\n\nindia_swap_frames = []\nfor i in range(0, len(india_frames), 2):\n    # 每一帧前后颠倒\n    india_swap_frames.append(india_frames[i+1])\n    india_swap_frames.append(india_frames[i])\n\nindia_swap_frames = ''.join(india_swap_frames)\nindia_swap.writeframes(india_swap_frames)\nindia_swap.close()\nindia.close()\n```\n\n不难听出**You are a idiot**. 改成idiot后，跳到的网页上有一句话\n\n> \"Now you should apologize...\"\n\n跟前面的\"what are you apologizing for?\"呼应了哈！！ 下一关 http://www.pythonchallenge.com/pc/hex/idiot2.html\n","slug":"pc19","published":1,"updated":"2018-06-10T17:05:07.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8d000qytk0mykf24qy","content":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/bin.html\" target=\"_blank\" rel=\"noopener\">第19关</a></p>\n<p>一张印度的地图，好像没什么有用的信息。Page Source里面有一大段字符串。再根据里面的提示</p>\n<blockquote>\n<p>Content-type: audio/x-wav; name=”indian.wav”<br>Content-transfer-encoding: base64</p>\n</blockquote>\n<p>不难想出是要把这一段字符串decode，得到wav音频，然后听听里面有什么信息。这里用到<a href=\"https://docs.python.org/2/library/base64.html?highlight=base64\" target=\"_blank\" rel=\"noopener\">base64</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg = <span class=\"string\">\"\"</span>  <span class=\"comment\">#这里补上Page Source里的字符串</span></span><br><span class=\"line\">open(<span class=\"string\">'indian.wav'</span>, <span class=\"string\">'wb'</span>).write(base64.decodestring(msg))</span><br></pre></td></tr></table></figure>\n<p>得到<a href=\"http://www.pythonchallenge.com/pc/hex/sorry.html\" target=\"_blank\" rel=\"noopener\"><strong>sorry</strong></a> 但是不对，只看到这个</p>\n<blockquote>\n<p>- “what are you apologizing for?”</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>根据Page Source里的提示<font color=\"red\"><strong>“Maybe my computer is out of order.”</strong></font>，再结合那张印度地图，海洋和陆地的颜色标反了。因此，我们尝试一下把音频里面的每一帧颠倒一下，看看输出是什么。这里要用到<a href=\"https://docs.python.org/2/library/wave.html?highlight=wave\" target=\"_blank\" rel=\"noopener\">wave</a>模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\">india = wave.open(<span class=\"string\">'indian.wav'</span>, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">india_frames = india.readframes(india.getnframes())</span><br><span class=\"line\">india_swap = wave.open(<span class=\"string\">'indian_swap.wav'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">india_swap.setnchannels(<span class=\"number\">1</span>)</span><br><span class=\"line\">india_swap.setframerate(india.getframerate())</span><br><span class=\"line\">india_swap.setsampwidth(india.getsampwidth())</span><br><span class=\"line\"></span><br><span class=\"line\">india_swap_frames = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(india_frames), <span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 每一帧前后颠倒</span></span><br><span class=\"line\">    india_swap_frames.append(india_frames[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    india_swap_frames.append(india_frames[i])</span><br><span class=\"line\"></span><br><span class=\"line\">india_swap_frames = <span class=\"string\">''</span>.join(india_swap_frames)</span><br><span class=\"line\">india_swap.writeframes(india_swap_frames)</span><br><span class=\"line\">india_swap.close()</span><br><span class=\"line\">india.close()</span><br></pre></td></tr></table></figure>\n<p>不难听出<strong>You are a idiot</strong>. 改成idiot后，跳到的网页上有一句话</p>\n<blockquote>\n<p>“Now you should apologize…”</p>\n</blockquote>\n<p>跟前面的”what are you apologizing for?”呼应了哈！！ 下一关 <a href=\"http://www.pythonchallenge.com/pc/hex/idiot2.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/idiot2.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/bin.html\" target=\"_blank\" rel=\"noopener\">第19关</a></p>\n<p>一张印度的地图，好像没什么有用的信息。Page Source里面有一大段字符串。再根据里面的提示</p>\n<blockquote>\n<p>Content-type: audio/x-wav; name=”indian.wav”<br>Content-transfer-encoding: base64</p>\n</blockquote>\n<p>不难想出是要把这一段字符串decode，得到wav音频，然后听听里面有什么信息。这里用到<a href=\"https://docs.python.org/2/library/base64.html?highlight=base64\" target=\"_blank\" rel=\"noopener\">base64</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg = <span class=\"string\">\"\"</span>  <span class=\"comment\">#这里补上Page Source里的字符串</span></span><br><span class=\"line\">open(<span class=\"string\">'indian.wav'</span>, <span class=\"string\">'wb'</span>).write(base64.decodestring(msg))</span><br></pre></td></tr></table></figure>\n<p>得到<a href=\"http://www.pythonchallenge.com/pc/hex/sorry.html\" target=\"_blank\" rel=\"noopener\"><strong>sorry</strong></a> 但是不对，只看到这个</p>\n<blockquote>\n<p>- “what are you apologizing for?”</p>\n</blockquote>","more":"<p>根据Page Source里的提示<font color=\"red\"><strong>“Maybe my computer is out of order.”</strong></font>，再结合那张印度地图，海洋和陆地的颜色标反了。因此，我们尝试一下把音频里面的每一帧颠倒一下，看看输出是什么。这里要用到<a href=\"https://docs.python.org/2/library/wave.html?highlight=wave\" target=\"_blank\" rel=\"noopener\">wave</a>模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\">india = wave.open(<span class=\"string\">'indian.wav'</span>, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">india_frames = india.readframes(india.getnframes())</span><br><span class=\"line\">india_swap = wave.open(<span class=\"string\">'indian_swap.wav'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">india_swap.setnchannels(<span class=\"number\">1</span>)</span><br><span class=\"line\">india_swap.setframerate(india.getframerate())</span><br><span class=\"line\">india_swap.setsampwidth(india.getsampwidth())</span><br><span class=\"line\"></span><br><span class=\"line\">india_swap_frames = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(india_frames), <span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 每一帧前后颠倒</span></span><br><span class=\"line\">    india_swap_frames.append(india_frames[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    india_swap_frames.append(india_frames[i])</span><br><span class=\"line\"></span><br><span class=\"line\">india_swap_frames = <span class=\"string\">''</span>.join(india_swap_frames)</span><br><span class=\"line\">india_swap.writeframes(india_swap_frames)</span><br><span class=\"line\">india_swap.close()</span><br><span class=\"line\">india.close()</span><br></pre></td></tr></table></figure>\n<p>不难听出<strong>You are a idiot</strong>. 改成idiot后，跳到的网页上有一句话</p>\n<blockquote>\n<p>“Now you should apologize…”</p>\n</blockquote>\n<p>跟前面的”what are you apologizing for?”呼应了哈！！ 下一关 <a href=\"http://www.pythonchallenge.com/pc/hex/idiot2.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/idiot2.html</a></p>"},{"title":"Python Challenge (Level 20)","date":"2015-02-03T09:17:36.000Z","_content":"\n[第20关](http://www.pythonchallenge.com/pc/hex/idiot2.html)\n\n这一关要用到[httplib](https://docs.python.org/2/library/httplib.html).很遗憾我对于HTTP以及httplib的了解几乎为零，只能找下网上的解题方法。这个外国人写的[解题过程](http://garethrees.org/2007/05/07/python-challenge/)非常详细。\n\n看了解题过程后，总结一下主要有三个步骤：\n- 从小到大修改请求的headers中的content-range,得到提示：**invader**\n- 从大到小修改请求的headers中的content-range,得到密码<font color=\"red\">redavni</font>(即invader的reverse)。同时，还得到一个zip文件\n- 用密码将zip文件解压，即可通关\n\n好吧，也许看完上面三个步骤你还是不知所云。下面一步一步详细解释一下。\n\n<!-- more -->\n用到的库\n``` Python\nimport httplib\nimport base64\nfrom pprint import pprint\nimport re\n```\n### 第一步\n首先，定义一个get_range方法。给定range，返回相应的response.\n``` Python\ndef get_range(page, base, limit):\n    conn = httplib.HTTPConnection('www.pythonchallenge.com')\n    headers = {'Authorization': 'Basic ' + base64.b64encode('butter:fly'),\n               'Range': 'bytes=%s-%s' % (base, limit)}\n    conn.request('GET', page, '', headers)\n    return conn.getresponse()\n```\n\n利用这个方法，我们可以看看headers.注意看content-range.\n``` Bash\nIn [81]: r.getheaders()\nOut[81]: \n[('x-powered-by', 'PHP/5.3.3-7+squeeze17'),\n ('transfer-encoding', 'chunked'),\n ('server', 'lighttpd/1.4.28'),\n ('content-range', 'bytes 0-30202/2123456789'),\n ('date', 'Tue, 03 Feb 2015 09:37:11 GMT'),\n ('content-type', 'image/jpeg')]\n\nIn [82]: r = get_range('/pc/hex/unreal.jpg', 30203, '')\n\nIn [83]: r.getheaders()\nOut[83]: \n[('x-powered-by', 'PHP/5.3.3-7+squeeze17'),\n ('content-transfer-encoding', 'binary'),\n ('server', 'lighttpd/1.4.28'),\n ('transfer-encoding', 'chunked'),\n ('content-range', 'bytes 30203-30236/2123456789'),\n ('date', 'Tue, 03 Feb 2015 09:37:33 GMT'),\n ('content-type', 'application/octet-stream')]\n\nIn [84]: r.read()\nOut[84]: \"Why don't you respect my privacy?\\n\"\n```\n可以看到，用不同的range,得到的response的内容不一样，同时headers里面有下一个range. 这有点像[第4关](http://kwangka.github.io/2015/01/18/PC-Part1/)，不断获取下一个网址。不断获取下一个range，再不断moveForward.\n``` Python\ndef next_range(base, bases, results):\n    r = get_range('/pc/hex/unreal.jpg', base, 2123456789)\n    bases.append(base)\n    results.append(r.read())\n    try:\n        m = re.match('bytes %d-([0-9]+)/2123456789' % base, r.getheader('content-range'))\n        return int(m.group(1)) + 1\n    except:\n        return \"ERR\"\n\ndef moveForward():\n    bases = []\n    results = []\n    b = 30203\n    while True:\n        b = next_range(b, bases, results)\n        if b == \"ERR\":\n            break\n    pprint(results)\n    pprint(bases)\n```\n我们会得到这些信息：\n> [\"Why don't you respect my privacy?\\n\",\n 'we can go on in this way for really long time.\\n',\n 'stop this!\\n',\n 'invader! invader!\\n',\n 'ok, invader. you are inside now. \\n',\n '']\n\n好了，这里**invader**出现了好几次，我们要留意一下。\n\n### 第二步\nrange超过30347后，再增大也没有信息了。我们改成2123456789\n``` Python\nIn [85]: r = get_range('/pc/hex/unreal.jpg', 2123456789, '')\n\nIn [86]: r.read()\nOut[86]: 'esrever ni emankcin wen ruoy si drowssap eht\\n'\n```\n这串信息reverse就得到: <font color=\"red\">the password is your new nickname in reverse</font>\n\n到这里就得到了一个密码，redavni（\"invader\" reverse)\n\n### 第三步\nrange为2123456789时，返回的请求里面content-range也有变化。与第一步类似，我们往小改，看看结果是什么。\n``` Python\nIn [87]: r.getheaders() \nOut[87]:\n[('x-powered-by', 'PHP/5.3.3-7+squeeze17'),\n ('content-transfer-encoding', 'binary'),\n ('server', 'lighttpd/1.4.28'),\n ('transfer-encoding', 'chunked'),\n ('content-range', 'bytes 2123456744-2123456788/2123456789'),\n ('date', 'Tue, 03 Feb 2015 09:46:02 GMT'),\n ('content-type', 'application/octet-stream')]\n\nIn [88]: r = get_range('/pc/hex/unreal.jpg', 2123456743, '')\n\nIn [89]: r.getheaders()\nOut[89]: \n[('x-powered-by', 'PHP/5.3.3-7+squeeze17'),\n ('content-transfer-encoding', 'binary'),\n ('server', 'lighttpd/1.4.28'),\n ('transfer-encoding', 'chunked'),\n ('content-range', 'bytes 2123456712-2123456743/2123456789'),\n ('date', 'Tue, 03 Feb 2015 09:52:03 GMT'),\n ('content-type', 'application/octet-stream')]\n\nIn [90]: r.read()\nOut[90]: 'and it is hiding at 1152983631.\\n'\n```\n这里提示1152983631里面有东西，我们print出来看看是什么\n``` Python\nIn [91]: r = get_range('/pc/hex/unreal.jpg', 1152983631, '')\n\nIn [92]: data = r.read()\n\nIn [93]: len(data)\nOut[93]: 239733\n\nIn [94]: data[:10]\nOut[94]: 'PK\\x03\\x04\\x14\\x00\\t\\x00\\x08\\x00'\n\nIn [95]: \n```\n网上的大神表示根据前面四个bytes就看出它是一个zip file. 后续工作就是data写到zip文件，然后用前面的密码解压文件。这就进入第21关了。21关就是要搞zip文件里的东西，并不是一个网址。\n\nPutting it All Together\n\n``` Python\n# -×- coding:utf-8 -*-\n__author__ = 'chen'\nimport httplib\nimport base64\nfrom pprint import pprint\nimport re\n\ndef get_range(page, base, limit):\n    conn = httplib.HTTPConnection('www.pythonchallenge.com')\n    headers = {'Authorization': 'Basic ' + base64.b64encode('butter:fly'),\n               'Range': 'bytes=%s-%s' % (base, limit)}\n    conn.request('GET', page, '', headers)\n    return conn.getresponse()\n\ndef next_range(base, bases, results):\n    r = get_range('/pc/hex/unreal.jpg', base, 2123456789)\n    bases.append(base)\n    results.append(r.read())\n    try:\n        m = re.match('bytes %d-([0-9]+)/2123456789' % base, r.getheader('content-range'))\n        return int(m.group(1)) + 1\n    except:\n        return \"ERR\"\n\ndef moveForward():\n    bases = []\n    results = []\n    b = 30203\n    while True:\n        b = next_range(b, bases, results)\n        if b == \"ERR\":\n            break\n    pprint(results)\n    pprint(bases)\n\ndef solve():\n    moveForward()\n    # 得到重要信息:invader,记住,you're invader\n\n    r = get_range('/pc/hex/unreal.jpg', 2123456789, '')\n    msg = r.read()\n    print msg\n    print msg[::-1]\n    print 'invader'[::-1]\n    pprint(r.getheaders())\n    # 提示密码是你的new nickname反转过来,所以就是invader ---> redavni\n\n    print get_range('/pc/hex/unreal.jpg', 2123456743, '').read()\n    data = get_range('/pc/hex/unreal.jpg', 1152983631, '').read()\n    open('unreal.zip', 'wb').write(data)\n    # 类似第一步,但是这次从后向前找,GET两次就得到一些数据.\n    # 将其保存为zip文件,用上一步得到的密码解压\n\nif __name__ == \"__main__\" : solve()\n```\n","source":"_posts/pc20.md","raw":"title: Python Challenge (Level 20)\ndate: 2015-02-03 17:17:36\ntags: [Python]\n---\n\n[第20关](http://www.pythonchallenge.com/pc/hex/idiot2.html)\n\n这一关要用到[httplib](https://docs.python.org/2/library/httplib.html).很遗憾我对于HTTP以及httplib的了解几乎为零，只能找下网上的解题方法。这个外国人写的[解题过程](http://garethrees.org/2007/05/07/python-challenge/)非常详细。\n\n看了解题过程后，总结一下主要有三个步骤：\n- 从小到大修改请求的headers中的content-range,得到提示：**invader**\n- 从大到小修改请求的headers中的content-range,得到密码<font color=\"red\">redavni</font>(即invader的reverse)。同时，还得到一个zip文件\n- 用密码将zip文件解压，即可通关\n\n好吧，也许看完上面三个步骤你还是不知所云。下面一步一步详细解释一下。\n\n<!-- more -->\n用到的库\n``` Python\nimport httplib\nimport base64\nfrom pprint import pprint\nimport re\n```\n### 第一步\n首先，定义一个get_range方法。给定range，返回相应的response.\n``` Python\ndef get_range(page, base, limit):\n    conn = httplib.HTTPConnection('www.pythonchallenge.com')\n    headers = {'Authorization': 'Basic ' + base64.b64encode('butter:fly'),\n               'Range': 'bytes=%s-%s' % (base, limit)}\n    conn.request('GET', page, '', headers)\n    return conn.getresponse()\n```\n\n利用这个方法，我们可以看看headers.注意看content-range.\n``` Bash\nIn [81]: r.getheaders()\nOut[81]: \n[('x-powered-by', 'PHP/5.3.3-7+squeeze17'),\n ('transfer-encoding', 'chunked'),\n ('server', 'lighttpd/1.4.28'),\n ('content-range', 'bytes 0-30202/2123456789'),\n ('date', 'Tue, 03 Feb 2015 09:37:11 GMT'),\n ('content-type', 'image/jpeg')]\n\nIn [82]: r = get_range('/pc/hex/unreal.jpg', 30203, '')\n\nIn [83]: r.getheaders()\nOut[83]: \n[('x-powered-by', 'PHP/5.3.3-7+squeeze17'),\n ('content-transfer-encoding', 'binary'),\n ('server', 'lighttpd/1.4.28'),\n ('transfer-encoding', 'chunked'),\n ('content-range', 'bytes 30203-30236/2123456789'),\n ('date', 'Tue, 03 Feb 2015 09:37:33 GMT'),\n ('content-type', 'application/octet-stream')]\n\nIn [84]: r.read()\nOut[84]: \"Why don't you respect my privacy?\\n\"\n```\n可以看到，用不同的range,得到的response的内容不一样，同时headers里面有下一个range. 这有点像[第4关](http://kwangka.github.io/2015/01/18/PC-Part1/)，不断获取下一个网址。不断获取下一个range，再不断moveForward.\n``` Python\ndef next_range(base, bases, results):\n    r = get_range('/pc/hex/unreal.jpg', base, 2123456789)\n    bases.append(base)\n    results.append(r.read())\n    try:\n        m = re.match('bytes %d-([0-9]+)/2123456789' % base, r.getheader('content-range'))\n        return int(m.group(1)) + 1\n    except:\n        return \"ERR\"\n\ndef moveForward():\n    bases = []\n    results = []\n    b = 30203\n    while True:\n        b = next_range(b, bases, results)\n        if b == \"ERR\":\n            break\n    pprint(results)\n    pprint(bases)\n```\n我们会得到这些信息：\n> [\"Why don't you respect my privacy?\\n\",\n 'we can go on in this way for really long time.\\n',\n 'stop this!\\n',\n 'invader! invader!\\n',\n 'ok, invader. you are inside now. \\n',\n '']\n\n好了，这里**invader**出现了好几次，我们要留意一下。\n\n### 第二步\nrange超过30347后，再增大也没有信息了。我们改成2123456789\n``` Python\nIn [85]: r = get_range('/pc/hex/unreal.jpg', 2123456789, '')\n\nIn [86]: r.read()\nOut[86]: 'esrever ni emankcin wen ruoy si drowssap eht\\n'\n```\n这串信息reverse就得到: <font color=\"red\">the password is your new nickname in reverse</font>\n\n到这里就得到了一个密码，redavni（\"invader\" reverse)\n\n### 第三步\nrange为2123456789时，返回的请求里面content-range也有变化。与第一步类似，我们往小改，看看结果是什么。\n``` Python\nIn [87]: r.getheaders() \nOut[87]:\n[('x-powered-by', 'PHP/5.3.3-7+squeeze17'),\n ('content-transfer-encoding', 'binary'),\n ('server', 'lighttpd/1.4.28'),\n ('transfer-encoding', 'chunked'),\n ('content-range', 'bytes 2123456744-2123456788/2123456789'),\n ('date', 'Tue, 03 Feb 2015 09:46:02 GMT'),\n ('content-type', 'application/octet-stream')]\n\nIn [88]: r = get_range('/pc/hex/unreal.jpg', 2123456743, '')\n\nIn [89]: r.getheaders()\nOut[89]: \n[('x-powered-by', 'PHP/5.3.3-7+squeeze17'),\n ('content-transfer-encoding', 'binary'),\n ('server', 'lighttpd/1.4.28'),\n ('transfer-encoding', 'chunked'),\n ('content-range', 'bytes 2123456712-2123456743/2123456789'),\n ('date', 'Tue, 03 Feb 2015 09:52:03 GMT'),\n ('content-type', 'application/octet-stream')]\n\nIn [90]: r.read()\nOut[90]: 'and it is hiding at 1152983631.\\n'\n```\n这里提示1152983631里面有东西，我们print出来看看是什么\n``` Python\nIn [91]: r = get_range('/pc/hex/unreal.jpg', 1152983631, '')\n\nIn [92]: data = r.read()\n\nIn [93]: len(data)\nOut[93]: 239733\n\nIn [94]: data[:10]\nOut[94]: 'PK\\x03\\x04\\x14\\x00\\t\\x00\\x08\\x00'\n\nIn [95]: \n```\n网上的大神表示根据前面四个bytes就看出它是一个zip file. 后续工作就是data写到zip文件，然后用前面的密码解压文件。这就进入第21关了。21关就是要搞zip文件里的东西，并不是一个网址。\n\nPutting it All Together\n\n``` Python\n# -×- coding:utf-8 -*-\n__author__ = 'chen'\nimport httplib\nimport base64\nfrom pprint import pprint\nimport re\n\ndef get_range(page, base, limit):\n    conn = httplib.HTTPConnection('www.pythonchallenge.com')\n    headers = {'Authorization': 'Basic ' + base64.b64encode('butter:fly'),\n               'Range': 'bytes=%s-%s' % (base, limit)}\n    conn.request('GET', page, '', headers)\n    return conn.getresponse()\n\ndef next_range(base, bases, results):\n    r = get_range('/pc/hex/unreal.jpg', base, 2123456789)\n    bases.append(base)\n    results.append(r.read())\n    try:\n        m = re.match('bytes %d-([0-9]+)/2123456789' % base, r.getheader('content-range'))\n        return int(m.group(1)) + 1\n    except:\n        return \"ERR\"\n\ndef moveForward():\n    bases = []\n    results = []\n    b = 30203\n    while True:\n        b = next_range(b, bases, results)\n        if b == \"ERR\":\n            break\n    pprint(results)\n    pprint(bases)\n\ndef solve():\n    moveForward()\n    # 得到重要信息:invader,记住,you're invader\n\n    r = get_range('/pc/hex/unreal.jpg', 2123456789, '')\n    msg = r.read()\n    print msg\n    print msg[::-1]\n    print 'invader'[::-1]\n    pprint(r.getheaders())\n    # 提示密码是你的new nickname反转过来,所以就是invader ---> redavni\n\n    print get_range('/pc/hex/unreal.jpg', 2123456743, '').read()\n    data = get_range('/pc/hex/unreal.jpg', 1152983631, '').read()\n    open('unreal.zip', 'wb').write(data)\n    # 类似第一步,但是这次从后向前找,GET两次就得到一些数据.\n    # 将其保存为zip文件,用上一步得到的密码解压\n\nif __name__ == \"__main__\" : solve()\n```\n","slug":"pc20","published":1,"updated":"2018-06-10T17:05:07.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8h000sytk0q9s6yn8c","content":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/idiot2.html\" target=\"_blank\" rel=\"noopener\">第20关</a></p>\n<p>这一关要用到<a href=\"https://docs.python.org/2/library/httplib.html\" target=\"_blank\" rel=\"noopener\">httplib</a>.很遗憾我对于HTTP以及httplib的了解几乎为零，只能找下网上的解题方法。这个外国人写的<a href=\"http://garethrees.org/2007/05/07/python-challenge/\" target=\"_blank\" rel=\"noopener\">解题过程</a>非常详细。</p>\n<p>看了解题过程后，总结一下主要有三个步骤：</p>\n<ul>\n<li>从小到大修改请求的headers中的content-range,得到提示：<strong>invader</strong></li>\n<li>从大到小修改请求的headers中的content-range,得到密码<font color=\"red\">redavni</font>(即invader的reverse)。同时，还得到一个zip文件</li>\n<li>用密码将zip文件解压，即可通关</li>\n</ul>\n<p>好吧，也许看完上面三个步骤你还是不知所云。下面一步一步详细解释一下。</p>\n<a id=\"more\"></a>\n<p>用到的库<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> httplib</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>首先，定义一个get_range方法。给定range，返回相应的response.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_range</span><span class=\"params\">(page, base, limit)</span>:</span></span><br><span class=\"line\">    conn = httplib.HTTPConnection(<span class=\"string\">'www.pythonchallenge.com'</span>)</span><br><span class=\"line\">    headers = &#123;<span class=\"string\">'Authorization'</span>: <span class=\"string\">'Basic '</span> + base64.b64encode(<span class=\"string\">'butter:fly'</span>),</span><br><span class=\"line\">               <span class=\"string\">'Range'</span>: <span class=\"string\">'bytes=%s-%s'</span> % (base, limit)&#125;</span><br><span class=\"line\">    conn.request(<span class=\"string\">'GET'</span>, page, <span class=\"string\">''</span>, headers)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> conn.getresponse()</span><br></pre></td></tr></table></figure></p>\n<p>利用这个方法，我们可以看看headers.注意看content-range.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [81]: r.getheaders()</span><br><span class=\"line\">Out[81]: </span><br><span class=\"line\">[(<span class=\"string\">'x-powered-by'</span>, <span class=\"string\">'PHP/5.3.3-7+squeeze17'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'transfer-encoding'</span>, <span class=\"string\">'chunked'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'server'</span>, <span class=\"string\">'lighttpd/1.4.28'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-range'</span>, <span class=\"string\">'bytes 0-30202/2123456789'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'date'</span>, <span class=\"string\">'Tue, 03 Feb 2015 09:37:11 GMT'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-type'</span>, <span class=\"string\">'image/jpeg'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [82]: r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, 30203, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: r.getheaders()</span><br><span class=\"line\">Out[83]: </span><br><span class=\"line\">[(<span class=\"string\">'x-powered-by'</span>, <span class=\"string\">'PHP/5.3.3-7+squeeze17'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-transfer-encoding'</span>, <span class=\"string\">'binary'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'server'</span>, <span class=\"string\">'lighttpd/1.4.28'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'transfer-encoding'</span>, <span class=\"string\">'chunked'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-range'</span>, <span class=\"string\">'bytes 30203-30236/2123456789'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'date'</span>, <span class=\"string\">'Tue, 03 Feb 2015 09:37:33 GMT'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/octet-stream'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: r.read()</span><br><span class=\"line\">Out[84]: <span class=\"string\">\"Why don't you respect my privacy?\\n\"</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看到，用不同的range,得到的response的内容不一样，同时headers里面有下一个range. 这有点像<a href=\"http://kwangka.github.io/2015/01/18/PC-Part1/\" target=\"_blank\" rel=\"noopener\">第4关</a>，不断获取下一个网址。不断获取下一个range，再不断moveForward.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next_range</span><span class=\"params\">(base, bases, results)</span>:</span></span><br><span class=\"line\">    r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, base, <span class=\"number\">2123456789</span>)</span><br><span class=\"line\">    bases.append(base)</span><br><span class=\"line\">    results.append(r.read())</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        m = re.match(<span class=\"string\">'bytes %d-([0-9]+)/2123456789'</span> % base, r.getheader(<span class=\"string\">'content-range'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(m.group(<span class=\"number\">1</span>)) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ERR\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">moveForward</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    bases = []</span><br><span class=\"line\">    results = []</span><br><span class=\"line\">    b = <span class=\"number\">30203</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        b = next_range(b, bases, results)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> b == <span class=\"string\">\"ERR\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    pprint(results)</span><br><span class=\"line\">    pprint(bases)</span><br></pre></td></tr></table></figure></p>\n<p>我们会得到这些信息：</p>\n<blockquote>\n<p>[“Why don’t you respect my privacy?\\n”,<br> ‘we can go on in this way for really long time.\\n’,<br> ‘stop this!\\n’,<br> ‘invader! invader!\\n’,<br> ‘ok, invader. you are inside now. \\n’,<br> ‘’]</p>\n</blockquote>\n<p>好了，这里<strong>invader</strong>出现了好几次，我们要留意一下。</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>range超过30347后，再增大也没有信息了。我们改成2123456789<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">85</span>]: r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">2123456789</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">86</span>]: r.read()</span><br><span class=\"line\">Out[<span class=\"number\">86</span>]: <span class=\"string\">'esrever ni emankcin wen ruoy si drowssap eht\\n'</span></span><br></pre></td></tr></table></figure></p>\n<p>这串信息reverse就得到: <font color=\"red\">the password is your new nickname in reverse</font></p>\n<p>到这里就得到了一个密码，redavni（”invader” reverse)</p>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>range为2123456789时，返回的请求里面content-range也有变化。与第一步类似，我们往小改，看看结果是什么。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">87</span>]: r.getheaders() </span><br><span class=\"line\">Out[<span class=\"number\">87</span>]:</span><br><span class=\"line\">[(<span class=\"string\">'x-powered-by'</span>, <span class=\"string\">'PHP/5.3.3-7+squeeze17'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-transfer-encoding'</span>, <span class=\"string\">'binary'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'server'</span>, <span class=\"string\">'lighttpd/1.4.28'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'transfer-encoding'</span>, <span class=\"string\">'chunked'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-range'</span>, <span class=\"string\">'bytes 2123456744-2123456788/2123456789'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'date'</span>, <span class=\"string\">'Tue, 03 Feb 2015 09:46:02 GMT'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/octet-stream'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">88</span>]: r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">2123456743</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">89</span>]: r.getheaders()</span><br><span class=\"line\">Out[<span class=\"number\">89</span>]: </span><br><span class=\"line\">[(<span class=\"string\">'x-powered-by'</span>, <span class=\"string\">'PHP/5.3.3-7+squeeze17'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-transfer-encoding'</span>, <span class=\"string\">'binary'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'server'</span>, <span class=\"string\">'lighttpd/1.4.28'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'transfer-encoding'</span>, <span class=\"string\">'chunked'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-range'</span>, <span class=\"string\">'bytes 2123456712-2123456743/2123456789'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'date'</span>, <span class=\"string\">'Tue, 03 Feb 2015 09:52:03 GMT'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/octet-stream'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">90</span>]: r.read()</span><br><span class=\"line\">Out[<span class=\"number\">90</span>]: <span class=\"string\">'and it is hiding at 1152983631.\\n'</span></span><br></pre></td></tr></table></figure></p>\n<p>这里提示1152983631里面有东西，我们print出来看看是什么<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">91</span>]: r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">1152983631</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">92</span>]: data = r.read()</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">93</span>]: len(data)</span><br><span class=\"line\">Out[<span class=\"number\">93</span>]: <span class=\"number\">239733</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">94</span>]: data[:<span class=\"number\">10</span>]</span><br><span class=\"line\">Out[<span class=\"number\">94</span>]: <span class=\"string\">'PK\\x03\\x04\\x14\\x00\\t\\x00\\x08\\x00'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">95</span>]:</span><br></pre></td></tr></table></figure></p>\n<p>网上的大神表示根据前面四个bytes就看出它是一个zip file. 后续工作就是data写到zip文件，然后用前面的密码解压文件。这就进入第21关了。21关就是要搞zip文件里的东西，并不是一个网址。</p>\n<p>Putting it All Together</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -×- coding:utf-8 -*-</span></span><br><span class=\"line\">__author__ = <span class=\"string\">'chen'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> httplib</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_range</span><span class=\"params\">(page, base, limit)</span>:</span></span><br><span class=\"line\">    conn = httplib.HTTPConnection(<span class=\"string\">'www.pythonchallenge.com'</span>)</span><br><span class=\"line\">    headers = &#123;<span class=\"string\">'Authorization'</span>: <span class=\"string\">'Basic '</span> + base64.b64encode(<span class=\"string\">'butter:fly'</span>),</span><br><span class=\"line\">               <span class=\"string\">'Range'</span>: <span class=\"string\">'bytes=%s-%s'</span> % (base, limit)&#125;</span><br><span class=\"line\">    conn.request(<span class=\"string\">'GET'</span>, page, <span class=\"string\">''</span>, headers)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> conn.getresponse()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next_range</span><span class=\"params\">(base, bases, results)</span>:</span></span><br><span class=\"line\">    r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, base, <span class=\"number\">2123456789</span>)</span><br><span class=\"line\">    bases.append(base)</span><br><span class=\"line\">    results.append(r.read())</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        m = re.match(<span class=\"string\">'bytes %d-([0-9]+)/2123456789'</span> % base, r.getheader(<span class=\"string\">'content-range'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(m.group(<span class=\"number\">1</span>)) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ERR\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">moveForward</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    bases = []</span><br><span class=\"line\">    results = []</span><br><span class=\"line\">    b = <span class=\"number\">30203</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        b = next_range(b, bases, results)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> b == <span class=\"string\">\"ERR\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    pprint(results)</span><br><span class=\"line\">    pprint(bases)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    moveForward()</span><br><span class=\"line\">    <span class=\"comment\"># 得到重要信息:invader,记住,you're invader</span></span><br><span class=\"line\"></span><br><span class=\"line\">    r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">2123456789</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    msg = r.read()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">    <span class=\"keyword\">print</span> msg[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'invader'</span>[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">    pprint(r.getheaders())</span><br><span class=\"line\">    <span class=\"comment\"># 提示密码是你的new nickname反转过来,所以就是invader ---&gt; redavni</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">2123456743</span>, <span class=\"string\">''</span>).read()</span><br><span class=\"line\">    data = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">1152983631</span>, <span class=\"string\">''</span>).read()</span><br><span class=\"line\">    open(<span class=\"string\">'unreal.zip'</span>, <span class=\"string\">'wb'</span>).write(data)</span><br><span class=\"line\">    <span class=\"comment\"># 类似第一步,但是这次从后向前找,GET两次就得到一些数据.</span></span><br><span class=\"line\">    <span class=\"comment\"># 将其保存为zip文件,用上一步得到的密码解压</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : solve()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/idiot2.html\" target=\"_blank\" rel=\"noopener\">第20关</a></p>\n<p>这一关要用到<a href=\"https://docs.python.org/2/library/httplib.html\" target=\"_blank\" rel=\"noopener\">httplib</a>.很遗憾我对于HTTP以及httplib的了解几乎为零，只能找下网上的解题方法。这个外国人写的<a href=\"http://garethrees.org/2007/05/07/python-challenge/\" target=\"_blank\" rel=\"noopener\">解题过程</a>非常详细。</p>\n<p>看了解题过程后，总结一下主要有三个步骤：</p>\n<ul>\n<li>从小到大修改请求的headers中的content-range,得到提示：<strong>invader</strong></li>\n<li>从大到小修改请求的headers中的content-range,得到密码<font color=\"red\">redavni</font>(即invader的reverse)。同时，还得到一个zip文件</li>\n<li>用密码将zip文件解压，即可通关</li>\n</ul>\n<p>好吧，也许看完上面三个步骤你还是不知所云。下面一步一步详细解释一下。</p>","more":"<p>用到的库<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> httplib</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h3><p>首先，定义一个get_range方法。给定range，返回相应的response.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_range</span><span class=\"params\">(page, base, limit)</span>:</span></span><br><span class=\"line\">    conn = httplib.HTTPConnection(<span class=\"string\">'www.pythonchallenge.com'</span>)</span><br><span class=\"line\">    headers = &#123;<span class=\"string\">'Authorization'</span>: <span class=\"string\">'Basic '</span> + base64.b64encode(<span class=\"string\">'butter:fly'</span>),</span><br><span class=\"line\">               <span class=\"string\">'Range'</span>: <span class=\"string\">'bytes=%s-%s'</span> % (base, limit)&#125;</span><br><span class=\"line\">    conn.request(<span class=\"string\">'GET'</span>, page, <span class=\"string\">''</span>, headers)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> conn.getresponse()</span><br></pre></td></tr></table></figure></p>\n<p>利用这个方法，我们可以看看headers.注意看content-range.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [81]: r.getheaders()</span><br><span class=\"line\">Out[81]: </span><br><span class=\"line\">[(<span class=\"string\">'x-powered-by'</span>, <span class=\"string\">'PHP/5.3.3-7+squeeze17'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'transfer-encoding'</span>, <span class=\"string\">'chunked'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'server'</span>, <span class=\"string\">'lighttpd/1.4.28'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-range'</span>, <span class=\"string\">'bytes 0-30202/2123456789'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'date'</span>, <span class=\"string\">'Tue, 03 Feb 2015 09:37:11 GMT'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-type'</span>, <span class=\"string\">'image/jpeg'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [82]: r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, 30203, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [83]: r.getheaders()</span><br><span class=\"line\">Out[83]: </span><br><span class=\"line\">[(<span class=\"string\">'x-powered-by'</span>, <span class=\"string\">'PHP/5.3.3-7+squeeze17'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-transfer-encoding'</span>, <span class=\"string\">'binary'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'server'</span>, <span class=\"string\">'lighttpd/1.4.28'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'transfer-encoding'</span>, <span class=\"string\">'chunked'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-range'</span>, <span class=\"string\">'bytes 30203-30236/2123456789'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'date'</span>, <span class=\"string\">'Tue, 03 Feb 2015 09:37:33 GMT'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/octet-stream'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [84]: r.read()</span><br><span class=\"line\">Out[84]: <span class=\"string\">\"Why don't you respect my privacy?\\n\"</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看到，用不同的range,得到的response的内容不一样，同时headers里面有下一个range. 这有点像<a href=\"http://kwangka.github.io/2015/01/18/PC-Part1/\" target=\"_blank\" rel=\"noopener\">第4关</a>，不断获取下一个网址。不断获取下一个range，再不断moveForward.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next_range</span><span class=\"params\">(base, bases, results)</span>:</span></span><br><span class=\"line\">    r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, base, <span class=\"number\">2123456789</span>)</span><br><span class=\"line\">    bases.append(base)</span><br><span class=\"line\">    results.append(r.read())</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        m = re.match(<span class=\"string\">'bytes %d-([0-9]+)/2123456789'</span> % base, r.getheader(<span class=\"string\">'content-range'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(m.group(<span class=\"number\">1</span>)) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ERR\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">moveForward</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    bases = []</span><br><span class=\"line\">    results = []</span><br><span class=\"line\">    b = <span class=\"number\">30203</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        b = next_range(b, bases, results)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> b == <span class=\"string\">\"ERR\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    pprint(results)</span><br><span class=\"line\">    pprint(bases)</span><br></pre></td></tr></table></figure></p>\n<p>我们会得到这些信息：</p>\n<blockquote>\n<p>[“Why don’t you respect my privacy?\\n”,<br> ‘we can go on in this way for really long time.\\n’,<br> ‘stop this!\\n’,<br> ‘invader! invader!\\n’,<br> ‘ok, invader. you are inside now. \\n’,<br> ‘’]</p>\n</blockquote>\n<p>好了，这里<strong>invader</strong>出现了好几次，我们要留意一下。</p>\n<h3 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h3><p>range超过30347后，再增大也没有信息了。我们改成2123456789<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">85</span>]: r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">2123456789</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">86</span>]: r.read()</span><br><span class=\"line\">Out[<span class=\"number\">86</span>]: <span class=\"string\">'esrever ni emankcin wen ruoy si drowssap eht\\n'</span></span><br></pre></td></tr></table></figure></p>\n<p>这串信息reverse就得到: <font color=\"red\">the password is your new nickname in reverse</font></p>\n<p>到这里就得到了一个密码，redavni（”invader” reverse)</p>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>range为2123456789时，返回的请求里面content-range也有变化。与第一步类似，我们往小改，看看结果是什么。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">87</span>]: r.getheaders() </span><br><span class=\"line\">Out[<span class=\"number\">87</span>]:</span><br><span class=\"line\">[(<span class=\"string\">'x-powered-by'</span>, <span class=\"string\">'PHP/5.3.3-7+squeeze17'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-transfer-encoding'</span>, <span class=\"string\">'binary'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'server'</span>, <span class=\"string\">'lighttpd/1.4.28'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'transfer-encoding'</span>, <span class=\"string\">'chunked'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-range'</span>, <span class=\"string\">'bytes 2123456744-2123456788/2123456789'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'date'</span>, <span class=\"string\">'Tue, 03 Feb 2015 09:46:02 GMT'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/octet-stream'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">88</span>]: r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">2123456743</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">89</span>]: r.getheaders()</span><br><span class=\"line\">Out[<span class=\"number\">89</span>]: </span><br><span class=\"line\">[(<span class=\"string\">'x-powered-by'</span>, <span class=\"string\">'PHP/5.3.3-7+squeeze17'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-transfer-encoding'</span>, <span class=\"string\">'binary'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'server'</span>, <span class=\"string\">'lighttpd/1.4.28'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'transfer-encoding'</span>, <span class=\"string\">'chunked'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-range'</span>, <span class=\"string\">'bytes 2123456712-2123456743/2123456789'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'date'</span>, <span class=\"string\">'Tue, 03 Feb 2015 09:52:03 GMT'</span>),</span><br><span class=\"line\"> (<span class=\"string\">'content-type'</span>, <span class=\"string\">'application/octet-stream'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">90</span>]: r.read()</span><br><span class=\"line\">Out[<span class=\"number\">90</span>]: <span class=\"string\">'and it is hiding at 1152983631.\\n'</span></span><br></pre></td></tr></table></figure></p>\n<p>这里提示1152983631里面有东西，我们print出来看看是什么<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">91</span>]: r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">1152983631</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">92</span>]: data = r.read()</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">93</span>]: len(data)</span><br><span class=\"line\">Out[<span class=\"number\">93</span>]: <span class=\"number\">239733</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">94</span>]: data[:<span class=\"number\">10</span>]</span><br><span class=\"line\">Out[<span class=\"number\">94</span>]: <span class=\"string\">'PK\\x03\\x04\\x14\\x00\\t\\x00\\x08\\x00'</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">95</span>]:</span><br></pre></td></tr></table></figure></p>\n<p>网上的大神表示根据前面四个bytes就看出它是一个zip file. 后续工作就是data写到zip文件，然后用前面的密码解压文件。这就进入第21关了。21关就是要搞zip文件里的东西，并不是一个网址。</p>\n<p>Putting it All Together</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -×- coding:utf-8 -*-</span></span><br><span class=\"line\">__author__ = <span class=\"string\">'chen'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> httplib</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_range</span><span class=\"params\">(page, base, limit)</span>:</span></span><br><span class=\"line\">    conn = httplib.HTTPConnection(<span class=\"string\">'www.pythonchallenge.com'</span>)</span><br><span class=\"line\">    headers = &#123;<span class=\"string\">'Authorization'</span>: <span class=\"string\">'Basic '</span> + base64.b64encode(<span class=\"string\">'butter:fly'</span>),</span><br><span class=\"line\">               <span class=\"string\">'Range'</span>: <span class=\"string\">'bytes=%s-%s'</span> % (base, limit)&#125;</span><br><span class=\"line\">    conn.request(<span class=\"string\">'GET'</span>, page, <span class=\"string\">''</span>, headers)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> conn.getresponse()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next_range</span><span class=\"params\">(base, bases, results)</span>:</span></span><br><span class=\"line\">    r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, base, <span class=\"number\">2123456789</span>)</span><br><span class=\"line\">    bases.append(base)</span><br><span class=\"line\">    results.append(r.read())</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        m = re.match(<span class=\"string\">'bytes %d-([0-9]+)/2123456789'</span> % base, r.getheader(<span class=\"string\">'content-range'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> int(m.group(<span class=\"number\">1</span>)) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ERR\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">moveForward</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    bases = []</span><br><span class=\"line\">    results = []</span><br><span class=\"line\">    b = <span class=\"number\">30203</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        b = next_range(b, bases, results)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> b == <span class=\"string\">\"ERR\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    pprint(results)</span><br><span class=\"line\">    pprint(bases)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    moveForward()</span><br><span class=\"line\">    <span class=\"comment\"># 得到重要信息:invader,记住,you're invader</span></span><br><span class=\"line\"></span><br><span class=\"line\">    r = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">2123456789</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">    msg = r.read()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">    <span class=\"keyword\">print</span> msg[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'invader'</span>[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">    pprint(r.getheaders())</span><br><span class=\"line\">    <span class=\"comment\"># 提示密码是你的new nickname反转过来,所以就是invader ---&gt; redavni</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">2123456743</span>, <span class=\"string\">''</span>).read()</span><br><span class=\"line\">    data = get_range(<span class=\"string\">'/pc/hex/unreal.jpg'</span>, <span class=\"number\">1152983631</span>, <span class=\"string\">''</span>).read()</span><br><span class=\"line\">    open(<span class=\"string\">'unreal.zip'</span>, <span class=\"string\">'wb'</span>).write(data)</span><br><span class=\"line\">    <span class=\"comment\"># 类似第一步,但是这次从后向前找,GET两次就得到一些数据.</span></span><br><span class=\"line\">    <span class=\"comment\"># 将其保存为zip文件,用上一步得到的密码解压</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : solve()</span><br></pre></td></tr></table></figure>"},{"title":"Python Challenge (Level 21)","date":"2015-02-04T02:20:12.000Z","_content":"\n###第21关\n\n这一关不再是给出一个网址然后解谜，而是用到上一关得到文件——package.pack以及readme.txt， readme有关于这一关的提示：\n\n> We used to play this game when we were kids\n> When I had no idea what to do, I looked backwards.\n\n这一关主要过程是对package.pack文件不断进行解压。根据上一次解压得到的结果，判断下一次解压用zlib还是bz2，以及判断得到的数据是正向的还是要look backwards.\n\n最后解压出来的结果是**sgol ruoy ta kool**, reverse一下得到<font color=\"red\">look at your logs</font>\n\n也就是说，每次解压的时候，我们要添加一些信息，形成logs. 最后，我们把这个logs打印出来，就可以得到通关信息。\n\n<!-- more -->\n``` Python\nimport bz2\nimport zlib\nfrom pprint import pprint\n\ndef uncompress(data, logs):\n    if data[ : 2] == 'x\\x9c':\n        logs.append('*')\n        return zlib.decompress(data)\n    elif data[ : 2] == 'BZ':\n        logs.append('#')\n        return bz2.BZ2Decompressor().decompress(data)\n    elif data[-2 : ] == '\\x9cx':\n        logs.append('@')\n        return zlib.decompress(data[::-1])\n    elif data[-2 : ] == 'ZB':\n        logs.append('$')\n        return bz2.BZ2Decompressor().decompress(data[::-1])\n    else:\n        raise ValueError\n\ndef solve():\n    data = open('unreal/package.pack').read()\n    logs = []\n    while True:\n        try:\n            data = uncompress(data, logs)\n        except:\n            print \"Decompress ends!\"\n            break\n    logs.pop(0)\n    print data\n    pprint(''.join(logs).replace('*', ' ').split('@'))\n\nif __name__ == \"__main__\" : solve()\n```\n\n最后得到通关信息——copper，http://www.pythonchallenge.com/pc/hex/copper.html\n``` Bash\n['     ###          ###      ########    ########    ##########  ########',\n '   #######      #######    #########   #########   #########   #########',\n '  ##     ##    ##     ##   ##      ##  ##      ##  ##          ##      ##',\n ' ##           ##       ##  ##      ##  ##      ##  ##          ##      ##',\n ' ##           ##       ##  #########   #########   ########    #########',\n ' ##           ##       ##  ########    ########    ########    ######## ',\n ' ##           ##       ##  ##          ##          ##          ##   ## ',\n '  ##     ##    ##     ##   ##          ##          ##          ##    ## ',\n '   #######      #######    ##          ##          #########   ##     ## ',\n '     ###          ###      ##          ##          ##########  ##      ##']\n```\n","source":"_posts/pc21.md","raw":"title: Python Challenge (Level 21)\ndate: 2015-02-04 10:20:12\ntags: [Python]\n---\n\n###第21关\n\n这一关不再是给出一个网址然后解谜，而是用到上一关得到文件——package.pack以及readme.txt， readme有关于这一关的提示：\n\n> We used to play this game when we were kids\n> When I had no idea what to do, I looked backwards.\n\n这一关主要过程是对package.pack文件不断进行解压。根据上一次解压得到的结果，判断下一次解压用zlib还是bz2，以及判断得到的数据是正向的还是要look backwards.\n\n最后解压出来的结果是**sgol ruoy ta kool**, reverse一下得到<font color=\"red\">look at your logs</font>\n\n也就是说，每次解压的时候，我们要添加一些信息，形成logs. 最后，我们把这个logs打印出来，就可以得到通关信息。\n\n<!-- more -->\n``` Python\nimport bz2\nimport zlib\nfrom pprint import pprint\n\ndef uncompress(data, logs):\n    if data[ : 2] == 'x\\x9c':\n        logs.append('*')\n        return zlib.decompress(data)\n    elif data[ : 2] == 'BZ':\n        logs.append('#')\n        return bz2.BZ2Decompressor().decompress(data)\n    elif data[-2 : ] == '\\x9cx':\n        logs.append('@')\n        return zlib.decompress(data[::-1])\n    elif data[-2 : ] == 'ZB':\n        logs.append('$')\n        return bz2.BZ2Decompressor().decompress(data[::-1])\n    else:\n        raise ValueError\n\ndef solve():\n    data = open('unreal/package.pack').read()\n    logs = []\n    while True:\n        try:\n            data = uncompress(data, logs)\n        except:\n            print \"Decompress ends!\"\n            break\n    logs.pop(0)\n    print data\n    pprint(''.join(logs).replace('*', ' ').split('@'))\n\nif __name__ == \"__main__\" : solve()\n```\n\n最后得到通关信息——copper，http://www.pythonchallenge.com/pc/hex/copper.html\n``` Bash\n['     ###          ###      ########    ########    ##########  ########',\n '   #######      #######    #########   #########   #########   #########',\n '  ##     ##    ##     ##   ##      ##  ##      ##  ##          ##      ##',\n ' ##           ##       ##  ##      ##  ##      ##  ##          ##      ##',\n ' ##           ##       ##  #########   #########   ########    #########',\n ' ##           ##       ##  ########    ########    ########    ######## ',\n ' ##           ##       ##  ##          ##          ##          ##   ## ',\n '  ##     ##    ##     ##   ##          ##          ##          ##    ## ',\n '   #######      #######    ##          ##          #########   ##     ## ',\n '     ###          ###      ##          ##          ##########  ##      ##']\n```\n","slug":"pc21","published":1,"updated":"2018-06-10T17:05:07.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8k000uytk0g1zq7oxq","content":"<p>###第21关</p>\n<p>这一关不再是给出一个网址然后解谜，而是用到上一关得到文件——package.pack以及readme.txt， readme有关于这一关的提示：</p>\n<blockquote>\n<p>We used to play this game when we were kids<br>When I had no idea what to do, I looked backwards.</p>\n</blockquote>\n<p>这一关主要过程是对package.pack文件不断进行解压。根据上一次解压得到的结果，判断下一次解压用zlib还是bz2，以及判断得到的数据是正向的还是要look backwards.</p>\n<p>最后解压出来的结果是<strong>sgol ruoy ta kool</strong>, reverse一下得到<font color=\"red\">look at your logs</font></p>\n<p>也就是说，每次解压的时候，我们要添加一些信息，形成logs. 最后，我们把这个logs打印出来，就可以得到通关信息。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bz2</span><br><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uncompress</span><span class=\"params\">(data, logs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> data[ : <span class=\"number\">2</span>] == <span class=\"string\">'x\\x9c'</span>:</span><br><span class=\"line\">        logs.append(<span class=\"string\">'*'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zlib.decompress(data)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> data[ : <span class=\"number\">2</span>] == <span class=\"string\">'BZ'</span>:</span><br><span class=\"line\">        logs.append(<span class=\"string\">'#'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bz2.BZ2Decompressor().decompress(data)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> data[<span class=\"number\">-2</span> : ] == <span class=\"string\">'\\x9cx'</span>:</span><br><span class=\"line\">        logs.append(<span class=\"string\">'@'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zlib.decompress(data[::<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> data[<span class=\"number\">-2</span> : ] == <span class=\"string\">'ZB'</span>:</span><br><span class=\"line\">        logs.append(<span class=\"string\">'$'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bz2.BZ2Decompressor().decompress(data[::<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data = open(<span class=\"string\">'unreal/package.pack'</span>).read()</span><br><span class=\"line\">    logs = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = uncompress(data, logs)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"Decompress ends!\"</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    logs.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> data</span><br><span class=\"line\">    pprint(<span class=\"string\">''</span>.join(logs).replace(<span class=\"string\">'*'</span>, <span class=\"string\">' '</span>).split(<span class=\"string\">'@'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : solve()</span><br></pre></td></tr></table></figure>\n<p>最后得到通关信息——copper，<a href=\"http://www.pythonchallenge.com/pc/hex/copper.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/copper.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'     ###          ###      ########    ########    ##########  ########'</span>,</span><br><span class=\"line\"> <span class=\"string\">'   #######      #######    #########   #########   #########   #########'</span>,</span><br><span class=\"line\"> <span class=\"string\">'  ##     ##    ##     ##   ##      ##  ##      ##  ##          ##      ##'</span>,</span><br><span class=\"line\"> <span class=\"string\">' ##           ##       ##  ##      ##  ##      ##  ##          ##      ##'</span>,</span><br><span class=\"line\"> <span class=\"string\">' ##           ##       ##  #########   #########   ########    #########'</span>,</span><br><span class=\"line\"> <span class=\"string\">' ##           ##       ##  ########    ########    ########    ######## '</span>,</span><br><span class=\"line\"> <span class=\"string\">' ##           ##       ##  ##          ##          ##          ##   ## '</span>,</span><br><span class=\"line\"> <span class=\"string\">'  ##     ##    ##     ##   ##          ##          ##          ##    ## '</span>,</span><br><span class=\"line\"> <span class=\"string\">'   #######      #######    ##          ##          #########   ##     ## '</span>,</span><br><span class=\"line\"> <span class=\"string\">'     ###          ###      ##          ##          ##########  ##      ##'</span>]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>###第21关</p>\n<p>这一关不再是给出一个网址然后解谜，而是用到上一关得到文件——package.pack以及readme.txt， readme有关于这一关的提示：</p>\n<blockquote>\n<p>We used to play this game when we were kids<br>When I had no idea what to do, I looked backwards.</p>\n</blockquote>\n<p>这一关主要过程是对package.pack文件不断进行解压。根据上一次解压得到的结果，判断下一次解压用zlib还是bz2，以及判断得到的数据是正向的还是要look backwards.</p>\n<p>最后解压出来的结果是<strong>sgol ruoy ta kool</strong>, reverse一下得到<font color=\"red\">look at your logs</font></p>\n<p>也就是说，每次解压的时候，我们要添加一些信息，形成logs. 最后，我们把这个logs打印出来，就可以得到通关信息。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bz2</span><br><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uncompress</span><span class=\"params\">(data, logs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> data[ : <span class=\"number\">2</span>] == <span class=\"string\">'x\\x9c'</span>:</span><br><span class=\"line\">        logs.append(<span class=\"string\">'*'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zlib.decompress(data)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> data[ : <span class=\"number\">2</span>] == <span class=\"string\">'BZ'</span>:</span><br><span class=\"line\">        logs.append(<span class=\"string\">'#'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bz2.BZ2Decompressor().decompress(data)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> data[<span class=\"number\">-2</span> : ] == <span class=\"string\">'\\x9cx'</span>:</span><br><span class=\"line\">        logs.append(<span class=\"string\">'@'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zlib.decompress(data[::<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> data[<span class=\"number\">-2</span> : ] == <span class=\"string\">'ZB'</span>:</span><br><span class=\"line\">        logs.append(<span class=\"string\">'$'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bz2.BZ2Decompressor().decompress(data[::<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    data = open(<span class=\"string\">'unreal/package.pack'</span>).read()</span><br><span class=\"line\">    logs = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = uncompress(data, logs)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"Decompress ends!\"</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    logs.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> data</span><br><span class=\"line\">    pprint(<span class=\"string\">''</span>.join(logs).replace(<span class=\"string\">'*'</span>, <span class=\"string\">' '</span>).split(<span class=\"string\">'@'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : solve()</span><br></pre></td></tr></table></figure>\n<p>最后得到通关信息——copper，<a href=\"http://www.pythonchallenge.com/pc/hex/copper.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/copper.html</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">'     ###          ###      ########    ########    ##########  ########'</span>,</span><br><span class=\"line\"> <span class=\"string\">'   #######      #######    #########   #########   #########   #########'</span>,</span><br><span class=\"line\"> <span class=\"string\">'  ##     ##    ##     ##   ##      ##  ##      ##  ##          ##      ##'</span>,</span><br><span class=\"line\"> <span class=\"string\">' ##           ##       ##  ##      ##  ##      ##  ##          ##      ##'</span>,</span><br><span class=\"line\"> <span class=\"string\">' ##           ##       ##  #########   #########   ########    #########'</span>,</span><br><span class=\"line\"> <span class=\"string\">' ##           ##       ##  ########    ########    ########    ######## '</span>,</span><br><span class=\"line\"> <span class=\"string\">' ##           ##       ##  ##          ##          ##          ##   ## '</span>,</span><br><span class=\"line\"> <span class=\"string\">'  ##     ##    ##     ##   ##          ##          ##          ##    ## '</span>,</span><br><span class=\"line\"> <span class=\"string\">'   #######      #######    ##          ##          #########   ##     ## '</span>,</span><br><span class=\"line\"> <span class=\"string\">'     ###          ###      ##          ##          ##########  ##      ##'</span>]</span><br></pre></td></tr></table></figure></p>"},{"title":"Python Challenge (Level 22)","date":"2015-02-05T04:29:28.000Z","_content":"\n[第22关](http://www.pythonchallenge.com/pc/hex/copper.html)\n\n根据Page Source里的提示，得到一张图片white.gif\n\n这是一张动态图，基本上都是黑的像素，但标题却是white.gif. 查看一下每一帧的像素，会发现每一帧有一个值为8的像素点。动态图中，就是这个白的像素点在动，记下每一点的坐标，得到\n``` Python\narray([[100, 100],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       ...\n```\n这些坐标都在(100,100)附近。结合这一关的图片上的摇杆，可以判断出这些坐标表示的是摇杆的方向，(100,100)就是原点。\n得到的坐标中(100,100)出现了五次，我们可以据此将坐标分为五组，每一组画出一个图案。每画出一个图案，就要更改一下坐标位置，否则，五个图案就会重叠在一起。\n<!-- more -->\n\n``` Python\nfrom PIL import Image, ImageSequence\nimport numpy as np\n\ndef draw(im, origin, offsetCoords, value):\n    for c in offsetCoords:\n        im.putpixel(origin, value)\n        dx = (c[0] - 100) // 2\n        dy = (c[1] - 100) // 2\n        origin[0] += dx\n        origin[1] += dy\n\nim = Image.open('white.gif')\ncoords = []\nfor i in ImageSequence.Iterator(im):\n    idata = list(i.getdata())\n    idx = idata.index(8)\n    x = idx % 200\n    y = idx // 200\n    coords.append((x, y))\n\ncoords = np.array(coords)\ninterval = np.where(np.all(coords == [100, 100], axis=1) == True)\ninterval = interval[0].tolist()\ninterval.append(coords.shape[0])\n\nimOut = Image.new(im.mode, im.size)\nx, y = 30, 50\nfor i in range(len(interval) - 1):\n    draw(imOut, [x, y], coords[interval[i] + 1 : interval[i+1]], 200)\n    x += 30\nimOut.show()\n```\n得到的图片显示为bonus，http://www.pythonchallenge.com/pc/hex/bonus.html\n","source":"_posts/pc22.md","raw":"title: Python Challenge (Level 22)\ndate: 2015-02-05 12:29:28\ntags: [Python]\n---\n\n[第22关](http://www.pythonchallenge.com/pc/hex/copper.html)\n\n根据Page Source里的提示，得到一张图片white.gif\n\n这是一张动态图，基本上都是黑的像素，但标题却是white.gif. 查看一下每一帧的像素，会发现每一帧有一个值为8的像素点。动态图中，就是这个白的像素点在动，记下每一点的坐标，得到\n``` Python\narray([[100, 100],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       [100, 102],\n       ...\n```\n这些坐标都在(100,100)附近。结合这一关的图片上的摇杆，可以判断出这些坐标表示的是摇杆的方向，(100,100)就是原点。\n得到的坐标中(100,100)出现了五次，我们可以据此将坐标分为五组，每一组画出一个图案。每画出一个图案，就要更改一下坐标位置，否则，五个图案就会重叠在一起。\n<!-- more -->\n\n``` Python\nfrom PIL import Image, ImageSequence\nimport numpy as np\n\ndef draw(im, origin, offsetCoords, value):\n    for c in offsetCoords:\n        im.putpixel(origin, value)\n        dx = (c[0] - 100) // 2\n        dy = (c[1] - 100) // 2\n        origin[0] += dx\n        origin[1] += dy\n\nim = Image.open('white.gif')\ncoords = []\nfor i in ImageSequence.Iterator(im):\n    idata = list(i.getdata())\n    idx = idata.index(8)\n    x = idx % 200\n    y = idx // 200\n    coords.append((x, y))\n\ncoords = np.array(coords)\ninterval = np.where(np.all(coords == [100, 100], axis=1) == True)\ninterval = interval[0].tolist()\ninterval.append(coords.shape[0])\n\nimOut = Image.new(im.mode, im.size)\nx, y = 30, 50\nfor i in range(len(interval) - 1):\n    draw(imOut, [x, y], coords[interval[i] + 1 : interval[i+1]], 200)\n    x += 30\nimOut.show()\n```\n得到的图片显示为bonus，http://www.pythonchallenge.com/pc/hex/bonus.html\n","slug":"pc22","published":1,"updated":"2018-06-10T17:05:07.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8n000wytk0a8kxkyfv","content":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/copper.html\" target=\"_blank\" rel=\"noopener\">第22关</a></p>\n<p>根据Page Source里的提示，得到一张图片white.gif</p>\n<p>这是一张动态图，基本上都是黑的像素，但标题却是white.gif. 查看一下每一帧的像素，会发现每一帧有一个值为8的像素点。动态图中，就是这个白的像素点在动，记下每一点的坐标，得到<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([[<span class=\"number\">100</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       ...</span><br></pre></td></tr></table></figure></p>\n<p>这些坐标都在(100,100)附近。结合这一关的图片上的摇杆，可以判断出这些坐标表示的是摇杆的方向，(100,100)就是原点。<br>得到的坐标中(100,100)出现了五次，我们可以据此将坐标分为五组，每一组画出一个图案。每画出一个图案，就要更改一下坐标位置，否则，五个图案就会重叠在一起。<br><a id=\"more\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageSequence</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw</span><span class=\"params\">(im, origin, offsetCoords, value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> offsetCoords:</span><br><span class=\"line\">        im.putpixel(origin, value)</span><br><span class=\"line\">        dx = (c[<span class=\"number\">0</span>] - <span class=\"number\">100</span>) // <span class=\"number\">2</span></span><br><span class=\"line\">        dy = (c[<span class=\"number\">1</span>] - <span class=\"number\">100</span>) // <span class=\"number\">2</span></span><br><span class=\"line\">        origin[<span class=\"number\">0</span>] += dx</span><br><span class=\"line\">        origin[<span class=\"number\">1</span>] += dy</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'white.gif'</span>)</span><br><span class=\"line\">coords = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ImageSequence.Iterator(im):</span><br><span class=\"line\">    idata = list(i.getdata())</span><br><span class=\"line\">    idx = idata.index(<span class=\"number\">8</span>)</span><br><span class=\"line\">    x = idx % <span class=\"number\">200</span></span><br><span class=\"line\">    y = idx // <span class=\"number\">200</span></span><br><span class=\"line\">    coords.append((x, y))</span><br><span class=\"line\"></span><br><span class=\"line\">coords = np.array(coords)</span><br><span class=\"line\">interval = np.where(np.all(coords == [<span class=\"number\">100</span>, <span class=\"number\">100</span>], axis=<span class=\"number\">1</span>) == <span class=\"keyword\">True</span>)</span><br><span class=\"line\">interval = interval[<span class=\"number\">0</span>].tolist()</span><br><span class=\"line\">interval.append(coords.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">imOut = Image.new(im.mode, im.size)</span><br><span class=\"line\">x, y = <span class=\"number\">30</span>, <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(interval) - <span class=\"number\">1</span>):</span><br><span class=\"line\">    draw(imOut, [x, y], coords[interval[i] + <span class=\"number\">1</span> : interval[i+<span class=\"number\">1</span>]], <span class=\"number\">200</span>)</span><br><span class=\"line\">    x += <span class=\"number\">30</span></span><br><span class=\"line\">imOut.show()</span><br></pre></td></tr></table></figure>\n<p>得到的图片显示为bonus，<a href=\"http://www.pythonchallenge.com/pc/hex/bonus.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/bonus.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/copper.html\" target=\"_blank\" rel=\"noopener\">第22关</a></p>\n<p>根据Page Source里的提示，得到一张图片white.gif</p>\n<p>这是一张动态图，基本上都是黑的像素，但标题却是white.gif. 查看一下每一帧的像素，会发现每一帧有一个值为8的像素点。动态图中，就是这个白的像素点在动，记下每一点的坐标，得到<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([[<span class=\"number\">100</span>, <span class=\"number\">100</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       [<span class=\"number\">100</span>, <span class=\"number\">102</span>],</span><br><span class=\"line\">       ...</span><br></pre></td></tr></table></figure></p>\n<p>这些坐标都在(100,100)附近。结合这一关的图片上的摇杆，可以判断出这些坐标表示的是摇杆的方向，(100,100)就是原点。<br>得到的坐标中(100,100)出现了五次，我们可以据此将坐标分为五组，每一组画出一个图案。每画出一个图案，就要更改一下坐标位置，否则，五个图案就会重叠在一起。<br>","more":"</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageSequence</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">draw</span><span class=\"params\">(im, origin, offsetCoords, value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> offsetCoords:</span><br><span class=\"line\">        im.putpixel(origin, value)</span><br><span class=\"line\">        dx = (c[<span class=\"number\">0</span>] - <span class=\"number\">100</span>) // <span class=\"number\">2</span></span><br><span class=\"line\">        dy = (c[<span class=\"number\">1</span>] - <span class=\"number\">100</span>) // <span class=\"number\">2</span></span><br><span class=\"line\">        origin[<span class=\"number\">0</span>] += dx</span><br><span class=\"line\">        origin[<span class=\"number\">1</span>] += dy</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'white.gif'</span>)</span><br><span class=\"line\">coords = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ImageSequence.Iterator(im):</span><br><span class=\"line\">    idata = list(i.getdata())</span><br><span class=\"line\">    idx = idata.index(<span class=\"number\">8</span>)</span><br><span class=\"line\">    x = idx % <span class=\"number\">200</span></span><br><span class=\"line\">    y = idx // <span class=\"number\">200</span></span><br><span class=\"line\">    coords.append((x, y))</span><br><span class=\"line\"></span><br><span class=\"line\">coords = np.array(coords)</span><br><span class=\"line\">interval = np.where(np.all(coords == [<span class=\"number\">100</span>, <span class=\"number\">100</span>], axis=<span class=\"number\">1</span>) == <span class=\"keyword\">True</span>)</span><br><span class=\"line\">interval = interval[<span class=\"number\">0</span>].tolist()</span><br><span class=\"line\">interval.append(coords.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">imOut = Image.new(im.mode, im.size)</span><br><span class=\"line\">x, y = <span class=\"number\">30</span>, <span class=\"number\">50</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(interval) - <span class=\"number\">1</span>):</span><br><span class=\"line\">    draw(imOut, [x, y], coords[interval[i] + <span class=\"number\">1</span> : interval[i+<span class=\"number\">1</span>]], <span class=\"number\">200</span>)</span><br><span class=\"line\">    x += <span class=\"number\">30</span></span><br><span class=\"line\">imOut.show()</span><br></pre></td></tr></table></figure>\n<p>得到的图片显示为bonus，<a href=\"http://www.pythonchallenge.com/pc/hex/bonus.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/bonus.html</a></p>"},{"title":"Python Challenge (Level 24)","date":"2015-02-07T13:05:53.000Z","_content":"\n[第24关](http://www.pythonchallenge.com/pc/hex/ambiguity.html)\n\n这一关是一张迷宫图片，看来是要解这个迷宫。\n\n根据网页标题，迷宫是**from top to bottom**，黑色像素是路径，白色像素是墙。这张图片大小为641×641，入口在右上角(0, 639)， 出口是左下角(640, 1)。\n\n解迷宫可以用BFS，也可以用DFS，但DFS不能保证是最短的路径。我用的是BFS. 查了下网上其他人的攻略，发现DFS也能得到同样结果，看来应该是只有一条路径吧。\n\n迷宫的路径的Green、Blue通道都是0，而Red通道会0和非0交替。把非0值收集起来，写到文件，就可以得到zip文件。解压后，得到一张图片，包含通关信息——lake。里面还有mybroken.zip，暂时不知道有何用。\n\n<!-- more -->\n\n``` Python\n# -*- coding:utf-8 -*-\n\nfrom PIL import Image\nimport numpy as np\n\ndef BFS(imdata, startPos, endPos):\n    ''' 广度优先搜索迷宫路径\n    :param imdata:  迷宫图片像素值, (height, width, channel)\n    :param startPos:  起始坐标, [x, y]\n    :param endPos:  终止坐标, [x, y]\n    :return: 返回记录父坐标的矩阵，上右下左分别用0, 1, 2, 3表示。\n             根据这个矩阵，可回溯得到最短路径。\n    '''\n    visited = np.zeros(imdata.shape[0 : 2], dtype=np.False_)\n    visited[0, 639] = True\n    visited[640, 1] = True\n    father = -np.ones(imdata.shape[0 : 2], dtype=np.int8)\n    dx = [-1, 0, 1, 0] #上右下左\n    dy = [0, 1, 0, -1]\n    bfs_queue = []\n    bfs_queue.append(startPos)\n    while bfs_queue:\n        cur_pos = bfs_queue.pop(0)\n        if cur_pos == endPos:\n            break\n        for i in range(4):\n            x = cur_pos[0] + dx[i]\n            y = cur_pos[1] + dy[i]\n            if imdata[x, y, 1] == imdata[x, y, 2] == 0 and not visited[x, y]:\n                father[x, y] = i\n                bfs_queue.append([x, y])\n        visited[cur_pos[0], cur_pos[1]] = True\n    return father\n\ndef mapXY(pre, pos):\n    ''' 根据父坐标类型和当前坐标，得到父坐标\n    :param pre: 0,1,2,3分别表示当前坐标位于父坐标的上右下左\n    :param pos: 当前坐标[x, y]\n    :return: 父坐标[x, y]\n    '''\n    if pre == 0:\n        pos[0] += 1\n    elif pre == 1:\n        pos[1] -= 1\n    elif pre == 2:\n        pos[0] -= 1\n    elif pre == 3:\n        pos[1] += 1\n    else:\n        raise Exception(\"Invalid Father Pos!\")\n    return pos\n\ndef getData(imdata, father, startPos, endPos):\n    ''' 回溯得到最短路径以及路径上每个像素点r通道的像素值\n    :param imdata: 迷宫图片像素值\n    :param father: 每个点的父坐标\n    :param startPos: 开始坐标 [x, y]\n    :param endPos: 结束坐标 [x, y]\n    :return: Red通道像素值, 用绿色像素标记的迷宫路径\n    '''\n    data = []\n    curPos = endPos[:]\n    while curPos != startPos:\n        #取Red通道像素值\n        data.append(chr(imdata[curPos[0], curPos[1], 0]))\n        #路径用绿色像素标记\n        imdata[curPos[0], curPos[1]] = [0, 255, 0, 255]\n        curPos = mapXY(father[curPos[0], curPos[1]], curPos)\n    data.append(chr(imdata[startPos[0], startPos[1], 0]))\n    return data, imdata\n\ndef solve():\n    im = Image.open('maze.png')\n    w, h = im.size\n    imdata = list(im.getdata())\n    imdata = np.array(imdata)\n    imdata = imdata.reshape((h, w, -1))\n    print \"BFS\"\n    fatherMat = BFS(imdata, [1, 639], [639, 1])\n    print \"Get Path and data\"\n    data, nimdata = getData(imdata, fatherMat, [1, 639], [639, 1])\n    open('maze.zip', 'w').write(''.join(data[::-2]))\n\n    nimdata = nimdata.reshape((-1, 4)).tolist()\n    nimdata = [tuple(x) for x in nimdata]\n    im.putdata(nimdata)\n    im.save('mazeSolve.jpg')\n\nif __name__ == \"__main__\" : solve()\n```\n\n下一关 http://www.pythonchallenge.com/pc/hex/lake.html\n","source":"_posts/pc24.md","raw":"title: Python Challenge (Level 24)\ndate: 2015-02-07 21:05:53\ntags: [Python]\n---\n\n[第24关](http://www.pythonchallenge.com/pc/hex/ambiguity.html)\n\n这一关是一张迷宫图片，看来是要解这个迷宫。\n\n根据网页标题，迷宫是**from top to bottom**，黑色像素是路径，白色像素是墙。这张图片大小为641×641，入口在右上角(0, 639)， 出口是左下角(640, 1)。\n\n解迷宫可以用BFS，也可以用DFS，但DFS不能保证是最短的路径。我用的是BFS. 查了下网上其他人的攻略，发现DFS也能得到同样结果，看来应该是只有一条路径吧。\n\n迷宫的路径的Green、Blue通道都是0，而Red通道会0和非0交替。把非0值收集起来，写到文件，就可以得到zip文件。解压后，得到一张图片，包含通关信息——lake。里面还有mybroken.zip，暂时不知道有何用。\n\n<!-- more -->\n\n``` Python\n# -*- coding:utf-8 -*-\n\nfrom PIL import Image\nimport numpy as np\n\ndef BFS(imdata, startPos, endPos):\n    ''' 广度优先搜索迷宫路径\n    :param imdata:  迷宫图片像素值, (height, width, channel)\n    :param startPos:  起始坐标, [x, y]\n    :param endPos:  终止坐标, [x, y]\n    :return: 返回记录父坐标的矩阵，上右下左分别用0, 1, 2, 3表示。\n             根据这个矩阵，可回溯得到最短路径。\n    '''\n    visited = np.zeros(imdata.shape[0 : 2], dtype=np.False_)\n    visited[0, 639] = True\n    visited[640, 1] = True\n    father = -np.ones(imdata.shape[0 : 2], dtype=np.int8)\n    dx = [-1, 0, 1, 0] #上右下左\n    dy = [0, 1, 0, -1]\n    bfs_queue = []\n    bfs_queue.append(startPos)\n    while bfs_queue:\n        cur_pos = bfs_queue.pop(0)\n        if cur_pos == endPos:\n            break\n        for i in range(4):\n            x = cur_pos[0] + dx[i]\n            y = cur_pos[1] + dy[i]\n            if imdata[x, y, 1] == imdata[x, y, 2] == 0 and not visited[x, y]:\n                father[x, y] = i\n                bfs_queue.append([x, y])\n        visited[cur_pos[0], cur_pos[1]] = True\n    return father\n\ndef mapXY(pre, pos):\n    ''' 根据父坐标类型和当前坐标，得到父坐标\n    :param pre: 0,1,2,3分别表示当前坐标位于父坐标的上右下左\n    :param pos: 当前坐标[x, y]\n    :return: 父坐标[x, y]\n    '''\n    if pre == 0:\n        pos[0] += 1\n    elif pre == 1:\n        pos[1] -= 1\n    elif pre == 2:\n        pos[0] -= 1\n    elif pre == 3:\n        pos[1] += 1\n    else:\n        raise Exception(\"Invalid Father Pos!\")\n    return pos\n\ndef getData(imdata, father, startPos, endPos):\n    ''' 回溯得到最短路径以及路径上每个像素点r通道的像素值\n    :param imdata: 迷宫图片像素值\n    :param father: 每个点的父坐标\n    :param startPos: 开始坐标 [x, y]\n    :param endPos: 结束坐标 [x, y]\n    :return: Red通道像素值, 用绿色像素标记的迷宫路径\n    '''\n    data = []\n    curPos = endPos[:]\n    while curPos != startPos:\n        #取Red通道像素值\n        data.append(chr(imdata[curPos[0], curPos[1], 0]))\n        #路径用绿色像素标记\n        imdata[curPos[0], curPos[1]] = [0, 255, 0, 255]\n        curPos = mapXY(father[curPos[0], curPos[1]], curPos)\n    data.append(chr(imdata[startPos[0], startPos[1], 0]))\n    return data, imdata\n\ndef solve():\n    im = Image.open('maze.png')\n    w, h = im.size\n    imdata = list(im.getdata())\n    imdata = np.array(imdata)\n    imdata = imdata.reshape((h, w, -1))\n    print \"BFS\"\n    fatherMat = BFS(imdata, [1, 639], [639, 1])\n    print \"Get Path and data\"\n    data, nimdata = getData(imdata, fatherMat, [1, 639], [639, 1])\n    open('maze.zip', 'w').write(''.join(data[::-2]))\n\n    nimdata = nimdata.reshape((-1, 4)).tolist()\n    nimdata = [tuple(x) for x in nimdata]\n    im.putdata(nimdata)\n    im.save('mazeSolve.jpg')\n\nif __name__ == \"__main__\" : solve()\n```\n\n下一关 http://www.pythonchallenge.com/pc/hex/lake.html\n","slug":"pc24","published":1,"updated":"2018-06-10T17:05:07.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8p000yytk0vrhtjzet","content":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/ambiguity.html\" target=\"_blank\" rel=\"noopener\">第24关</a></p>\n<p>这一关是一张迷宫图片，看来是要解这个迷宫。</p>\n<p>根据网页标题，迷宫是<strong>from top to bottom</strong>，黑色像素是路径，白色像素是墙。这张图片大小为641×641，入口在右上角(0, 639)， 出口是左下角(640, 1)。</p>\n<p>解迷宫可以用BFS，也可以用DFS，但DFS不能保证是最短的路径。我用的是BFS. 查了下网上其他人的攻略，发现DFS也能得到同样结果，看来应该是只有一条路径吧。</p>\n<p>迷宫的路径的Green、Blue通道都是0，而Red通道会0和非0交替。把非0值收集起来，写到文件，就可以得到zip文件。解压后，得到一张图片，包含通关信息——lake。里面还有mybroken.zip，暂时不知道有何用。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">BFS</span><span class=\"params\">(imdata, startPos, endPos)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 广度优先搜索迷宫路径</span></span><br><span class=\"line\"><span class=\"string\">    :param imdata:  迷宫图片像素值, (height, width, channel)</span></span><br><span class=\"line\"><span class=\"string\">    :param startPos:  起始坐标, [x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :param endPos:  终止坐标, [x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :return: 返回记录父坐标的矩阵，上右下左分别用0, 1, 2, 3表示。</span></span><br><span class=\"line\"><span class=\"string\">             根据这个矩阵，可回溯得到最短路径。</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    visited = np.zeros(imdata.shape[<span class=\"number\">0</span> : <span class=\"number\">2</span>], dtype=np.False_)</span><br><span class=\"line\">    visited[<span class=\"number\">0</span>, <span class=\"number\">639</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">    visited[<span class=\"number\">640</span>, <span class=\"number\">1</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">    father = -np.ones(imdata.shape[<span class=\"number\">0</span> : <span class=\"number\">2</span>], dtype=np.int8)</span><br><span class=\"line\">    dx = [<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>] <span class=\"comment\">#上右下左</span></span><br><span class=\"line\">    dy = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>]</span><br><span class=\"line\">    bfs_queue = []</span><br><span class=\"line\">    bfs_queue.append(startPos)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> bfs_queue:</span><br><span class=\"line\">        cur_pos = bfs_queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur_pos == endPos:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">            x = cur_pos[<span class=\"number\">0</span>] + dx[i]</span><br><span class=\"line\">            y = cur_pos[<span class=\"number\">1</span>] + dy[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> imdata[x, y, <span class=\"number\">1</span>] == imdata[x, y, <span class=\"number\">2</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> visited[x, y]:</span><br><span class=\"line\">                father[x, y] = i</span><br><span class=\"line\">                bfs_queue.append([x, y])</span><br><span class=\"line\">        visited[cur_pos[<span class=\"number\">0</span>], cur_pos[<span class=\"number\">1</span>]] = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> father</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapXY</span><span class=\"params\">(pre, pos)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 根据父坐标类型和当前坐标，得到父坐标</span></span><br><span class=\"line\"><span class=\"string\">    :param pre: 0,1,2,3分别表示当前坐标位于父坐标的上右下左</span></span><br><span class=\"line\"><span class=\"string\">    :param pos: 当前坐标[x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :return: 父坐标[x, y]</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pre == <span class=\"number\">0</span>:</span><br><span class=\"line\">        pos[<span class=\"number\">0</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> pre == <span class=\"number\">1</span>:</span><br><span class=\"line\">        pos[<span class=\"number\">1</span>] -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> pre == <span class=\"number\">2</span>:</span><br><span class=\"line\">        pos[<span class=\"number\">0</span>] -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> pre == <span class=\"number\">3</span>:</span><br><span class=\"line\">        pos[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid Father Pos!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pos</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getData</span><span class=\"params\">(imdata, father, startPos, endPos)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 回溯得到最短路径以及路径上每个像素点r通道的像素值</span></span><br><span class=\"line\"><span class=\"string\">    :param imdata: 迷宫图片像素值</span></span><br><span class=\"line\"><span class=\"string\">    :param father: 每个点的父坐标</span></span><br><span class=\"line\"><span class=\"string\">    :param startPos: 开始坐标 [x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :param endPos: 结束坐标 [x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :return: Red通道像素值, 用绿色像素标记的迷宫路径</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    data = []</span><br><span class=\"line\">    curPos = endPos[:]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> curPos != startPos:</span><br><span class=\"line\">        <span class=\"comment\">#取Red通道像素值</span></span><br><span class=\"line\">        data.append(chr(imdata[curPos[<span class=\"number\">0</span>], curPos[<span class=\"number\">1</span>], <span class=\"number\">0</span>]))</span><br><span class=\"line\">        <span class=\"comment\">#路径用绿色像素标记</span></span><br><span class=\"line\">        imdata[curPos[<span class=\"number\">0</span>], curPos[<span class=\"number\">1</span>]] = [<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>]</span><br><span class=\"line\">        curPos = mapXY(father[curPos[<span class=\"number\">0</span>], curPos[<span class=\"number\">1</span>]], curPos)</span><br><span class=\"line\">    data.append(chr(imdata[startPos[<span class=\"number\">0</span>], startPos[<span class=\"number\">1</span>], <span class=\"number\">0</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data, imdata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    im = Image.open(<span class=\"string\">'maze.png'</span>)</span><br><span class=\"line\">    w, h = im.size</span><br><span class=\"line\">    imdata = list(im.getdata())</span><br><span class=\"line\">    imdata = np.array(imdata)</span><br><span class=\"line\">    imdata = imdata.reshape((h, w, <span class=\"number\">-1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"BFS\"</span></span><br><span class=\"line\">    fatherMat = BFS(imdata, [<span class=\"number\">1</span>, <span class=\"number\">639</span>], [<span class=\"number\">639</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Get Path and data\"</span></span><br><span class=\"line\">    data, nimdata = getData(imdata, fatherMat, [<span class=\"number\">1</span>, <span class=\"number\">639</span>], [<span class=\"number\">639</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    open(<span class=\"string\">'maze.zip'</span>, <span class=\"string\">'w'</span>).write(<span class=\"string\">''</span>.join(data[::<span class=\"number\">-2</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    nimdata = nimdata.reshape((<span class=\"number\">-1</span>, <span class=\"number\">4</span>)).tolist()</span><br><span class=\"line\">    nimdata = [tuple(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nimdata]</span><br><span class=\"line\">    im.putdata(nimdata)</span><br><span class=\"line\">    im.save(<span class=\"string\">'mazeSolve.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : solve()</span><br></pre></td></tr></table></figure>\n<p>下一关 <a href=\"http://www.pythonchallenge.com/pc/hex/lake.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/lake.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/ambiguity.html\" target=\"_blank\" rel=\"noopener\">第24关</a></p>\n<p>这一关是一张迷宫图片，看来是要解这个迷宫。</p>\n<p>根据网页标题，迷宫是<strong>from top to bottom</strong>，黑色像素是路径，白色像素是墙。这张图片大小为641×641，入口在右上角(0, 639)， 出口是左下角(640, 1)。</p>\n<p>解迷宫可以用BFS，也可以用DFS，但DFS不能保证是最短的路径。我用的是BFS. 查了下网上其他人的攻略，发现DFS也能得到同样结果，看来应该是只有一条路径吧。</p>\n<p>迷宫的路径的Green、Blue通道都是0，而Red通道会0和非0交替。把非0值收集起来，写到文件，就可以得到zip文件。解压后，得到一张图片，包含通关信息——lake。里面还有mybroken.zip，暂时不知道有何用。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">BFS</span><span class=\"params\">(imdata, startPos, endPos)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 广度优先搜索迷宫路径</span></span><br><span class=\"line\"><span class=\"string\">    :param imdata:  迷宫图片像素值, (height, width, channel)</span></span><br><span class=\"line\"><span class=\"string\">    :param startPos:  起始坐标, [x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :param endPos:  终止坐标, [x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :return: 返回记录父坐标的矩阵，上右下左分别用0, 1, 2, 3表示。</span></span><br><span class=\"line\"><span class=\"string\">             根据这个矩阵，可回溯得到最短路径。</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    visited = np.zeros(imdata.shape[<span class=\"number\">0</span> : <span class=\"number\">2</span>], dtype=np.False_)</span><br><span class=\"line\">    visited[<span class=\"number\">0</span>, <span class=\"number\">639</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">    visited[<span class=\"number\">640</span>, <span class=\"number\">1</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">    father = -np.ones(imdata.shape[<span class=\"number\">0</span> : <span class=\"number\">2</span>], dtype=np.int8)</span><br><span class=\"line\">    dx = [<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>] <span class=\"comment\">#上右下左</span></span><br><span class=\"line\">    dy = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>]</span><br><span class=\"line\">    bfs_queue = []</span><br><span class=\"line\">    bfs_queue.append(startPos)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> bfs_queue:</span><br><span class=\"line\">        cur_pos = bfs_queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur_pos == endPos:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">            x = cur_pos[<span class=\"number\">0</span>] + dx[i]</span><br><span class=\"line\">            y = cur_pos[<span class=\"number\">1</span>] + dy[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> imdata[x, y, <span class=\"number\">1</span>] == imdata[x, y, <span class=\"number\">2</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> visited[x, y]:</span><br><span class=\"line\">                father[x, y] = i</span><br><span class=\"line\">                bfs_queue.append([x, y])</span><br><span class=\"line\">        visited[cur_pos[<span class=\"number\">0</span>], cur_pos[<span class=\"number\">1</span>]] = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> father</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapXY</span><span class=\"params\">(pre, pos)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 根据父坐标类型和当前坐标，得到父坐标</span></span><br><span class=\"line\"><span class=\"string\">    :param pre: 0,1,2,3分别表示当前坐标位于父坐标的上右下左</span></span><br><span class=\"line\"><span class=\"string\">    :param pos: 当前坐标[x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :return: 父坐标[x, y]</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pre == <span class=\"number\">0</span>:</span><br><span class=\"line\">        pos[<span class=\"number\">0</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> pre == <span class=\"number\">1</span>:</span><br><span class=\"line\">        pos[<span class=\"number\">1</span>] -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> pre == <span class=\"number\">2</span>:</span><br><span class=\"line\">        pos[<span class=\"number\">0</span>] -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> pre == <span class=\"number\">3</span>:</span><br><span class=\"line\">        pos[<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Exception(<span class=\"string\">\"Invalid Father Pos!\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pos</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getData</span><span class=\"params\">(imdata, father, startPos, endPos)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 回溯得到最短路径以及路径上每个像素点r通道的像素值</span></span><br><span class=\"line\"><span class=\"string\">    :param imdata: 迷宫图片像素值</span></span><br><span class=\"line\"><span class=\"string\">    :param father: 每个点的父坐标</span></span><br><span class=\"line\"><span class=\"string\">    :param startPos: 开始坐标 [x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :param endPos: 结束坐标 [x, y]</span></span><br><span class=\"line\"><span class=\"string\">    :return: Red通道像素值, 用绿色像素标记的迷宫路径</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    data = []</span><br><span class=\"line\">    curPos = endPos[:]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> curPos != startPos:</span><br><span class=\"line\">        <span class=\"comment\">#取Red通道像素值</span></span><br><span class=\"line\">        data.append(chr(imdata[curPos[<span class=\"number\">0</span>], curPos[<span class=\"number\">1</span>], <span class=\"number\">0</span>]))</span><br><span class=\"line\">        <span class=\"comment\">#路径用绿色像素标记</span></span><br><span class=\"line\">        imdata[curPos[<span class=\"number\">0</span>], curPos[<span class=\"number\">1</span>]] = [<span class=\"number\">0</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>]</span><br><span class=\"line\">        curPos = mapXY(father[curPos[<span class=\"number\">0</span>], curPos[<span class=\"number\">1</span>]], curPos)</span><br><span class=\"line\">    data.append(chr(imdata[startPos[<span class=\"number\">0</span>], startPos[<span class=\"number\">1</span>], <span class=\"number\">0</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data, imdata</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    im = Image.open(<span class=\"string\">'maze.png'</span>)</span><br><span class=\"line\">    w, h = im.size</span><br><span class=\"line\">    imdata = list(im.getdata())</span><br><span class=\"line\">    imdata = np.array(imdata)</span><br><span class=\"line\">    imdata = imdata.reshape((h, w, <span class=\"number\">-1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"BFS\"</span></span><br><span class=\"line\">    fatherMat = BFS(imdata, [<span class=\"number\">1</span>, <span class=\"number\">639</span>], [<span class=\"number\">639</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Get Path and data\"</span></span><br><span class=\"line\">    data, nimdata = getData(imdata, fatherMat, [<span class=\"number\">1</span>, <span class=\"number\">639</span>], [<span class=\"number\">639</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    open(<span class=\"string\">'maze.zip'</span>, <span class=\"string\">'w'</span>).write(<span class=\"string\">''</span>.join(data[::<span class=\"number\">-2</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    nimdata = nimdata.reshape((<span class=\"number\">-1</span>, <span class=\"number\">4</span>)).tolist()</span><br><span class=\"line\">    nimdata = [tuple(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nimdata]</span><br><span class=\"line\">    im.putdata(nimdata)</span><br><span class=\"line\">    im.save(<span class=\"string\">'mazeSolve.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : solve()</span><br></pre></td></tr></table></figure>\n<p>下一关 <a href=\"http://www.pythonchallenge.com/pc/hex/lake.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/lake.html</a></p>"},{"title":"Python Challenge (Level 23)","date":"2015-02-06T00:56:48.000Z","_content":"\n[第23关](http://www.pythonchallenge.com/pc/hex/bonus.html)\n\n网页title是**what is this module?**，Page Source里面有这么一句:<font color=\"red\">'va gur snpr bs jung?'</font>，看起来有点像string.translate那一关。搜索一下这句话，就会看到得到通关信息。要用到**this**模块，**this**就是一个模块名。根据[this.py](http://svn.python.org/projects/python/trunk/Lib/this.py)的内容，得到translate的规则是平移13位。\n``` Python\nimport this\nimport string\n\nmsg = 'va gur snpr bs jung'\nfrm = string.ascii_lowercase\nto = string.ascii_lowercase[13:] + string.ascii_lowercase[0:13]\ntable = string.maketrans(frm, to)\nprint msg.translate(table)\n```\n得到**in the face of what**，对应import this时打印出来的一串信息，**what**就是<font color=\"red\">ambiguity</font>. http://www.pythonchallenge.com/pc/hex/ambiguity.html\n","source":"_posts/pc23.md","raw":"title: Python Challenge (Level 23)\ndate: 2015-02-06 08:56:48\ntags: [Python]\n---\n\n[第23关](http://www.pythonchallenge.com/pc/hex/bonus.html)\n\n网页title是**what is this module?**，Page Source里面有这么一句:<font color=\"red\">'va gur snpr bs jung?'</font>，看起来有点像string.translate那一关。搜索一下这句话，就会看到得到通关信息。要用到**this**模块，**this**就是一个模块名。根据[this.py](http://svn.python.org/projects/python/trunk/Lib/this.py)的内容，得到translate的规则是平移13位。\n``` Python\nimport this\nimport string\n\nmsg = 'va gur snpr bs jung'\nfrm = string.ascii_lowercase\nto = string.ascii_lowercase[13:] + string.ascii_lowercase[0:13]\ntable = string.maketrans(frm, to)\nprint msg.translate(table)\n```\n得到**in the face of what**，对应import this时打印出来的一串信息，**what**就是<font color=\"red\">ambiguity</font>. http://www.pythonchallenge.com/pc/hex/ambiguity.html\n","slug":"pc23","published":1,"updated":"2018-06-10T17:05:07.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8r0010ytk0bl0m9ghb","content":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/bonus.html\" target=\"_blank\" rel=\"noopener\">第23关</a></p>\n<p>网页title是<strong>what is this module?</strong>，Page Source里面有这么一句:<font color=\"red\">‘va gur snpr bs jung?’</font>，看起来有点像string.translate那一关。搜索一下这句话，就会看到得到通关信息。要用到<strong>this</strong>模块，<strong>this</strong>就是一个模块名。根据<a href=\"http://svn.python.org/projects/python/trunk/Lib/this.py\" target=\"_blank\" rel=\"noopener\">this.py</a>的内容，得到translate的规则是平移13位。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> this</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"></span><br><span class=\"line\">msg = <span class=\"string\">'va gur snpr bs jung'</span></span><br><span class=\"line\">frm = string.ascii_lowercase</span><br><span class=\"line\">to = string.ascii_lowercase[<span class=\"number\">13</span>:] + string.ascii_lowercase[<span class=\"number\">0</span>:<span class=\"number\">13</span>]</span><br><span class=\"line\">table = string.maketrans(frm, to)</span><br><span class=\"line\"><span class=\"keyword\">print</span> msg.translate(table)</span><br></pre></td></tr></table></figure></p>\n<p>得到<strong>in the face of what</strong>，对应import this时打印出来的一串信息，<strong>what</strong>就是<font color=\"red\">ambiguity</font>. <a href=\"http://www.pythonchallenge.com/pc/hex/ambiguity.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/ambiguity.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/bonus.html\" target=\"_blank\" rel=\"noopener\">第23关</a></p>\n<p>网页title是<strong>what is this module?</strong>，Page Source里面有这么一句:<font color=\"red\">‘va gur snpr bs jung?’</font>，看起来有点像string.translate那一关。搜索一下这句话，就会看到得到通关信息。要用到<strong>this</strong>模块，<strong>this</strong>就是一个模块名。根据<a href=\"http://svn.python.org/projects/python/trunk/Lib/this.py\" target=\"_blank\" rel=\"noopener\">this.py</a>的内容，得到translate的规则是平移13位。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> this</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"></span><br><span class=\"line\">msg = <span class=\"string\">'va gur snpr bs jung'</span></span><br><span class=\"line\">frm = string.ascii_lowercase</span><br><span class=\"line\">to = string.ascii_lowercase[<span class=\"number\">13</span>:] + string.ascii_lowercase[<span class=\"number\">0</span>:<span class=\"number\">13</span>]</span><br><span class=\"line\">table = string.maketrans(frm, to)</span><br><span class=\"line\"><span class=\"keyword\">print</span> msg.translate(table)</span><br></pre></td></tr></table></figure></p>\n<p>得到<strong>in the face of what</strong>，对应import this时打印出来的一串信息，<strong>what</strong>就是<font color=\"red\">ambiguity</font>. <a href=\"http://www.pythonchallenge.com/pc/hex/ambiguity.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/ambiguity.html</a></p>\n"},{"title":"Python Challenge (Level 25)","date":"2015-02-08T09:27:18.000Z","_content":"\n[第25关](http://www.pythonchallenge.com/pc/hex/lake.html)\n\n完成这一关后，不得不佩服弄出这道题的Nadav Samet，同时更加佩服解决了它的大神。\n\n这是一幅拼图模样的图片，根据Page Source里的提示<font color=\"red\">can you see the waves?</font>，这一关还要用到wave模块。\n\n把URL后缀改为lake1.wav，lake2.wav，...，lake25会得到25个wav文件。这25个wav文件对应着刚才的25块拼图。把这25个wav文件的内容依次平起来，会得到一张300*300大小的图片。\n\n<!-- more -->\n``` Python\nimport urllib\nimport StringIO\nimport wave\nfrom PIL import Image\n\nurl_t = 'http://butter:fly@www.pythonchallenge.com/pc/hex/lake%i.wav'\nIm = Image.new('RGB', (300, 300))\n\nfor i in range(25):\n    print \"%i/%i\" % (i + 1, 25)\n    data = wave.open(StringIO.StringIO(urllib.urlopen(url_t % (i + 1)).read()))\n    patch = Image.frombytes('RGB', (60, 60), data.readframes(data.getnframes()))\n    pos = (60 * (i % 5), 60 * (i // 5))\n    Im.paste(patch, pos)\n\nIm.show()\n```\n\n图片上的信息为<font color=\"red\">decent</font>， http://www.pythonchallenge.com/pc/hex/decent.html\n","source":"_posts/pc25.md","raw":"title: Python Challenge (Level 25)\ndate: 2015-02-08 17:27:18\ntags: [Python]\n---\n\n[第25关](http://www.pythonchallenge.com/pc/hex/lake.html)\n\n完成这一关后，不得不佩服弄出这道题的Nadav Samet，同时更加佩服解决了它的大神。\n\n这是一幅拼图模样的图片，根据Page Source里的提示<font color=\"red\">can you see the waves?</font>，这一关还要用到wave模块。\n\n把URL后缀改为lake1.wav，lake2.wav，...，lake25会得到25个wav文件。这25个wav文件对应着刚才的25块拼图。把这25个wav文件的内容依次平起来，会得到一张300*300大小的图片。\n\n<!-- more -->\n``` Python\nimport urllib\nimport StringIO\nimport wave\nfrom PIL import Image\n\nurl_t = 'http://butter:fly@www.pythonchallenge.com/pc/hex/lake%i.wav'\nIm = Image.new('RGB', (300, 300))\n\nfor i in range(25):\n    print \"%i/%i\" % (i + 1, 25)\n    data = wave.open(StringIO.StringIO(urllib.urlopen(url_t % (i + 1)).read()))\n    patch = Image.frombytes('RGB', (60, 60), data.readframes(data.getnframes()))\n    pos = (60 * (i % 5), 60 * (i // 5))\n    Im.paste(patch, pos)\n\nIm.show()\n```\n\n图片上的信息为<font color=\"red\">decent</font>， http://www.pythonchallenge.com/pc/hex/decent.html\n","slug":"pc25","published":1,"updated":"2018-06-10T17:05:07.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8t0012ytk0oyk3zdnv","content":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/lake.html\" target=\"_blank\" rel=\"noopener\">第25关</a></p>\n<p>完成这一关后，不得不佩服弄出这道题的Nadav Samet，同时更加佩服解决了它的大神。</p>\n<p>这是一幅拼图模样的图片，根据Page Source里的提示<font color=\"red\">can you see the waves?</font>，这一关还要用到wave模块。</p>\n<p>把URL后缀改为lake1.wav，lake2.wav，…，lake25会得到25个wav文件。这25个wav文件对应着刚才的25块拼图。把这25个wav文件的内容依次平起来，会得到一张300*300大小的图片。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> wave</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">url_t = <span class=\"string\">'http://butter:fly@www.pythonchallenge.com/pc/hex/lake%i.wav'</span></span><br><span class=\"line\">Im = Image.new(<span class=\"string\">'RGB'</span>, (<span class=\"number\">300</span>, <span class=\"number\">300</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">25</span>):</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"%i/%i\"</span> % (i + <span class=\"number\">1</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">    data = wave.open(StringIO.StringIO(urllib.urlopen(url_t % (i + <span class=\"number\">1</span>)).read()))</span><br><span class=\"line\">    patch = Image.frombytes(<span class=\"string\">'RGB'</span>, (<span class=\"number\">60</span>, <span class=\"number\">60</span>), data.readframes(data.getnframes()))</span><br><span class=\"line\">    pos = (<span class=\"number\">60</span> * (i % <span class=\"number\">5</span>), <span class=\"number\">60</span> * (i // <span class=\"number\">5</span>))</span><br><span class=\"line\">    Im.paste(patch, pos)</span><br><span class=\"line\"></span><br><span class=\"line\">Im.show()</span><br></pre></td></tr></table></figure>\n<p>图片上的信息为<font color=\"red\">decent</font>， <a href=\"http://www.pythonchallenge.com/pc/hex/decent.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/decent.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/lake.html\" target=\"_blank\" rel=\"noopener\">第25关</a></p>\n<p>完成这一关后，不得不佩服弄出这道题的Nadav Samet，同时更加佩服解决了它的大神。</p>\n<p>这是一幅拼图模样的图片，根据Page Source里的提示<font color=\"red\">can you see the waves?</font>，这一关还要用到wave模块。</p>\n<p>把URL后缀改为lake1.wav，lake2.wav，…，lake25会得到25个wav文件。这25个wav文件对应着刚才的25块拼图。把这25个wav文件的内容依次平起来，会得到一张300*300大小的图片。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> wave</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"></span><br><span class=\"line\">url_t = <span class=\"string\">'http://butter:fly@www.pythonchallenge.com/pc/hex/lake%i.wav'</span></span><br><span class=\"line\">Im = Image.new(<span class=\"string\">'RGB'</span>, (<span class=\"number\">300</span>, <span class=\"number\">300</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">25</span>):</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"%i/%i\"</span> % (i + <span class=\"number\">1</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\">    data = wave.open(StringIO.StringIO(urllib.urlopen(url_t % (i + <span class=\"number\">1</span>)).read()))</span><br><span class=\"line\">    patch = Image.frombytes(<span class=\"string\">'RGB'</span>, (<span class=\"number\">60</span>, <span class=\"number\">60</span>), data.readframes(data.getnframes()))</span><br><span class=\"line\">    pos = (<span class=\"number\">60</span> * (i % <span class=\"number\">5</span>), <span class=\"number\">60</span> * (i // <span class=\"number\">5</span>))</span><br><span class=\"line\">    Im.paste(patch, pos)</span><br><span class=\"line\"></span><br><span class=\"line\">Im.show()</span><br></pre></td></tr></table></figure>\n<p>图片上的信息为<font color=\"red\">decent</font>， <a href=\"http://www.pythonchallenge.com/pc/hex/decent.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/decent.html</a></p>"},{"title":"Python Challenge (Level 26)","date":"2015-02-09T10:36:42.000Z","_content":"\n[第26关](http://www.pythonchallenge.com/pc/hex/decent.html)\n\nPage Source里提示<font color=\"red\">you've got his e-mail</font>，回想一下，我们在[第19关](http://kwangka.github.io/2015/02/02/pc19/)里得到了一个email地址**leopold.moz@pythonchallenge.com**，这一关的网页title提示**be a man-apologize!**，[攻略](http://garethrees.org/2007/05/07/python-challenge/)上说发邮件到上面的email地址会得到通关信息（我试了一下，暂时还没收到信息）。\n\n> From: leopold.moz@pythonchallenge.com\n> Subject: Re: sorry\n> Date: 2007-05-17 15:37:07 BDT\n\n> Never mind that.\n\n> Have you found my broken zip?\n\n> md5: bbb8b499a0eef99b52c7f13f4e78c24b\n\n> Can you believe what one mistake can lead to?\n\n<!-- more -->\n\n根据这个回信提示，有一个字节漏掉了。[第25关](http://kwangka.github.io/2015/02/08/pc25/)得到mybroken.zip，解压不了，我们要补回这一个字节。穷举所有位置以及字节（0~255），检验一下MD5。MD5正确即表示得到完整zip文件。\n``` Python\nimport hashlib\n\nmd5code = 'bbb8b499a0eef99b52c7f13f4e78c24b'\ndata = open('maze/mybroken.zip').read()\nfor i in range(len(data)):\n    for j in range(256):\n        newData = data[ : i] + chr(j) + data[i+1 :]\n        if hashlib.md5(newData).hexdigest() == md5code:\n            open('repaired.zip', 'w').write(newData)\n            print i, j\n            raise StopIteration\n```\n\n解压修复好的zip文件，得到一张图片，上面有**speed**。再根据本关的图片提示**Hurry, up, I'm missing the boat**，最终得到<font color=\"red\">speedboat</font>. http://www.pythonchallenge.com/pc/hex/speedboat.html\n","source":"_posts/pc26.md","raw":"title: Python Challenge (Level 26)\ndate: 2015-02-09 18:36:42\ntags: [Python]\n---\n\n[第26关](http://www.pythonchallenge.com/pc/hex/decent.html)\n\nPage Source里提示<font color=\"red\">you've got his e-mail</font>，回想一下，我们在[第19关](http://kwangka.github.io/2015/02/02/pc19/)里得到了一个email地址**leopold.moz@pythonchallenge.com**，这一关的网页title提示**be a man-apologize!**，[攻略](http://garethrees.org/2007/05/07/python-challenge/)上说发邮件到上面的email地址会得到通关信息（我试了一下，暂时还没收到信息）。\n\n> From: leopold.moz@pythonchallenge.com\n> Subject: Re: sorry\n> Date: 2007-05-17 15:37:07 BDT\n\n> Never mind that.\n\n> Have you found my broken zip?\n\n> md5: bbb8b499a0eef99b52c7f13f4e78c24b\n\n> Can you believe what one mistake can lead to?\n\n<!-- more -->\n\n根据这个回信提示，有一个字节漏掉了。[第25关](http://kwangka.github.io/2015/02/08/pc25/)得到mybroken.zip，解压不了，我们要补回这一个字节。穷举所有位置以及字节（0~255），检验一下MD5。MD5正确即表示得到完整zip文件。\n``` Python\nimport hashlib\n\nmd5code = 'bbb8b499a0eef99b52c7f13f4e78c24b'\ndata = open('maze/mybroken.zip').read()\nfor i in range(len(data)):\n    for j in range(256):\n        newData = data[ : i] + chr(j) + data[i+1 :]\n        if hashlib.md5(newData).hexdigest() == md5code:\n            open('repaired.zip', 'w').write(newData)\n            print i, j\n            raise StopIteration\n```\n\n解压修复好的zip文件，得到一张图片，上面有**speed**。再根据本关的图片提示**Hurry, up, I'm missing the boat**，最终得到<font color=\"red\">speedboat</font>. http://www.pythonchallenge.com/pc/hex/speedboat.html\n","slug":"pc26","published":1,"updated":"2018-06-10T17:05:07.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8v0014ytk0uxf92adn","content":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/decent.html\" target=\"_blank\" rel=\"noopener\">第26关</a></p>\n<p>Page Source里提示<font color=\"red\">you’ve got his e-mail</font>，回想一下，我们在<a href=\"http://kwangka.github.io/2015/02/02/pc19/\" target=\"_blank\" rel=\"noopener\">第19关</a>里得到了一个email地址<a href=\"mailto:**leopold.moz@pythonchallenge.com\" target=\"_blank\" rel=\"noopener\">**leopold.moz@pythonchallenge.com</a><strong>，这一关的网页title提示</strong>be a man-apologize!**，<a href=\"http://garethrees.org/2007/05/07/python-challenge/\" target=\"_blank\" rel=\"noopener\">攻略</a>上说发邮件到上面的email地址会得到通关信息（我试了一下，暂时还没收到信息）。</p>\n<blockquote>\n<p>From: <a href=\"mailto:leopold.moz@pythonchallenge.com\" target=\"_blank\" rel=\"noopener\">leopold.moz@pythonchallenge.com</a><br>Subject: Re: sorry<br>Date: 2007-05-17 15:37:07 BDT</p>\n</blockquote>\n<blockquote>\n<p>Never mind that.</p>\n</blockquote>\n<blockquote>\n<p>Have you found my broken zip?</p>\n</blockquote>\n<blockquote>\n<p>md5: bbb8b499a0eef99b52c7f13f4e78c24b</p>\n</blockquote>\n<blockquote>\n<p>Can you believe what one mistake can lead to?</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>根据这个回信提示，有一个字节漏掉了。<a href=\"http://kwangka.github.io/2015/02/08/pc25/\" target=\"_blank\" rel=\"noopener\">第25关</a>得到mybroken.zip，解压不了，我们要补回这一个字节。穷举所有位置以及字节（0~255），检验一下MD5。MD5正确即表示得到完整zip文件。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">md5code = <span class=\"string\">'bbb8b499a0eef99b52c7f13f4e78c24b'</span></span><br><span class=\"line\">data = open(<span class=\"string\">'maze/mybroken.zip'</span>).read()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(data)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">256</span>):</span><br><span class=\"line\">        newData = data[ : i] + chr(j) + data[i+<span class=\"number\">1</span> :]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hashlib.md5(newData).hexdigest() == md5code:</span><br><span class=\"line\">            open(<span class=\"string\">'repaired.zip'</span>, <span class=\"string\">'w'</span>).write(newData)</span><br><span class=\"line\">            <span class=\"keyword\">print</span> i, j</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br></pre></td></tr></table></figure></p>\n<p>解压修复好的zip文件，得到一张图片，上面有<strong>speed</strong>。再根据本关的图片提示<strong>Hurry, up, I’m missing the boat</strong>，最终得到<font color=\"red\">speedboat</font>. <a href=\"http://www.pythonchallenge.com/pc/hex/speedboat.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/speedboat.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/decent.html\" target=\"_blank\" rel=\"noopener\">第26关</a></p>\n<p>Page Source里提示<font color=\"red\">you’ve got his e-mail</font>，回想一下，我们在<a href=\"http://kwangka.github.io/2015/02/02/pc19/\" target=\"_blank\" rel=\"noopener\">第19关</a>里得到了一个email地址<a href=\"mailto:**leopold.moz@pythonchallenge.com\" target=\"_blank\" rel=\"noopener\">**leopold.moz@pythonchallenge.com</a><strong>，这一关的网页title提示</strong>be a man-apologize!**，<a href=\"http://garethrees.org/2007/05/07/python-challenge/\" target=\"_blank\" rel=\"noopener\">攻略</a>上说发邮件到上面的email地址会得到通关信息（我试了一下，暂时还没收到信息）。</p>\n<blockquote>\n<p>From: <a href=\"mailto:leopold.moz@pythonchallenge.com\" target=\"_blank\" rel=\"noopener\">leopold.moz@pythonchallenge.com</a><br>Subject: Re: sorry<br>Date: 2007-05-17 15:37:07 BDT</p>\n</blockquote>\n<blockquote>\n<p>Never mind that.</p>\n</blockquote>\n<blockquote>\n<p>Have you found my broken zip?</p>\n</blockquote>\n<blockquote>\n<p>md5: bbb8b499a0eef99b52c7f13f4e78c24b</p>\n</blockquote>\n<blockquote>\n<p>Can you believe what one mistake can lead to?</p>\n</blockquote>","more":"<p>根据这个回信提示，有一个字节漏掉了。<a href=\"http://kwangka.github.io/2015/02/08/pc25/\" target=\"_blank\" rel=\"noopener\">第25关</a>得到mybroken.zip，解压不了，我们要补回这一个字节。穷举所有位置以及字节（0~255），检验一下MD5。MD5正确即表示得到完整zip文件。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">md5code = <span class=\"string\">'bbb8b499a0eef99b52c7f13f4e78c24b'</span></span><br><span class=\"line\">data = open(<span class=\"string\">'maze/mybroken.zip'</span>).read()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(data)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">256</span>):</span><br><span class=\"line\">        newData = data[ : i] + chr(j) + data[i+<span class=\"number\">1</span> :]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hashlib.md5(newData).hexdigest() == md5code:</span><br><span class=\"line\">            open(<span class=\"string\">'repaired.zip'</span>, <span class=\"string\">'w'</span>).write(newData)</span><br><span class=\"line\">            <span class=\"keyword\">print</span> i, j</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br></pre></td></tr></table></figure></p>\n<p>解压修复好的zip文件，得到一张图片，上面有<strong>speed</strong>。再根据本关的图片提示<strong>Hurry, up, I’m missing the boat</strong>，最终得到<font color=\"red\">speedboat</font>. <a href=\"http://www.pythonchallenge.com/pc/hex/speedboat.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/hex/speedboat.html</a></p>"},{"title":"Python Challenge (Level 27)","date":"2015-02-11T11:00:37.000Z","_content":"\n[第27关](http://www.pythonchallenge.com/pc/hex/speedboat.html)\n\n点击图片，提示输入用户名和密码，看来这一关就是要找到用户名和密码。\n\n根据Page Source的提示，很容易得到[zigzag.gif](http://www.pythonchallenge.com/pc/hex/zigzag.gif)\n\n这张图片上每个像素值是调色板的索引，将每一个像素替换为调色板中相应的颜色。\n``` Python\nim = Image.open('zigzag.gif')\nimdata = im.tostring()\np = im.palette.getdata()[1][::3] #RGB相等，因此每三个取一个\nfrm = ''.join([chr(i) for i in range(256)])\ntable = string.maketrans(frm, p)\nimdata_trans = imdata.translate(table)\n```\n\n<!-- more -->\n\n查看一下前二十个字节会发现，imdata和imdata_trans很相似。\n``` Python\nimdata[:20]\n\"\\xd7\\xd0\\xcb\\x0c\\xfe<\\x8bHB\\xbd\\x7f\\xb0\\xadF\\xaa\\xcf' ~\\x8e\"\n\nimdata_trans[:20]\n\"\\xd0\\xcb\\x0c\\xfe<\\x8bHB\\xbd\\x7f\\xb0\\xadF\\xaa\\xcf' ~\\x8e\\xa4\"\n```\n\n将两者对齐，记录不同之处的坐标以及相应内容。坐标信息会形成一幅图片，不同的内容则是一串压缩的字符串，解压后得到许多Python关键字。\n``` Python\nnewIm = Image.new('1', im.size)\nnewIm.putdata([i[0] == i[1] for i in zip(imdata[1:], imdata_trans[:-1])])\nnewIm.save('out27.png')\n#这里有点奇怪，直接show()得到的是全黑图像。要用save才有内容\n\ndiff = filter(lambda p: p[0] != p[1], zip(imdata[1:], imdata_trans[:-1]))\ndiff = [''.join(p[i] for p in diff) for i in range(2)]\ntext = bz2.decompress(diff[0])\n```\n\n根据得到图片的提示<font color=\"red\">no keyword</font>，将得到的text里面的非Python keyword提出来。\n``` Python\nwords = text.split(' ')\nfor w in set(words):\n    if not keyword.iskeyword(w):\n        print w\n\nswitch\nrepeat\n../ring/bell.html\n```\nswitch/repeat即为用户名和密码 http://www.pythonchallenge.com/pc/ring/bell.html\n\n*参考文章*\n- http://blog.csdn.net/qaswe/article/details/9967245\n- http://garethrees.org/2007/05/07/python-challenge/\n","source":"_posts/pc27.md","raw":"title: Python Challenge (Level 27)\ndate: 2015-02-11 19:00:37\ntags: [Python]\n---\n\n[第27关](http://www.pythonchallenge.com/pc/hex/speedboat.html)\n\n点击图片，提示输入用户名和密码，看来这一关就是要找到用户名和密码。\n\n根据Page Source的提示，很容易得到[zigzag.gif](http://www.pythonchallenge.com/pc/hex/zigzag.gif)\n\n这张图片上每个像素值是调色板的索引，将每一个像素替换为调色板中相应的颜色。\n``` Python\nim = Image.open('zigzag.gif')\nimdata = im.tostring()\np = im.palette.getdata()[1][::3] #RGB相等，因此每三个取一个\nfrm = ''.join([chr(i) for i in range(256)])\ntable = string.maketrans(frm, p)\nimdata_trans = imdata.translate(table)\n```\n\n<!-- more -->\n\n查看一下前二十个字节会发现，imdata和imdata_trans很相似。\n``` Python\nimdata[:20]\n\"\\xd7\\xd0\\xcb\\x0c\\xfe<\\x8bHB\\xbd\\x7f\\xb0\\xadF\\xaa\\xcf' ~\\x8e\"\n\nimdata_trans[:20]\n\"\\xd0\\xcb\\x0c\\xfe<\\x8bHB\\xbd\\x7f\\xb0\\xadF\\xaa\\xcf' ~\\x8e\\xa4\"\n```\n\n将两者对齐，记录不同之处的坐标以及相应内容。坐标信息会形成一幅图片，不同的内容则是一串压缩的字符串，解压后得到许多Python关键字。\n``` Python\nnewIm = Image.new('1', im.size)\nnewIm.putdata([i[0] == i[1] for i in zip(imdata[1:], imdata_trans[:-1])])\nnewIm.save('out27.png')\n#这里有点奇怪，直接show()得到的是全黑图像。要用save才有内容\n\ndiff = filter(lambda p: p[0] != p[1], zip(imdata[1:], imdata_trans[:-1]))\ndiff = [''.join(p[i] for p in diff) for i in range(2)]\ntext = bz2.decompress(diff[0])\n```\n\n根据得到图片的提示<font color=\"red\">no keyword</font>，将得到的text里面的非Python keyword提出来。\n``` Python\nwords = text.split(' ')\nfor w in set(words):\n    if not keyword.iskeyword(w):\n        print w\n\nswitch\nrepeat\n../ring/bell.html\n```\nswitch/repeat即为用户名和密码 http://www.pythonchallenge.com/pc/ring/bell.html\n\n*参考文章*\n- http://blog.csdn.net/qaswe/article/details/9967245\n- http://garethrees.org/2007/05/07/python-challenge/\n","slug":"pc27","published":1,"updated":"2018-06-10T17:05:07.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8x0016ytk085rzqkwd","content":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/speedboat.html\" target=\"_blank\" rel=\"noopener\">第27关</a></p>\n<p>点击图片，提示输入用户名和密码，看来这一关就是要找到用户名和密码。</p>\n<p>根据Page Source的提示，很容易得到<a href=\"http://www.pythonchallenge.com/pc/hex/zigzag.gif\" target=\"_blank\" rel=\"noopener\">zigzag.gif</a></p>\n<p>这张图片上每个像素值是调色板的索引，将每一个像素替换为调色板中相应的颜色。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im = Image.open(<span class=\"string\">'zigzag.gif'</span>)</span><br><span class=\"line\">imdata = im.tostring()</span><br><span class=\"line\">p = im.palette.getdata()[<span class=\"number\">1</span>][::<span class=\"number\">3</span>] <span class=\"comment\">#RGB相等，因此每三个取一个</span></span><br><span class=\"line\">frm = <span class=\"string\">''</span>.join([chr(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">256</span>)])</span><br><span class=\"line\">table = string.maketrans(frm, p)</span><br><span class=\"line\">imdata_trans = imdata.translate(table)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>查看一下前二十个字节会发现，imdata和imdata_trans很相似。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imdata[:<span class=\"number\">20</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\xd7\\xd0\\xcb\\x0c\\xfe&lt;\\x8bHB\\xbd\\x7f\\xb0\\xadF\\xaa\\xcf' ~\\x8e\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">imdata_trans[:<span class=\"number\">20</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\xd0\\xcb\\x0c\\xfe&lt;\\x8bHB\\xbd\\x7f\\xb0\\xadF\\xaa\\xcf' ~\\x8e\\xa4\"</span></span><br></pre></td></tr></table></figure></p>\n<p>将两者对齐，记录不同之处的坐标以及相应内容。坐标信息会形成一幅图片，不同的内容则是一串压缩的字符串，解压后得到许多Python关键字。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newIm = Image.new(<span class=\"string\">'1'</span>, im.size)</span><br><span class=\"line\">newIm.putdata([i[<span class=\"number\">0</span>] == i[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zip(imdata[<span class=\"number\">1</span>:], imdata_trans[:<span class=\"number\">-1</span>])])</span><br><span class=\"line\">newIm.save(<span class=\"string\">'out27.png'</span>)</span><br><span class=\"line\"><span class=\"comment\">#这里有点奇怪，直接show()得到的是全黑图像。要用save才有内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">diff = filter(<span class=\"keyword\">lambda</span> p: p[<span class=\"number\">0</span>] != p[<span class=\"number\">1</span>], zip(imdata[<span class=\"number\">1</span>:], imdata_trans[:<span class=\"number\">-1</span>]))</span><br><span class=\"line\">diff = [<span class=\"string\">''</span>.join(p[i] <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> diff) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>)]</span><br><span class=\"line\">text = bz2.decompress(diff[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure></p>\n<p>根据得到图片的提示<font color=\"red\">no keyword</font>，将得到的text里面的非Python keyword提出来。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">words = text.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> set(words):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> keyword.iskeyword(w):</span><br><span class=\"line\">        <span class=\"keyword\">print</span> w</span><br><span class=\"line\"></span><br><span class=\"line\">switch</span><br><span class=\"line\">repeat</span><br><span class=\"line\">../ring/bell.html</span><br></pre></td></tr></table></figure></p>\n<p>switch/repeat即为用户名和密码 <a href=\"http://www.pythonchallenge.com/pc/ring/bell.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/ring/bell.html</a></p>\n<p><em>参考文章</em></p>\n<ul>\n<li><a href=\"http://blog.csdn.net/qaswe/article/details/9967245\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qaswe/article/details/9967245</a></li>\n<li><a href=\"http://garethrees.org/2007/05/07/python-challenge/\" target=\"_blank\" rel=\"noopener\">http://garethrees.org/2007/05/07/python-challenge/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/hex/speedboat.html\" target=\"_blank\" rel=\"noopener\">第27关</a></p>\n<p>点击图片，提示输入用户名和密码，看来这一关就是要找到用户名和密码。</p>\n<p>根据Page Source的提示，很容易得到<a href=\"http://www.pythonchallenge.com/pc/hex/zigzag.gif\" target=\"_blank\" rel=\"noopener\">zigzag.gif</a></p>\n<p>这张图片上每个像素值是调色板的索引，将每一个像素替换为调色板中相应的颜色。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im = Image.open(<span class=\"string\">'zigzag.gif'</span>)</span><br><span class=\"line\">imdata = im.tostring()</span><br><span class=\"line\">p = im.palette.getdata()[<span class=\"number\">1</span>][::<span class=\"number\">3</span>] <span class=\"comment\">#RGB相等，因此每三个取一个</span></span><br><span class=\"line\">frm = <span class=\"string\">''</span>.join([chr(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">256</span>)])</span><br><span class=\"line\">table = string.maketrans(frm, p)</span><br><span class=\"line\">imdata_trans = imdata.translate(table)</span><br></pre></td></tr></table></figure></p>","more":"<p>查看一下前二十个字节会发现，imdata和imdata_trans很相似。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imdata[:<span class=\"number\">20</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\xd7\\xd0\\xcb\\x0c\\xfe&lt;\\x8bHB\\xbd\\x7f\\xb0\\xadF\\xaa\\xcf' ~\\x8e\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">imdata_trans[:<span class=\"number\">20</span>]</span><br><span class=\"line\"><span class=\"string\">\"\\xd0\\xcb\\x0c\\xfe&lt;\\x8bHB\\xbd\\x7f\\xb0\\xadF\\xaa\\xcf' ~\\x8e\\xa4\"</span></span><br></pre></td></tr></table></figure></p>\n<p>将两者对齐，记录不同之处的坐标以及相应内容。坐标信息会形成一幅图片，不同的内容则是一串压缩的字符串，解压后得到许多Python关键字。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newIm = Image.new(<span class=\"string\">'1'</span>, im.size)</span><br><span class=\"line\">newIm.putdata([i[<span class=\"number\">0</span>] == i[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> zip(imdata[<span class=\"number\">1</span>:], imdata_trans[:<span class=\"number\">-1</span>])])</span><br><span class=\"line\">newIm.save(<span class=\"string\">'out27.png'</span>)</span><br><span class=\"line\"><span class=\"comment\">#这里有点奇怪，直接show()得到的是全黑图像。要用save才有内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">diff = filter(<span class=\"keyword\">lambda</span> p: p[<span class=\"number\">0</span>] != p[<span class=\"number\">1</span>], zip(imdata[<span class=\"number\">1</span>:], imdata_trans[:<span class=\"number\">-1</span>]))</span><br><span class=\"line\">diff = [<span class=\"string\">''</span>.join(p[i] <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> diff) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>)]</span><br><span class=\"line\">text = bz2.decompress(diff[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure></p>\n<p>根据得到图片的提示<font color=\"red\">no keyword</font>，将得到的text里面的非Python keyword提出来。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">words = text.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> set(words):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> keyword.iskeyword(w):</span><br><span class=\"line\">        <span class=\"keyword\">print</span> w</span><br><span class=\"line\"></span><br><span class=\"line\">switch</span><br><span class=\"line\">repeat</span><br><span class=\"line\">../ring/bell.html</span><br></pre></td></tr></table></figure></p>\n<p>switch/repeat即为用户名和密码 <a href=\"http://www.pythonchallenge.com/pc/ring/bell.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/ring/bell.html</a></p>\n<p><em>参考文章</em></p>\n<ul>\n<li><a href=\"http://blog.csdn.net/qaswe/article/details/9967245\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qaswe/article/details/9967245</a></li>\n<li><a href=\"http://garethrees.org/2007/05/07/python-challenge/\" target=\"_blank\" rel=\"noopener\">http://garethrees.org/2007/05/07/python-challenge/</a></li>\n</ul>"},{"title":"Python Challenge (Level 28)","date":"2015-02-11T12:12:27.000Z","_content":"\n[第28关](http://www.pythonchallenge.com/pc/ring/bell.html)\nRING-RING-RING，读着读着就变成了GREEN. green.html里提示**yes, green**.\n\n仔细观察一下图片，发现里面有一条条的绿色竖纹。将图片的Green通道提取出来，相邻的两列像素作差，得到的差值的绝对值几乎都为42，只有少数例外。将绝对值不是42的提取出来，转成ASCII，得到通关信息——Python作者的姓名*Guido van Rossum*中的<font color=\"red\">guido</font>\n\n<!-- more -->\n\n``` Python\nfrom PIL import Image\nimport numpy as np\n\nim = Image.open('bell.png')\nimdata = list(im.getdata())\nimdata = np.array(imdata)\nsize = im.size\nimdata = imdata.reshape((size[1], size[0], -1))\nimdata_g = imdata[:, :, 1] # Green channel\ndiff = np.abs(imdata_g[:, 0::2] - imdata_g[:, 1::2])\nidx = np.where(diff != 42)\nmsg = diff[idx]\n\nprint ''.join(chr(i) for i in msg)\n\nprint 'Guido van Rossum'.split()[0]\n```\n\n下一关 http://www.pythonchallenge.com/pc/ring/guido.html\n\n*参考*\n- http://blog.sina.com.cn/s/blog_4513dde60101f3mk.html\n","source":"_posts/pc28.md","raw":"title: Python Challenge (Level 28)\ndate: 2015-02-11 20:12:27\ntags: [Python]\n---\n\n[第28关](http://www.pythonchallenge.com/pc/ring/bell.html)\nRING-RING-RING，读着读着就变成了GREEN. green.html里提示**yes, green**.\n\n仔细观察一下图片，发现里面有一条条的绿色竖纹。将图片的Green通道提取出来，相邻的两列像素作差，得到的差值的绝对值几乎都为42，只有少数例外。将绝对值不是42的提取出来，转成ASCII，得到通关信息——Python作者的姓名*Guido van Rossum*中的<font color=\"red\">guido</font>\n\n<!-- more -->\n\n``` Python\nfrom PIL import Image\nimport numpy as np\n\nim = Image.open('bell.png')\nimdata = list(im.getdata())\nimdata = np.array(imdata)\nsize = im.size\nimdata = imdata.reshape((size[1], size[0], -1))\nimdata_g = imdata[:, :, 1] # Green channel\ndiff = np.abs(imdata_g[:, 0::2] - imdata_g[:, 1::2])\nidx = np.where(diff != 42)\nmsg = diff[idx]\n\nprint ''.join(chr(i) for i in msg)\n\nprint 'Guido van Rossum'.split()[0]\n```\n\n下一关 http://www.pythonchallenge.com/pc/ring/guido.html\n\n*参考*\n- http://blog.sina.com.cn/s/blog_4513dde60101f3mk.html\n","slug":"pc28","published":1,"updated":"2018-06-10T17:05:07.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs8z0018ytk01bdvn68h","content":"<p><a href=\"http://www.pythonchallenge.com/pc/ring/bell.html\" target=\"_blank\" rel=\"noopener\">第28关</a><br>RING-RING-RING，读着读着就变成了GREEN. green.html里提示<strong>yes, green</strong>.</p>\n<p>仔细观察一下图片，发现里面有一条条的绿色竖纹。将图片的Green通道提取出来，相邻的两列像素作差，得到的差值的绝对值几乎都为42，只有少数例外。将绝对值不是42的提取出来，转成ASCII，得到通关信息——Python作者的姓名<em>Guido van Rossum</em>中的<font color=\"red\">guido</font></p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'bell.png'</span>)</span><br><span class=\"line\">imdata = list(im.getdata())</span><br><span class=\"line\">imdata = np.array(imdata)</span><br><span class=\"line\">size = im.size</span><br><span class=\"line\">imdata = imdata.reshape((size[<span class=\"number\">1</span>], size[<span class=\"number\">0</span>], <span class=\"number\">-1</span>))</span><br><span class=\"line\">imdata_g = imdata[:, :, <span class=\"number\">1</span>] <span class=\"comment\"># Green channel</span></span><br><span class=\"line\">diff = np.abs(imdata_g[:, <span class=\"number\">0</span>::<span class=\"number\">2</span>] - imdata_g[:, <span class=\"number\">1</span>::<span class=\"number\">2</span>])</span><br><span class=\"line\">idx = np.where(diff != <span class=\"number\">42</span>)</span><br><span class=\"line\">msg = diff[idx]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(chr(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Guido van Rossum'</span>.split()[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>下一关 <a href=\"http://www.pythonchallenge.com/pc/ring/guido.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/ring/guido.html</a></p>\n<p><em>参考</em></p>\n<ul>\n<li><a href=\"http://blog.sina.com.cn/s/blog_4513dde60101f3mk.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_4513dde60101f3mk.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/ring/bell.html\" target=\"_blank\" rel=\"noopener\">第28关</a><br>RING-RING-RING，读着读着就变成了GREEN. green.html里提示<strong>yes, green</strong>.</p>\n<p>仔细观察一下图片，发现里面有一条条的绿色竖纹。将图片的Green通道提取出来，相邻的两列像素作差，得到的差值的绝对值几乎都为42，只有少数例外。将绝对值不是42的提取出来，转成ASCII，得到通关信息——Python作者的姓名<em>Guido van Rossum</em>中的<font color=\"red\">guido</font></p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'bell.png'</span>)</span><br><span class=\"line\">imdata = list(im.getdata())</span><br><span class=\"line\">imdata = np.array(imdata)</span><br><span class=\"line\">size = im.size</span><br><span class=\"line\">imdata = imdata.reshape((size[<span class=\"number\">1</span>], size[<span class=\"number\">0</span>], <span class=\"number\">-1</span>))</span><br><span class=\"line\">imdata_g = imdata[:, :, <span class=\"number\">1</span>] <span class=\"comment\"># Green channel</span></span><br><span class=\"line\">diff = np.abs(imdata_g[:, <span class=\"number\">0</span>::<span class=\"number\">2</span>] - imdata_g[:, <span class=\"number\">1</span>::<span class=\"number\">2</span>])</span><br><span class=\"line\">idx = np.where(diff != <span class=\"number\">42</span>)</span><br><span class=\"line\">msg = diff[idx]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(chr(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> msg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Guido van Rossum'</span>.split()[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>下一关 <a href=\"http://www.pythonchallenge.com/pc/ring/guido.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/ring/guido.html</a></p>\n<p><em>参考</em></p>\n<ul>\n<li><a href=\"http://blog.sina.com.cn/s/blog_4513dde60101f3mk.html\" target=\"_blank\" rel=\"noopener\">http://blog.sina.com.cn/s/blog_4513dde60101f3mk.html</a></li>\n</ul>"},{"title":"Python Challenge (Level 29)","date":"2015-02-12T13:27:55.000Z","_content":"\n[第29关](http://www.pythonchallenge.com/pc/ring/guido.html)\n\n这一关要写的代码只有寥寥几行，但是很难想到。\n\nPage Source里面好像什么特别的提示都没有。但仔细看下，会发现后面有一大段空白，原来玄机就在这些空白中。把每一行的空格个数转成ASCII码，会发现是以BZ开头的一串字符，照例用bz2解压即可得到通关信息。\n\n<!-- more -->\n\n``` Python\nimport urllib\nimport bz2\n\nhtml = urllib.urlopen('http://repeat:switch@www.pythonchallenge.com/pc/ring/guido.html').read()\nhtml = html.split('\\n')[12 : ]\ndata = [chr(len(i)) for i in html]\nprint bz2.decompress(''.join(data))\n```\n\n通关信息<font color=\"red\">Isn't it clear? I am yankeedoodle!</font>. 不太清楚yankeedoodle是什么东西，也不了解网页标题**silence**意义何在。\n\n下一关：http://www.pythonchallenge.com/pc/ring/yankeedoodle.html\n","source":"_posts/pc29.md","raw":"title: Python Challenge (Level 29)\ndate: 2015-02-12 21:27:55\ntags: [Python]\n---\n\n[第29关](http://www.pythonchallenge.com/pc/ring/guido.html)\n\n这一关要写的代码只有寥寥几行，但是很难想到。\n\nPage Source里面好像什么特别的提示都没有。但仔细看下，会发现后面有一大段空白，原来玄机就在这些空白中。把每一行的空格个数转成ASCII码，会发现是以BZ开头的一串字符，照例用bz2解压即可得到通关信息。\n\n<!-- more -->\n\n``` Python\nimport urllib\nimport bz2\n\nhtml = urllib.urlopen('http://repeat:switch@www.pythonchallenge.com/pc/ring/guido.html').read()\nhtml = html.split('\\n')[12 : ]\ndata = [chr(len(i)) for i in html]\nprint bz2.decompress(''.join(data))\n```\n\n通关信息<font color=\"red\">Isn't it clear? I am yankeedoodle!</font>. 不太清楚yankeedoodle是什么东西，也不了解网页标题**silence**意义何在。\n\n下一关：http://www.pythonchallenge.com/pc/ring/yankeedoodle.html\n","slug":"pc29","published":1,"updated":"2018-06-10T17:05:07.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs91001aytk0nif0mqxp","content":"<p><a href=\"http://www.pythonchallenge.com/pc/ring/guido.html\" target=\"_blank\" rel=\"noopener\">第29关</a></p>\n<p>这一关要写的代码只有寥寥几行，但是很难想到。</p>\n<p>Page Source里面好像什么特别的提示都没有。但仔细看下，会发现后面有一大段空白，原来玄机就在这些空白中。把每一行的空格个数转成ASCII码，会发现是以BZ开头的一串字符，照例用bz2解压即可得到通关信息。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> bz2</span><br><span class=\"line\"></span><br><span class=\"line\">html = urllib.urlopen(<span class=\"string\">'http://repeat:switch@www.pythonchallenge.com/pc/ring/guido.html'</span>).read()</span><br><span class=\"line\">html = html.split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">12</span> : ]</span><br><span class=\"line\">data = [chr(len(i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> html]</span><br><span class=\"line\"><span class=\"keyword\">print</span> bz2.decompress(<span class=\"string\">''</span>.join(data))</span><br></pre></td></tr></table></figure>\n<p>通关信息<font color=\"red\">Isn’t it clear? I am yankeedoodle!</font>. 不太清楚yankeedoodle是什么东西，也不了解网页标题<strong>silence</strong>意义何在。</p>\n<p>下一关：<a href=\"http://www.pythonchallenge.com/pc/ring/yankeedoodle.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/ring/yankeedoodle.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/ring/guido.html\" target=\"_blank\" rel=\"noopener\">第29关</a></p>\n<p>这一关要写的代码只有寥寥几行，但是很难想到。</p>\n<p>Page Source里面好像什么特别的提示都没有。但仔细看下，会发现后面有一大段空白，原来玄机就在这些空白中。把每一行的空格个数转成ASCII码，会发现是以BZ开头的一串字符，照例用bz2解压即可得到通关信息。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> bz2</span><br><span class=\"line\"></span><br><span class=\"line\">html = urllib.urlopen(<span class=\"string\">'http://repeat:switch@www.pythonchallenge.com/pc/ring/guido.html'</span>).read()</span><br><span class=\"line\">html = html.split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">12</span> : ]</span><br><span class=\"line\">data = [chr(len(i)) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> html]</span><br><span class=\"line\"><span class=\"keyword\">print</span> bz2.decompress(<span class=\"string\">''</span>.join(data))</span><br></pre></td></tr></table></figure>\n<p>通关信息<font color=\"red\">Isn’t it clear? I am yankeedoodle!</font>. 不太清楚yankeedoodle是什么东西，也不了解网页标题<strong>silence</strong>意义何在。</p>\n<p>下一关：<a href=\"http://www.pythonchallenge.com/pc/ring/yankeedoodle.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/ring/yankeedoodle.html</a></p>"},{"title":"Python Challenge (Level 30)","date":"2015-02-13T15:08:49.000Z","_content":"\n[第30关](http://www.pythonchallenge.com/pc/ring/yankeedoodle.html)\n\nPage Source里提示找csv文件，很容易就得到[yankeedoodle.csv](http://www.pythonchallenge.com/pc/ring/yankeedoodle.csv)文件。\n\ncsv文件即comma separated values，直接用文本编辑器即可看到里面的内容。\n\nyankeedoodle.csv里面有7367个浮点数，我们把些值当成是图片像素值，把它们放到大小为53*139的图片中，会得到下面的公式。\n\n> n = str(x[i])[5] + str(x[i+1])[5] + str(x[i+2])[6]\n\n接着，按照上面的公式，每三个浮点数一组，分别取第6/6/7位数字，组合得到一个新的数值，再就爱那个数值转为ASCII打印出来。\n例如，三个浮点数分别为0.82207， 0.91181， 0.88563.则分别取一位，得到'0'， '8'， '3'，组合起来就是083，相应的ASCII码为'S'.\n\n<!-- more -->\n\n``` Python\nfrom PIL import Image\nfrom numpy import genfromtxt\n\ndata = genfromtxt('data/yankeedoodle.csv', delimiter=',')\ndata = data[:, :-1]\ndata = data.reshape((-1,))\ndata = data[:-1]\ndata = data.reshape((139, 53)).transpose().reshape((-1,))\n\nim = Image.new('L', (139, 53))\nim.putdata(data*255)\nim.show()\n\ndata = data.reshape((53, 139)).transpose().reshape((-1,))\ndata_str = [\"%.5f\" % i for i in data]\nmsg = []\nfor i in range(0, 7365, 3):\n    msg.append(chr(int(data_str[i][5] + data_str[i+1][5] + data_str[i+2][6])))\n\nprint ''.join(msg)\n```\n得到的信息为\n```\nSo, you found the hidden message.\nThere is lots of room here for a long message, but we only need very little space to say \"look at grandpa\", so the rest is just garbage. \nVTZ.l'tf*Om@I\"p]#R`cWEBZ40ofSC>OZFkRP0\\)\n```\n下一关：http://www.pythonchallenge.com/pc/ring/grandpa.html\n","source":"_posts/pc30.md","raw":"title: Python Challenge (Level 30)\ndate: 2015-02-13 23:08:49\ntags: [Python]\n---\n\n[第30关](http://www.pythonchallenge.com/pc/ring/yankeedoodle.html)\n\nPage Source里提示找csv文件，很容易就得到[yankeedoodle.csv](http://www.pythonchallenge.com/pc/ring/yankeedoodle.csv)文件。\n\ncsv文件即comma separated values，直接用文本编辑器即可看到里面的内容。\n\nyankeedoodle.csv里面有7367个浮点数，我们把些值当成是图片像素值，把它们放到大小为53*139的图片中，会得到下面的公式。\n\n> n = str(x[i])[5] + str(x[i+1])[5] + str(x[i+2])[6]\n\n接着，按照上面的公式，每三个浮点数一组，分别取第6/6/7位数字，组合得到一个新的数值，再就爱那个数值转为ASCII打印出来。\n例如，三个浮点数分别为0.82207， 0.91181， 0.88563.则分别取一位，得到'0'， '8'， '3'，组合起来就是083，相应的ASCII码为'S'.\n\n<!-- more -->\n\n``` Python\nfrom PIL import Image\nfrom numpy import genfromtxt\n\ndata = genfromtxt('data/yankeedoodle.csv', delimiter=',')\ndata = data[:, :-1]\ndata = data.reshape((-1,))\ndata = data[:-1]\ndata = data.reshape((139, 53)).transpose().reshape((-1,))\n\nim = Image.new('L', (139, 53))\nim.putdata(data*255)\nim.show()\n\ndata = data.reshape((53, 139)).transpose().reshape((-1,))\ndata_str = [\"%.5f\" % i for i in data]\nmsg = []\nfor i in range(0, 7365, 3):\n    msg.append(chr(int(data_str[i][5] + data_str[i+1][5] + data_str[i+2][6])))\n\nprint ''.join(msg)\n```\n得到的信息为\n```\nSo, you found the hidden message.\nThere is lots of room here for a long message, but we only need very little space to say \"look at grandpa\", so the rest is just garbage. \nVTZ.l'tf*Om@I\"p]#R`cWEBZ40ofSC>OZFkRP0\\)\n```\n下一关：http://www.pythonchallenge.com/pc/ring/grandpa.html\n","slug":"pc30","published":1,"updated":"2018-06-10T17:05:07.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs93001cytk0rzkg4mi2","content":"<p><a href=\"http://www.pythonchallenge.com/pc/ring/yankeedoodle.html\" target=\"_blank\" rel=\"noopener\">第30关</a></p>\n<p>Page Source里提示找csv文件，很容易就得到<a href=\"http://www.pythonchallenge.com/pc/ring/yankeedoodle.csv\" target=\"_blank\" rel=\"noopener\">yankeedoodle.csv</a>文件。</p>\n<p>csv文件即comma separated values，直接用文本编辑器即可看到里面的内容。</p>\n<p>yankeedoodle.csv里面有7367个浮点数，我们把些值当成是图片像素值，把它们放到大小为53*139的图片中，会得到下面的公式。</p>\n<blockquote>\n<p>n = str(x[i])[5] + str(x[i+1])[5] + str(x[i+2])[6]</p>\n</blockquote>\n<p>接着，按照上面的公式，每三个浮点数一组，分别取第6/6/7位数字，组合得到一个新的数值，再就爱那个数值转为ASCII打印出来。<br>例如，三个浮点数分别为0.82207， 0.91181， 0.88563.则分别取一位，得到’0’， ‘8’， ‘3’，组合起来就是083，相应的ASCII码为’S’.</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> genfromtxt</span><br><span class=\"line\"></span><br><span class=\"line\">data = genfromtxt(<span class=\"string\">'data/yankeedoodle.csv'</span>, delimiter=<span class=\"string\">','</span>)</span><br><span class=\"line\">data = data[:, :<span class=\"number\">-1</span>]</span><br><span class=\"line\">data = data.reshape((<span class=\"number\">-1</span>,))</span><br><span class=\"line\">data = data[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">data = data.reshape((<span class=\"number\">139</span>, <span class=\"number\">53</span>)).transpose().reshape((<span class=\"number\">-1</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.new(<span class=\"string\">'L'</span>, (<span class=\"number\">139</span>, <span class=\"number\">53</span>))</span><br><span class=\"line\">im.putdata(data*<span class=\"number\">255</span>)</span><br><span class=\"line\">im.show()</span><br><span class=\"line\"></span><br><span class=\"line\">data = data.reshape((<span class=\"number\">53</span>, <span class=\"number\">139</span>)).transpose().reshape((<span class=\"number\">-1</span>,))</span><br><span class=\"line\">data_str = [<span class=\"string\">\"%.5f\"</span> % i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data]</span><br><span class=\"line\">msg = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">7365</span>, <span class=\"number\">3</span>):</span><br><span class=\"line\">    msg.append(chr(int(data_str[i][<span class=\"number\">5</span>] + data_str[i+<span class=\"number\">1</span>][<span class=\"number\">5</span>] + data_str[i+<span class=\"number\">2</span>][<span class=\"number\">6</span>])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(msg)</span><br></pre></td></tr></table></figure>\n<p>得到的信息为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">So, you found the hidden message.</span><br><span class=\"line\">There is lots of room here for a long message, but we only need very little space to say &quot;look at grandpa&quot;, so the rest is just garbage. </span><br><span class=\"line\">VTZ.l&apos;tf*Om@I&quot;p]#R`cWEBZ40ofSC&gt;OZFkRP0\\)</span><br></pre></td></tr></table></figure></p>\n<p>下一关：<a href=\"http://www.pythonchallenge.com/pc/ring/grandpa.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/ring/grandpa.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/ring/yankeedoodle.html\" target=\"_blank\" rel=\"noopener\">第30关</a></p>\n<p>Page Source里提示找csv文件，很容易就得到<a href=\"http://www.pythonchallenge.com/pc/ring/yankeedoodle.csv\" target=\"_blank\" rel=\"noopener\">yankeedoodle.csv</a>文件。</p>\n<p>csv文件即comma separated values，直接用文本编辑器即可看到里面的内容。</p>\n<p>yankeedoodle.csv里面有7367个浮点数，我们把些值当成是图片像素值，把它们放到大小为53*139的图片中，会得到下面的公式。</p>\n<blockquote>\n<p>n = str(x[i])[5] + str(x[i+1])[5] + str(x[i+2])[6]</p>\n</blockquote>\n<p>接着，按照上面的公式，每三个浮点数一组，分别取第6/6/7位数字，组合得到一个新的数值，再就爱那个数值转为ASCII打印出来。<br>例如，三个浮点数分别为0.82207， 0.91181， 0.88563.则分别取一位，得到’0’， ‘8’， ‘3’，组合起来就是083，相应的ASCII码为’S’.</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> genfromtxt</span><br><span class=\"line\"></span><br><span class=\"line\">data = genfromtxt(<span class=\"string\">'data/yankeedoodle.csv'</span>, delimiter=<span class=\"string\">','</span>)</span><br><span class=\"line\">data = data[:, :<span class=\"number\">-1</span>]</span><br><span class=\"line\">data = data.reshape((<span class=\"number\">-1</span>,))</span><br><span class=\"line\">data = data[:<span class=\"number\">-1</span>]</span><br><span class=\"line\">data = data.reshape((<span class=\"number\">139</span>, <span class=\"number\">53</span>)).transpose().reshape((<span class=\"number\">-1</span>,))</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.new(<span class=\"string\">'L'</span>, (<span class=\"number\">139</span>, <span class=\"number\">53</span>))</span><br><span class=\"line\">im.putdata(data*<span class=\"number\">255</span>)</span><br><span class=\"line\">im.show()</span><br><span class=\"line\"></span><br><span class=\"line\">data = data.reshape((<span class=\"number\">53</span>, <span class=\"number\">139</span>)).transpose().reshape((<span class=\"number\">-1</span>,))</span><br><span class=\"line\">data_str = [<span class=\"string\">\"%.5f\"</span> % i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data]</span><br><span class=\"line\">msg = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">7365</span>, <span class=\"number\">3</span>):</span><br><span class=\"line\">    msg.append(chr(int(data_str[i][<span class=\"number\">5</span>] + data_str[i+<span class=\"number\">1</span>][<span class=\"number\">5</span>] + data_str[i+<span class=\"number\">2</span>][<span class=\"number\">6</span>])))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(msg)</span><br></pre></td></tr></table></figure>\n<p>得到的信息为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">So, you found the hidden message.</span><br><span class=\"line\">There is lots of room here for a long message, but we only need very little space to say &quot;look at grandpa&quot;, so the rest is just garbage. </span><br><span class=\"line\">VTZ.l&apos;tf*Om@I&quot;p]#R`cWEBZ40ofSC&gt;OZFkRP0\\)</span><br></pre></td></tr></table></figure></p>\n<p>下一关：<a href=\"http://www.pythonchallenge.com/pc/ring/grandpa.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/ring/grandpa.html</a></p>"},{"title":"Python Challenge (Level 32)","date":"2015-02-17T13:25:54.000Z","_content":"\n[第32关](http://www.pythonchallenge.com/pc/rock/arecibo.html)\n\n这一关卡了好几天，现在还没解决好。为了能在过年前写完所有的关卡，打算先把解题思路弄下来，春节后再完善。\n\n这一关是关于一个叫[Nonogram](http://en.wikipedia.org/wiki/Nonogram)的游戏。大概就是根据每一行每一列的数字来填格子，行列都符合的图案就是要求的答案。改变格子图案，再看看相应的行列的数字变换，大概就能知道这种游戏的玩法了。\n\n<!-- more -->\n\n根据Page Source里的提示，得到一个[warmup.txt](http://www.pythonchallenge.com/pc/rock/warmup.txt).根据这个warmup.txt解出来的的图案是一个向上的箭头。因此我们找到[这个页面](http://www.pythonchallenge.com/pc/rock/up.html)。\n\n接着，我们得到一个更复杂的[up.txt](http://www.pythonchallenge.com/pc/rock/up.txt).根据这个[攻略](http://blog.sina.com.cn/s/blog_4513dde60101fb2y.html)，up.txt解得的图像是一条蛇，python.html.\n\n新页面上有以下内容\n> Congrats! You made it through to the smiling python.\n> \"Free\" as in \"Free speech\", not as in \"free...\n\nBing搜一下，找到[这个页面](http://article.yeeyan.org/view/129288/143966)，通关密码是beer. http://www.pythonchallenge.com/pc/rock/beer.html\n\n下面是我用backtracking做的一个解。可以解出较小的图案，比如warmup.txt(LEN=8)。对于较大的，比如up.txt(LEN=32)，就无能为力了。我看了下，主要问题应该是产生candidates并把它们入栈是一次性完成的，会比较慢，占的内存又多。解决方法是入栈一个迭代器而不是所有candidates，每次next得到一个candidate.这个过完年再做。\n\n``` Python\n# -*- coding:utf-8 -*-\n__author__ = 'chen'\n\nfrom pprint import pprint\nimport numpy as np\nimport itertools\n\ndef readClue(loc_file):\n    with open(loc_file, 'rb') as handle:\n        data = list(handle)\n    data = filter(lambda l: l[0] != '#' and l.strip(), data)\n    data.pop(0)\n    data = [i.strip().split() for i in data]\n    for i in range(len(data)):\n        data[i] = [int(item) for item in data[i]]\n    clues = {}\n    clues['row'] = data[ : len(data) / 2 ]\n    clues['col'] = data[len(data) / 2 :]\n    return clues\n\ndef getClue(clues, idx):\n    if idx % 2 == 0:\n        return clues['col'][idx // 2]\n    else:\n        return clues['row'][(idx - 1) // 2]\n\ndef getMask(picMat, idx):\n    if idx % 2 == 0:\n        ret = picMat[:, idx // 2]\n    else:\n        ret = picMat[(idx - 1) //2, :]\n    ret = [str(i) for i in ret]\n    return ''.join(ret)\n\ndef candidate(picMat, clue, idx, LEN):\n    freeNum = LEN - (sum(clue) + len(clue) - 1)\n    if freeNum < 0:\n        return -1\n    p = freeNum * ['0'] + len(clue) * ['#']\n    options = set(list(itertools.permutations(p, len(p))))\n    options = [''.join(i).split('#') for i in options]\n    patterns = []\n    for op in options:\n        patt = ''\n        for i in range(len(clue)):\n            patt += op[i] + '1'*clue[i] + '0'\n        patt = patt[:-1]  #除去最后一个0\n        patt += op[-1]\n        if check(idx, patt, picMat):\n            patterns.append(patt)\n    return patterns\n\ndef check(idx, patt, picMat):\n    if idx % 2 == 0:\n        idx = idx // 2\n        restrict = picMat[:idx, idx]\n    else:\n        idx = (idx - 1) // 2\n        restrict = picMat[idx, :idx+1]\n    restrict = [str(i) for i in restrict]\n    restrict = ''.join(restrict)\n    return patt[:len(restrict)] == restrict\n\ndef resetMat(picMat, idx):\n    if idx % 2 == 0:\n        picMat[:, idx // 2] = 0\n    else:\n        picMat[(idx - 1) // 2, :] = 0\n\ndef fillMat(picMat, idx, patt):\n    patt = [int(i) for i in patt]\n    if idx % 2 == 0:\n        picMat[:, idx // 2] = patt\n    else:\n        picMat[(idx - 1) // 2, :] = patt\n\ndef solve():\n    LEN = 9\n    clues = readClue('data/warmup.txt')\n    picMat = np.zeros((LEN, LEN), dtype=np.int8)\n    patt_l = []\n    patt_l.append(candidate(picMat, getClue(clues, 0), 0, LEN))\n    while patt_l and len(patt_l) != 2*LEN:\n        curIdx = len(patt_l) - 1\n        print curIdx\n        if len(patt_l[curIdx]) <= 0:\n            # resetMat(picMat, curIdx)\n            # print picMat\n            patt_l.pop(curIdx)\n            continue\n        else:\n            patt = patt_l[curIdx].pop(0)\n            fillMat(picMat, curIdx, patt)\n            # print picMat\n            nextCandidates = candidate(picMat, getClue(clues, curIdx+1), curIdx+1, LEN)\n            if nextCandidates != -1 and nextCandidates:\n                patt_l.append(nextCandidates)\n    return picMat\n\nif __name__ == \"__main__\" : print(solve())\n```\n","source":"_posts/pc32.md","raw":"title: Python Challenge (Level 32)\ndate: 2015-02-17 21:25:54\ntags: [Python]\n---\n\n[第32关](http://www.pythonchallenge.com/pc/rock/arecibo.html)\n\n这一关卡了好几天，现在还没解决好。为了能在过年前写完所有的关卡，打算先把解题思路弄下来，春节后再完善。\n\n这一关是关于一个叫[Nonogram](http://en.wikipedia.org/wiki/Nonogram)的游戏。大概就是根据每一行每一列的数字来填格子，行列都符合的图案就是要求的答案。改变格子图案，再看看相应的行列的数字变换，大概就能知道这种游戏的玩法了。\n\n<!-- more -->\n\n根据Page Source里的提示，得到一个[warmup.txt](http://www.pythonchallenge.com/pc/rock/warmup.txt).根据这个warmup.txt解出来的的图案是一个向上的箭头。因此我们找到[这个页面](http://www.pythonchallenge.com/pc/rock/up.html)。\n\n接着，我们得到一个更复杂的[up.txt](http://www.pythonchallenge.com/pc/rock/up.txt).根据这个[攻略](http://blog.sina.com.cn/s/blog_4513dde60101fb2y.html)，up.txt解得的图像是一条蛇，python.html.\n\n新页面上有以下内容\n> Congrats! You made it through to the smiling python.\n> \"Free\" as in \"Free speech\", not as in \"free...\n\nBing搜一下，找到[这个页面](http://article.yeeyan.org/view/129288/143966)，通关密码是beer. http://www.pythonchallenge.com/pc/rock/beer.html\n\n下面是我用backtracking做的一个解。可以解出较小的图案，比如warmup.txt(LEN=8)。对于较大的，比如up.txt(LEN=32)，就无能为力了。我看了下，主要问题应该是产生candidates并把它们入栈是一次性完成的，会比较慢，占的内存又多。解决方法是入栈一个迭代器而不是所有candidates，每次next得到一个candidate.这个过完年再做。\n\n``` Python\n# -*- coding:utf-8 -*-\n__author__ = 'chen'\n\nfrom pprint import pprint\nimport numpy as np\nimport itertools\n\ndef readClue(loc_file):\n    with open(loc_file, 'rb') as handle:\n        data = list(handle)\n    data = filter(lambda l: l[0] != '#' and l.strip(), data)\n    data.pop(0)\n    data = [i.strip().split() for i in data]\n    for i in range(len(data)):\n        data[i] = [int(item) for item in data[i]]\n    clues = {}\n    clues['row'] = data[ : len(data) / 2 ]\n    clues['col'] = data[len(data) / 2 :]\n    return clues\n\ndef getClue(clues, idx):\n    if idx % 2 == 0:\n        return clues['col'][idx // 2]\n    else:\n        return clues['row'][(idx - 1) // 2]\n\ndef getMask(picMat, idx):\n    if idx % 2 == 0:\n        ret = picMat[:, idx // 2]\n    else:\n        ret = picMat[(idx - 1) //2, :]\n    ret = [str(i) for i in ret]\n    return ''.join(ret)\n\ndef candidate(picMat, clue, idx, LEN):\n    freeNum = LEN - (sum(clue) + len(clue) - 1)\n    if freeNum < 0:\n        return -1\n    p = freeNum * ['0'] + len(clue) * ['#']\n    options = set(list(itertools.permutations(p, len(p))))\n    options = [''.join(i).split('#') for i in options]\n    patterns = []\n    for op in options:\n        patt = ''\n        for i in range(len(clue)):\n            patt += op[i] + '1'*clue[i] + '0'\n        patt = patt[:-1]  #除去最后一个0\n        patt += op[-1]\n        if check(idx, patt, picMat):\n            patterns.append(patt)\n    return patterns\n\ndef check(idx, patt, picMat):\n    if idx % 2 == 0:\n        idx = idx // 2\n        restrict = picMat[:idx, idx]\n    else:\n        idx = (idx - 1) // 2\n        restrict = picMat[idx, :idx+1]\n    restrict = [str(i) for i in restrict]\n    restrict = ''.join(restrict)\n    return patt[:len(restrict)] == restrict\n\ndef resetMat(picMat, idx):\n    if idx % 2 == 0:\n        picMat[:, idx // 2] = 0\n    else:\n        picMat[(idx - 1) // 2, :] = 0\n\ndef fillMat(picMat, idx, patt):\n    patt = [int(i) for i in patt]\n    if idx % 2 == 0:\n        picMat[:, idx // 2] = patt\n    else:\n        picMat[(idx - 1) // 2, :] = patt\n\ndef solve():\n    LEN = 9\n    clues = readClue('data/warmup.txt')\n    picMat = np.zeros((LEN, LEN), dtype=np.int8)\n    patt_l = []\n    patt_l.append(candidate(picMat, getClue(clues, 0), 0, LEN))\n    while patt_l and len(patt_l) != 2*LEN:\n        curIdx = len(patt_l) - 1\n        print curIdx\n        if len(patt_l[curIdx]) <= 0:\n            # resetMat(picMat, curIdx)\n            # print picMat\n            patt_l.pop(curIdx)\n            continue\n        else:\n            patt = patt_l[curIdx].pop(0)\n            fillMat(picMat, curIdx, patt)\n            # print picMat\n            nextCandidates = candidate(picMat, getClue(clues, curIdx+1), curIdx+1, LEN)\n            if nextCandidates != -1 and nextCandidates:\n                patt_l.append(nextCandidates)\n    return picMat\n\nif __name__ == \"__main__\" : print(solve())\n```\n","slug":"pc32","published":1,"updated":"2018-06-10T17:05:07.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs95001eytk0osxykhzf","content":"<p><a href=\"http://www.pythonchallenge.com/pc/rock/arecibo.html\" target=\"_blank\" rel=\"noopener\">第32关</a></p>\n<p>这一关卡了好几天，现在还没解决好。为了能在过年前写完所有的关卡，打算先把解题思路弄下来，春节后再完善。</p>\n<p>这一关是关于一个叫<a href=\"http://en.wikipedia.org/wiki/Nonogram\" target=\"_blank\" rel=\"noopener\">Nonogram</a>的游戏。大概就是根据每一行每一列的数字来填格子，行列都符合的图案就是要求的答案。改变格子图案，再看看相应的行列的数字变换，大概就能知道这种游戏的玩法了。</p>\n<a id=\"more\"></a>\n<p>根据Page Source里的提示，得到一个<a href=\"http://www.pythonchallenge.com/pc/rock/warmup.txt\" target=\"_blank\" rel=\"noopener\">warmup.txt</a>.根据这个warmup.txt解出来的的图案是一个向上的箭头。因此我们找到<a href=\"http://www.pythonchallenge.com/pc/rock/up.html\" target=\"_blank\" rel=\"noopener\">这个页面</a>。</p>\n<p>接着，我们得到一个更复杂的<a href=\"http://www.pythonchallenge.com/pc/rock/up.txt\" target=\"_blank\" rel=\"noopener\">up.txt</a>.根据这个<a href=\"http://blog.sina.com.cn/s/blog_4513dde60101fb2y.html\" target=\"_blank\" rel=\"noopener\">攻略</a>，up.txt解得的图像是一条蛇，python.html.</p>\n<p>新页面上有以下内容</p>\n<blockquote>\n<p>Congrats! You made it through to the smiling python.<br>“Free” as in “Free speech”, not as in “free…</p>\n</blockquote>\n<p>Bing搜一下，找到<a href=\"http://article.yeeyan.org/view/129288/143966\" target=\"_blank\" rel=\"noopener\">这个页面</a>，通关密码是beer. <a href=\"http://www.pythonchallenge.com/pc/rock/beer.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/rock/beer.html</a></p>\n<p>下面是我用backtracking做的一个解。可以解出较小的图案，比如warmup.txt(LEN=8)。对于较大的，比如up.txt(LEN=32)，就无能为力了。我看了下，主要问题应该是产生candidates并把它们入栈是一次性完成的，会比较慢，占的内存又多。解决方法是入栈一个迭代器而不是所有candidates，每次next得到一个candidate.这个过完年再做。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\">__author__ = <span class=\"string\">'chen'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readClue</span><span class=\"params\">(loc_file)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(loc_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> handle:</span><br><span class=\"line\">        data = list(handle)</span><br><span class=\"line\">    data = filter(<span class=\"keyword\">lambda</span> l: l[<span class=\"number\">0</span>] != <span class=\"string\">'#'</span> <span class=\"keyword\">and</span> l.strip(), data)</span><br><span class=\"line\">    data.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    data = [i.strip().split() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(data)):</span><br><span class=\"line\">        data[i] = [int(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data[i]]</span><br><span class=\"line\">    clues = &#123;&#125;</span><br><span class=\"line\">    clues[<span class=\"string\">'row'</span>] = data[ : len(data) / <span class=\"number\">2</span> ]</span><br><span class=\"line\">    clues[<span class=\"string\">'col'</span>] = data[len(data) / <span class=\"number\">2</span> :]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clues</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getClue</span><span class=\"params\">(clues, idx)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clues[<span class=\"string\">'col'</span>][idx // <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clues[<span class=\"string\">'row'</span>][(idx - <span class=\"number\">1</span>) // <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMask</span><span class=\"params\">(picMat, idx)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        ret = picMat[:, idx // <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ret = picMat[(idx - <span class=\"number\">1</span>) //<span class=\"number\">2</span>, :]</span><br><span class=\"line\">    ret = [str(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ret]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(ret)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">candidate</span><span class=\"params\">(picMat, clue, idx, LEN)</span>:</span></span><br><span class=\"line\">    freeNum = LEN - (sum(clue) + len(clue) - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> freeNum &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    p = freeNum * [<span class=\"string\">'0'</span>] + len(clue) * [<span class=\"string\">'#'</span>]</span><br><span class=\"line\">    options = set(list(itertools.permutations(p, len(p))))</span><br><span class=\"line\">    options = [<span class=\"string\">''</span>.join(i).split(<span class=\"string\">'#'</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> options]</span><br><span class=\"line\">    patterns = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> op <span class=\"keyword\">in</span> options:</span><br><span class=\"line\">        patt = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(clue)):</span><br><span class=\"line\">            patt += op[i] + <span class=\"string\">'1'</span>*clue[i] + <span class=\"string\">'0'</span></span><br><span class=\"line\">        patt = patt[:<span class=\"number\">-1</span>]  <span class=\"comment\">#除去最后一个0</span></span><br><span class=\"line\">        patt += op[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> check(idx, patt, picMat):</span><br><span class=\"line\">            patterns.append(patt)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> patterns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(idx, patt, picMat)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        idx = idx // <span class=\"number\">2</span></span><br><span class=\"line\">        restrict = picMat[:idx, idx]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        idx = (idx - <span class=\"number\">1</span>) // <span class=\"number\">2</span></span><br><span class=\"line\">        restrict = picMat[idx, :idx+<span class=\"number\">1</span>]</span><br><span class=\"line\">    restrict = [str(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> restrict]</span><br><span class=\"line\">    restrict = <span class=\"string\">''</span>.join(restrict)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> patt[:len(restrict)] == restrict</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resetMat</span><span class=\"params\">(picMat, idx)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        picMat[:, idx // <span class=\"number\">2</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        picMat[(idx - <span class=\"number\">1</span>) // <span class=\"number\">2</span>, :] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillMat</span><span class=\"params\">(picMat, idx, patt)</span>:</span></span><br><span class=\"line\">    patt = [int(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> patt]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        picMat[:, idx // <span class=\"number\">2</span>] = patt</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        picMat[(idx - <span class=\"number\">1</span>) // <span class=\"number\">2</span>, :] = patt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    LEN = <span class=\"number\">9</span></span><br><span class=\"line\">    clues = readClue(<span class=\"string\">'data/warmup.txt'</span>)</span><br><span class=\"line\">    picMat = np.zeros((LEN, LEN), dtype=np.int8)</span><br><span class=\"line\">    patt_l = []</span><br><span class=\"line\">    patt_l.append(candidate(picMat, getClue(clues, <span class=\"number\">0</span>), <span class=\"number\">0</span>, LEN))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> patt_l <span class=\"keyword\">and</span> len(patt_l) != <span class=\"number\">2</span>*LEN:</span><br><span class=\"line\">        curIdx = len(patt_l) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> curIdx</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(patt_l[curIdx]) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># resetMat(picMat, curIdx)</span></span><br><span class=\"line\">            <span class=\"comment\"># print picMat</span></span><br><span class=\"line\">            patt_l.pop(curIdx)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            patt = patt_l[curIdx].pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            fillMat(picMat, curIdx, patt)</span><br><span class=\"line\">            <span class=\"comment\"># print picMat</span></span><br><span class=\"line\">            nextCandidates = candidate(picMat, getClue(clues, curIdx+<span class=\"number\">1</span>), curIdx+<span class=\"number\">1</span>, LEN)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nextCandidates != <span class=\"number\">-1</span> <span class=\"keyword\">and</span> nextCandidates:</span><br><span class=\"line\">                patt_l.append(nextCandidates)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> picMat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : print(solve())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/rock/arecibo.html\" target=\"_blank\" rel=\"noopener\">第32关</a></p>\n<p>这一关卡了好几天，现在还没解决好。为了能在过年前写完所有的关卡，打算先把解题思路弄下来，春节后再完善。</p>\n<p>这一关是关于一个叫<a href=\"http://en.wikipedia.org/wiki/Nonogram\" target=\"_blank\" rel=\"noopener\">Nonogram</a>的游戏。大概就是根据每一行每一列的数字来填格子，行列都符合的图案就是要求的答案。改变格子图案，再看看相应的行列的数字变换，大概就能知道这种游戏的玩法了。</p>","more":"<p>根据Page Source里的提示，得到一个<a href=\"http://www.pythonchallenge.com/pc/rock/warmup.txt\" target=\"_blank\" rel=\"noopener\">warmup.txt</a>.根据这个warmup.txt解出来的的图案是一个向上的箭头。因此我们找到<a href=\"http://www.pythonchallenge.com/pc/rock/up.html\" target=\"_blank\" rel=\"noopener\">这个页面</a>。</p>\n<p>接着，我们得到一个更复杂的<a href=\"http://www.pythonchallenge.com/pc/rock/up.txt\" target=\"_blank\" rel=\"noopener\">up.txt</a>.根据这个<a href=\"http://blog.sina.com.cn/s/blog_4513dde60101fb2y.html\" target=\"_blank\" rel=\"noopener\">攻略</a>，up.txt解得的图像是一条蛇，python.html.</p>\n<p>新页面上有以下内容</p>\n<blockquote>\n<p>Congrats! You made it through to the smiling python.<br>“Free” as in “Free speech”, not as in “free…</p>\n</blockquote>\n<p>Bing搜一下，找到<a href=\"http://article.yeeyan.org/view/129288/143966\" target=\"_blank\" rel=\"noopener\">这个页面</a>，通关密码是beer. <a href=\"http://www.pythonchallenge.com/pc/rock/beer.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/rock/beer.html</a></p>\n<p>下面是我用backtracking做的一个解。可以解出较小的图案，比如warmup.txt(LEN=8)。对于较大的，比如up.txt(LEN=32)，就无能为力了。我看了下，主要问题应该是产生candidates并把它们入栈是一次性完成的，会比较慢，占的内存又多。解决方法是入栈一个迭代器而不是所有candidates，每次next得到一个candidate.这个过完年再做。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\">__author__ = <span class=\"string\">'chen'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readClue</span><span class=\"params\">(loc_file)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(loc_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> handle:</span><br><span class=\"line\">        data = list(handle)</span><br><span class=\"line\">    data = filter(<span class=\"keyword\">lambda</span> l: l[<span class=\"number\">0</span>] != <span class=\"string\">'#'</span> <span class=\"keyword\">and</span> l.strip(), data)</span><br><span class=\"line\">    data.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    data = [i.strip().split() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(data)):</span><br><span class=\"line\">        data[i] = [int(item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data[i]]</span><br><span class=\"line\">    clues = &#123;&#125;</span><br><span class=\"line\">    clues[<span class=\"string\">'row'</span>] = data[ : len(data) / <span class=\"number\">2</span> ]</span><br><span class=\"line\">    clues[<span class=\"string\">'col'</span>] = data[len(data) / <span class=\"number\">2</span> :]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clues</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getClue</span><span class=\"params\">(clues, idx)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clues[<span class=\"string\">'col'</span>][idx // <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clues[<span class=\"string\">'row'</span>][(idx - <span class=\"number\">1</span>) // <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMask</span><span class=\"params\">(picMat, idx)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        ret = picMat[:, idx // <span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ret = picMat[(idx - <span class=\"number\">1</span>) //<span class=\"number\">2</span>, :]</span><br><span class=\"line\">    ret = [str(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ret]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(ret)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">candidate</span><span class=\"params\">(picMat, clue, idx, LEN)</span>:</span></span><br><span class=\"line\">    freeNum = LEN - (sum(clue) + len(clue) - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> freeNum &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    p = freeNum * [<span class=\"string\">'0'</span>] + len(clue) * [<span class=\"string\">'#'</span>]</span><br><span class=\"line\">    options = set(list(itertools.permutations(p, len(p))))</span><br><span class=\"line\">    options = [<span class=\"string\">''</span>.join(i).split(<span class=\"string\">'#'</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> options]</span><br><span class=\"line\">    patterns = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> op <span class=\"keyword\">in</span> options:</span><br><span class=\"line\">        patt = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(clue)):</span><br><span class=\"line\">            patt += op[i] + <span class=\"string\">'1'</span>*clue[i] + <span class=\"string\">'0'</span></span><br><span class=\"line\">        patt = patt[:<span class=\"number\">-1</span>]  <span class=\"comment\">#除去最后一个0</span></span><br><span class=\"line\">        patt += op[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> check(idx, patt, picMat):</span><br><span class=\"line\">            patterns.append(patt)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> patterns</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(idx, patt, picMat)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        idx = idx // <span class=\"number\">2</span></span><br><span class=\"line\">        restrict = picMat[:idx, idx]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        idx = (idx - <span class=\"number\">1</span>) // <span class=\"number\">2</span></span><br><span class=\"line\">        restrict = picMat[idx, :idx+<span class=\"number\">1</span>]</span><br><span class=\"line\">    restrict = [str(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> restrict]</span><br><span class=\"line\">    restrict = <span class=\"string\">''</span>.join(restrict)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> patt[:len(restrict)] == restrict</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resetMat</span><span class=\"params\">(picMat, idx)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        picMat[:, idx // <span class=\"number\">2</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        picMat[(idx - <span class=\"number\">1</span>) // <span class=\"number\">2</span>, :] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillMat</span><span class=\"params\">(picMat, idx, patt)</span>:</span></span><br><span class=\"line\">    patt = [int(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> patt]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> idx % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        picMat[:, idx // <span class=\"number\">2</span>] = patt</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        picMat[(idx - <span class=\"number\">1</span>) // <span class=\"number\">2</span>, :] = patt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    LEN = <span class=\"number\">9</span></span><br><span class=\"line\">    clues = readClue(<span class=\"string\">'data/warmup.txt'</span>)</span><br><span class=\"line\">    picMat = np.zeros((LEN, LEN), dtype=np.int8)</span><br><span class=\"line\">    patt_l = []</span><br><span class=\"line\">    patt_l.append(candidate(picMat, getClue(clues, <span class=\"number\">0</span>), <span class=\"number\">0</span>, LEN))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> patt_l <span class=\"keyword\">and</span> len(patt_l) != <span class=\"number\">2</span>*LEN:</span><br><span class=\"line\">        curIdx = len(patt_l) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> curIdx</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(patt_l[curIdx]) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># resetMat(picMat, curIdx)</span></span><br><span class=\"line\">            <span class=\"comment\"># print picMat</span></span><br><span class=\"line\">            patt_l.pop(curIdx)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            patt = patt_l[curIdx].pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            fillMat(picMat, curIdx, patt)</span><br><span class=\"line\">            <span class=\"comment\"># print picMat</span></span><br><span class=\"line\">            nextCandidates = candidate(picMat, getClue(clues, curIdx+<span class=\"number\">1</span>), curIdx+<span class=\"number\">1</span>, LEN)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nextCandidates != <span class=\"number\">-1</span> <span class=\"keyword\">and</span> nextCandidates:</span><br><span class=\"line\">                patt_l.append(nextCandidates)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> picMat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : print(solve())</span><br></pre></td></tr></table></figure>"},{"title":"Python Challenge (Level 31)","date":"2015-02-14T15:09:39.000Z","_content":"\n[第31关](http://www.pythonchallenge.com/pc/ring/grandpa.html)\n\n先查出这个石头是什么地方。攻略上给出的是用户名kohsamui，密码thailand，跳到下一个页面。\nhttp://www.pythonchallenge.com/pc/rock/grandpa.html\n\n图片是曼德布罗特集合，具体可以看[这里](https://msdn.microsoft.com/zh-cn/library/ie/jj635753%28v=vs.85%29)，解释得挺清楚的。\n\n过关的主要步骤是按照Page Source里面的参数，画出一张曼德布罗特集合的图。比较自己画出的图和网页上的那张图的不同之处。将会看到，大体上是一样的，有少许像素点差值为16，-16.把这些点收集起来，会组成另一张图片，该图片详情参考[Arecibo message 维基百科](http://en.wikipedia.org/wiki/Arecibo_message)，上面有很详细的解释。\n\n<!-- more -->\n\n``` Python\nfrom PIL import Image\nimport numpy as np\n\ndef mapIdx(c, maxIter=128):\n    z = 0\n    for k in range(maxIter):\n        z = z * z + c\n        if np.abs(z) > 2:\n            break\n    return k\n\ndef solve():\n    left = 0.34\n    bottom = 0.57\n    width = 0.036\n    height = 0.027\n\n    im = Image.open('data/mandelbrot.gif')\n    imdata = np.array(list(im.getdata()))\n    im_w, im_h = im.size\n    dw = width / im_w\n    dh = height / im_h\n    xx = np.linspace(left, left+width-dw, im_w)\n    yy = np.linspace(bottom, bottom+height-dh, im_h)\n    yy = yy[::-1]\n    xx.shape = (1, im_w)\n    yy.shape = (im_h, 1)\n    grids = xx + 1j * yy\n\n    for i in range(im_h):\n        for j in range(im_w):\n            grids[i, j] = mapIdx(grids[i, j])\n\n    im.putdata(grids.reshape((-1,)))\n    im.show()\n\n    imdata.shape = (480, 640)\n    diffs = imdata - grids\n    msg = diffs[np.where(np.abs(diffs) == 16)]\n    newIm = Image.new('1', [23, 73])\n    newIm.putdata([i < 0 for i in msg])\n    newIm.save('level31_Out.png')\n\nif __name__ == \"__main__\" : solve()\n```\n代码要跑一阵子，主要是把每个复数映射为相应的idx耗时较长。\n\n下一关：arecibo http://www.pythonchallenge.com/pc/rock/arecibo.html\n","source":"_posts/pc31.md","raw":"title: Python Challenge (Level 31)\ndate: 2015-02-14 23:09:39\ntags: [Python]\n---\n\n[第31关](http://www.pythonchallenge.com/pc/ring/grandpa.html)\n\n先查出这个石头是什么地方。攻略上给出的是用户名kohsamui，密码thailand，跳到下一个页面。\nhttp://www.pythonchallenge.com/pc/rock/grandpa.html\n\n图片是曼德布罗特集合，具体可以看[这里](https://msdn.microsoft.com/zh-cn/library/ie/jj635753%28v=vs.85%29)，解释得挺清楚的。\n\n过关的主要步骤是按照Page Source里面的参数，画出一张曼德布罗特集合的图。比较自己画出的图和网页上的那张图的不同之处。将会看到，大体上是一样的，有少许像素点差值为16，-16.把这些点收集起来，会组成另一张图片，该图片详情参考[Arecibo message 维基百科](http://en.wikipedia.org/wiki/Arecibo_message)，上面有很详细的解释。\n\n<!-- more -->\n\n``` Python\nfrom PIL import Image\nimport numpy as np\n\ndef mapIdx(c, maxIter=128):\n    z = 0\n    for k in range(maxIter):\n        z = z * z + c\n        if np.abs(z) > 2:\n            break\n    return k\n\ndef solve():\n    left = 0.34\n    bottom = 0.57\n    width = 0.036\n    height = 0.027\n\n    im = Image.open('data/mandelbrot.gif')\n    imdata = np.array(list(im.getdata()))\n    im_w, im_h = im.size\n    dw = width / im_w\n    dh = height / im_h\n    xx = np.linspace(left, left+width-dw, im_w)\n    yy = np.linspace(bottom, bottom+height-dh, im_h)\n    yy = yy[::-1]\n    xx.shape = (1, im_w)\n    yy.shape = (im_h, 1)\n    grids = xx + 1j * yy\n\n    for i in range(im_h):\n        for j in range(im_w):\n            grids[i, j] = mapIdx(grids[i, j])\n\n    im.putdata(grids.reshape((-1,)))\n    im.show()\n\n    imdata.shape = (480, 640)\n    diffs = imdata - grids\n    msg = diffs[np.where(np.abs(diffs) == 16)]\n    newIm = Image.new('1', [23, 73])\n    newIm.putdata([i < 0 for i in msg])\n    newIm.save('level31_Out.png')\n\nif __name__ == \"__main__\" : solve()\n```\n代码要跑一阵子，主要是把每个复数映射为相应的idx耗时较长。\n\n下一关：arecibo http://www.pythonchallenge.com/pc/rock/arecibo.html\n","slug":"pc31","published":1,"updated":"2018-06-10T17:05:07.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs96001gytk05azi4827","content":"<p><a href=\"http://www.pythonchallenge.com/pc/ring/grandpa.html\" target=\"_blank\" rel=\"noopener\">第31关</a></p>\n<p>先查出这个石头是什么地方。攻略上给出的是用户名kohsamui，密码thailand，跳到下一个页面。<br><a href=\"http://www.pythonchallenge.com/pc/rock/grandpa.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/rock/grandpa.html</a></p>\n<p>图片是曼德布罗特集合，具体可以看<a href=\"https://msdn.microsoft.com/zh-cn/library/ie/jj635753%28v=vs.85%29\" target=\"_blank\" rel=\"noopener\">这里</a>，解释得挺清楚的。</p>\n<p>过关的主要步骤是按照Page Source里面的参数，画出一张曼德布罗特集合的图。比较自己画出的图和网页上的那张图的不同之处。将会看到，大体上是一样的，有少许像素点差值为16，-16.把这些点收集起来，会组成另一张图片，该图片详情参考<a href=\"http://en.wikipedia.org/wiki/Arecibo_message\" target=\"_blank\" rel=\"noopener\">Arecibo message 维基百科</a>，上面有很详细的解释。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapIdx</span><span class=\"params\">(c, maxIter=<span class=\"number\">128</span>)</span>:</span></span><br><span class=\"line\">    z = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(maxIter):</span><br><span class=\"line\">        z = z * z + c</span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.abs(z) &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    left = <span class=\"number\">0.34</span></span><br><span class=\"line\">    bottom = <span class=\"number\">0.57</span></span><br><span class=\"line\">    width = <span class=\"number\">0.036</span></span><br><span class=\"line\">    height = <span class=\"number\">0.027</span></span><br><span class=\"line\"></span><br><span class=\"line\">    im = Image.open(<span class=\"string\">'data/mandelbrot.gif'</span>)</span><br><span class=\"line\">    imdata = np.array(list(im.getdata()))</span><br><span class=\"line\">    im_w, im_h = im.size</span><br><span class=\"line\">    dw = width / im_w</span><br><span class=\"line\">    dh = height / im_h</span><br><span class=\"line\">    xx = np.linspace(left, left+width-dw, im_w)</span><br><span class=\"line\">    yy = np.linspace(bottom, bottom+height-dh, im_h)</span><br><span class=\"line\">    yy = yy[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">    xx.shape = (<span class=\"number\">1</span>, im_w)</span><br><span class=\"line\">    yy.shape = (im_h, <span class=\"number\">1</span>)</span><br><span class=\"line\">    grids = xx + <span class=\"number\">1j</span> * yy</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(im_h):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(im_w):</span><br><span class=\"line\">            grids[i, j] = mapIdx(grids[i, j])</span><br><span class=\"line\"></span><br><span class=\"line\">    im.putdata(grids.reshape((<span class=\"number\">-1</span>,)))</span><br><span class=\"line\">    im.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    imdata.shape = (<span class=\"number\">480</span>, <span class=\"number\">640</span>)</span><br><span class=\"line\">    diffs = imdata - grids</span><br><span class=\"line\">    msg = diffs[np.where(np.abs(diffs) == <span class=\"number\">16</span>)]</span><br><span class=\"line\">    newIm = Image.new(<span class=\"string\">'1'</span>, [<span class=\"number\">23</span>, <span class=\"number\">73</span>])</span><br><span class=\"line\">    newIm.putdata([i &lt; <span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> msg])</span><br><span class=\"line\">    newIm.save(<span class=\"string\">'level31_Out.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : solve()</span><br></pre></td></tr></table></figure>\n<p>代码要跑一阵子，主要是把每个复数映射为相应的idx耗时较长。</p>\n<p>下一关：arecibo <a href=\"http://www.pythonchallenge.com/pc/rock/arecibo.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/rock/arecibo.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/ring/grandpa.html\" target=\"_blank\" rel=\"noopener\">第31关</a></p>\n<p>先查出这个石头是什么地方。攻略上给出的是用户名kohsamui，密码thailand，跳到下一个页面。<br><a href=\"http://www.pythonchallenge.com/pc/rock/grandpa.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/rock/grandpa.html</a></p>\n<p>图片是曼德布罗特集合，具体可以看<a href=\"https://msdn.microsoft.com/zh-cn/library/ie/jj635753%28v=vs.85%29\" target=\"_blank\" rel=\"noopener\">这里</a>，解释得挺清楚的。</p>\n<p>过关的主要步骤是按照Page Source里面的参数，画出一张曼德布罗特集合的图。比较自己画出的图和网页上的那张图的不同之处。将会看到，大体上是一样的，有少许像素点差值为16，-16.把这些点收集起来，会组成另一张图片，该图片详情参考<a href=\"http://en.wikipedia.org/wiki/Arecibo_message\" target=\"_blank\" rel=\"noopener\">Arecibo message 维基百科</a>，上面有很详细的解释。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapIdx</span><span class=\"params\">(c, maxIter=<span class=\"number\">128</span>)</span>:</span></span><br><span class=\"line\">    z = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(maxIter):</span><br><span class=\"line\">        z = z * z + c</span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.abs(z) &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    left = <span class=\"number\">0.34</span></span><br><span class=\"line\">    bottom = <span class=\"number\">0.57</span></span><br><span class=\"line\">    width = <span class=\"number\">0.036</span></span><br><span class=\"line\">    height = <span class=\"number\">0.027</span></span><br><span class=\"line\"></span><br><span class=\"line\">    im = Image.open(<span class=\"string\">'data/mandelbrot.gif'</span>)</span><br><span class=\"line\">    imdata = np.array(list(im.getdata()))</span><br><span class=\"line\">    im_w, im_h = im.size</span><br><span class=\"line\">    dw = width / im_w</span><br><span class=\"line\">    dh = height / im_h</span><br><span class=\"line\">    xx = np.linspace(left, left+width-dw, im_w)</span><br><span class=\"line\">    yy = np.linspace(bottom, bottom+height-dh, im_h)</span><br><span class=\"line\">    yy = yy[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">    xx.shape = (<span class=\"number\">1</span>, im_w)</span><br><span class=\"line\">    yy.shape = (im_h, <span class=\"number\">1</span>)</span><br><span class=\"line\">    grids = xx + <span class=\"number\">1j</span> * yy</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(im_h):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(im_w):</span><br><span class=\"line\">            grids[i, j] = mapIdx(grids[i, j])</span><br><span class=\"line\"></span><br><span class=\"line\">    im.putdata(grids.reshape((<span class=\"number\">-1</span>,)))</span><br><span class=\"line\">    im.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    imdata.shape = (<span class=\"number\">480</span>, <span class=\"number\">640</span>)</span><br><span class=\"line\">    diffs = imdata - grids</span><br><span class=\"line\">    msg = diffs[np.where(np.abs(diffs) == <span class=\"number\">16</span>)]</span><br><span class=\"line\">    newIm = Image.new(<span class=\"string\">'1'</span>, [<span class=\"number\">23</span>, <span class=\"number\">73</span>])</span><br><span class=\"line\">    newIm.putdata([i &lt; <span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> msg])</span><br><span class=\"line\">    newIm.save(<span class=\"string\">'level31_Out.png'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span> : solve()</span><br></pre></td></tr></table></figure>\n<p>代码要跑一阵子，主要是把每个复数映射为相应的idx耗时较长。</p>\n<p>下一关：arecibo <a href=\"http://www.pythonchallenge.com/pc/rock/arecibo.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/rock/arecibo.html</a></p>"},{"title":"Python Challenge (Level 33)","date":"2015-02-17T14:55:20.000Z","_content":"\n[第33关](http://www.pythonchallenge.com/pc/rock/beer.html) 用户名kohsamui 密码thailand\n\nFinally,the last one!\n\n图片的名称是beer1.jpg，显然要尝试beer2.jpg，得到提示**no, png**，得到[beer2.png](http://www.pythonchallenge.com/pc/rock/beer2.png)\n\n一张杂乱无章的图片，根据之前页面Page Source里的提示:\n```\nIf you are blinded by the light,\nremove its power, with its might.\nThen from the ashes, fair and square,\nanother truth at you will glare.\n```\n\n<!-- more -->\n\n首先，我们要把较亮的像素移除，然后用剩下的像素（from the ashes）重新组成一副图片。那要移除多少像素呢，应该是要使剩下的像素点的个数为平方数(fair and square).\n\n我们可以统计一下像素频数，再用numpy的cumsum来观察每次要移除那些像素。\n``` Python\nim = Image.open('data/beer2.png')\nim_data = np.array(list(im.getdata()))\nim_data_stat = itemfreq(im_data)\npprint(im_data_stat)\n```\n得到的结果为\n``` Python\narray([[   1, 1532],\n       [   2,  232],\n       [   7,  963],\n       [   8,  189],\n       [  13,  724],\n       [  14,  329],\n       [  19,  549],\n       [  20,  243],\n       [  25,  144],\n       [  26,  424] ...\n```\n其中，第一列为像素值，第二列为相应的个数。cumsum观察要移除多少个较亮的像素\n``` Python\npprint([np.sqrt(i) for i in np.cumsum(im_data_stat[:, 1])])\n\n[39.14077158156185,\n 42.0,\n 52.220685556587632,\n 54.0,\n 60.332412515993425,\n 63.0,\n 67.216069507224233,\n 69.0,\n 70.035705179572517,\n 73.0,\n 73.810568348983736,\n 76.0 ...\n]\n```\n可以看到，每次移除最亮的两个值，剩下的像素个数刚好是平方数。将剩下的像素中，最大值的为亮部，非最大值的为暗部，画二值图像。完整的代码为：\n``` Python\nfrom PIL import Image\nimport numpy as np\nfrom scipy.stats import itemfreq\nfrom pprint import pprint\n\nim = Image.open('data/beer2.png')\nim_data = np.array(list(im.getdata()))\nim_data_stat = itemfreq(im_data)\npprint(im_data_stat)\npprint([np.sqrt(i) for i in np.cumsum(im_data_stat[:, 1])])\n\nfor i in range(im_data_stat.shape[0] - 2, 0, -2):\n    newIm_data = im_data[np.where(im_data < im_data_stat[i, 0])]\n    idx_0 = np.where(newIm_data == newIm_data.max())\n    idx_1 = np.where(newIm_data != newIm_data.max())\n    newIm_data[idx_0] = 0\n    newIm_data[idx_1] = 1\n    size = int(np.sqrt(len(newIm_data)))\n    newIm = Image.new('1', (size, size))\n    newIm.putdata(newIm_data)\n    newIm.save('data/level33_%i.png' % i)\n```\n\n最后，得到许多张图片。图片上是一个个字母，其中有一些字母带框框，这些字母组成通关密码<font color=\"red\">gremlins</font>\n\nhttp://www.pythonchallenge.com/pc/rock/gremlins.html\n","source":"_posts/pc33.md","raw":"title: Python Challenge (Level 33)\ndate: 2015-02-17 22:55:20\ntags: [Python]\n---\n\n[第33关](http://www.pythonchallenge.com/pc/rock/beer.html) 用户名kohsamui 密码thailand\n\nFinally,the last one!\n\n图片的名称是beer1.jpg，显然要尝试beer2.jpg，得到提示**no, png**，得到[beer2.png](http://www.pythonchallenge.com/pc/rock/beer2.png)\n\n一张杂乱无章的图片，根据之前页面Page Source里的提示:\n```\nIf you are blinded by the light,\nremove its power, with its might.\nThen from the ashes, fair and square,\nanother truth at you will glare.\n```\n\n<!-- more -->\n\n首先，我们要把较亮的像素移除，然后用剩下的像素（from the ashes）重新组成一副图片。那要移除多少像素呢，应该是要使剩下的像素点的个数为平方数(fair and square).\n\n我们可以统计一下像素频数，再用numpy的cumsum来观察每次要移除那些像素。\n``` Python\nim = Image.open('data/beer2.png')\nim_data = np.array(list(im.getdata()))\nim_data_stat = itemfreq(im_data)\npprint(im_data_stat)\n```\n得到的结果为\n``` Python\narray([[   1, 1532],\n       [   2,  232],\n       [   7,  963],\n       [   8,  189],\n       [  13,  724],\n       [  14,  329],\n       [  19,  549],\n       [  20,  243],\n       [  25,  144],\n       [  26,  424] ...\n```\n其中，第一列为像素值，第二列为相应的个数。cumsum观察要移除多少个较亮的像素\n``` Python\npprint([np.sqrt(i) for i in np.cumsum(im_data_stat[:, 1])])\n\n[39.14077158156185,\n 42.0,\n 52.220685556587632,\n 54.0,\n 60.332412515993425,\n 63.0,\n 67.216069507224233,\n 69.0,\n 70.035705179572517,\n 73.0,\n 73.810568348983736,\n 76.0 ...\n]\n```\n可以看到，每次移除最亮的两个值，剩下的像素个数刚好是平方数。将剩下的像素中，最大值的为亮部，非最大值的为暗部，画二值图像。完整的代码为：\n``` Python\nfrom PIL import Image\nimport numpy as np\nfrom scipy.stats import itemfreq\nfrom pprint import pprint\n\nim = Image.open('data/beer2.png')\nim_data = np.array(list(im.getdata()))\nim_data_stat = itemfreq(im_data)\npprint(im_data_stat)\npprint([np.sqrt(i) for i in np.cumsum(im_data_stat[:, 1])])\n\nfor i in range(im_data_stat.shape[0] - 2, 0, -2):\n    newIm_data = im_data[np.where(im_data < im_data_stat[i, 0])]\n    idx_0 = np.where(newIm_data == newIm_data.max())\n    idx_1 = np.where(newIm_data != newIm_data.max())\n    newIm_data[idx_0] = 0\n    newIm_data[idx_1] = 1\n    size = int(np.sqrt(len(newIm_data)))\n    newIm = Image.new('1', (size, size))\n    newIm.putdata(newIm_data)\n    newIm.save('data/level33_%i.png' % i)\n```\n\n最后，得到许多张图片。图片上是一个个字母，其中有一些字母带框框，这些字母组成通关密码<font color=\"red\">gremlins</font>\n\nhttp://www.pythonchallenge.com/pc/rock/gremlins.html\n","slug":"pc33","published":1,"updated":"2018-06-10T17:05:07.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs9a001iytk0f3cqf3ib","content":"<p><a href=\"http://www.pythonchallenge.com/pc/rock/beer.html\" target=\"_blank\" rel=\"noopener\">第33关</a> 用户名kohsamui 密码thailand</p>\n<p>Finally,the last one!</p>\n<p>图片的名称是beer1.jpg，显然要尝试beer2.jpg，得到提示<strong>no, png</strong>，得到<a href=\"http://www.pythonchallenge.com/pc/rock/beer2.png\" target=\"_blank\" rel=\"noopener\">beer2.png</a></p>\n<p>一张杂乱无章的图片，根据之前页面Page Source里的提示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If you are blinded by the light,</span><br><span class=\"line\">remove its power, with its might.</span><br><span class=\"line\">Then from the ashes, fair and square,</span><br><span class=\"line\">another truth at you will glare.</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>首先，我们要把较亮的像素移除，然后用剩下的像素（from the ashes）重新组成一副图片。那要移除多少像素呢，应该是要使剩下的像素点的个数为平方数(fair and square).</p>\n<p>我们可以统计一下像素频数，再用numpy的cumsum来观察每次要移除那些像素。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im = Image.open(<span class=\"string\">'data/beer2.png'</span>)</span><br><span class=\"line\">im_data = np.array(list(im.getdata()))</span><br><span class=\"line\">im_data_stat = itemfreq(im_data)</span><br><span class=\"line\">pprint(im_data_stat)</span><br></pre></td></tr></table></figure></p>\n<p>得到的结果为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([[   <span class=\"number\">1</span>, <span class=\"number\">1532</span>],</span><br><span class=\"line\">       [   <span class=\"number\">2</span>,  <span class=\"number\">232</span>],</span><br><span class=\"line\">       [   <span class=\"number\">7</span>,  <span class=\"number\">963</span>],</span><br><span class=\"line\">       [   <span class=\"number\">8</span>,  <span class=\"number\">189</span>],</span><br><span class=\"line\">       [  <span class=\"number\">13</span>,  <span class=\"number\">724</span>],</span><br><span class=\"line\">       [  <span class=\"number\">14</span>,  <span class=\"number\">329</span>],</span><br><span class=\"line\">       [  <span class=\"number\">19</span>,  <span class=\"number\">549</span>],</span><br><span class=\"line\">       [  <span class=\"number\">20</span>,  <span class=\"number\">243</span>],</span><br><span class=\"line\">       [  <span class=\"number\">25</span>,  <span class=\"number\">144</span>],</span><br><span class=\"line\">       [  <span class=\"number\">26</span>,  <span class=\"number\">424</span>] ...</span><br></pre></td></tr></table></figure></p>\n<p>其中，第一列为像素值，第二列为相应的个数。cumsum观察要移除多少个较亮的像素<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pprint([np.sqrt(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.cumsum(im_data_stat[:, <span class=\"number\">1</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">39.14077158156185</span>,</span><br><span class=\"line\"> <span class=\"number\">42.0</span>,</span><br><span class=\"line\"> <span class=\"number\">52.220685556587632</span>,</span><br><span class=\"line\"> <span class=\"number\">54.0</span>,</span><br><span class=\"line\"> <span class=\"number\">60.332412515993425</span>,</span><br><span class=\"line\"> <span class=\"number\">63.0</span>,</span><br><span class=\"line\"> <span class=\"number\">67.216069507224233</span>,</span><br><span class=\"line\"> <span class=\"number\">69.0</span>,</span><br><span class=\"line\"> <span class=\"number\">70.035705179572517</span>,</span><br><span class=\"line\"> <span class=\"number\">73.0</span>,</span><br><span class=\"line\"> <span class=\"number\">73.810568348983736</span>,</span><br><span class=\"line\"> <span class=\"number\">76.0</span> ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，每次移除最亮的两个值，剩下的像素个数刚好是平方数。将剩下的像素中，最大值的为亮部，非最大值的为暗部，画二值图像。完整的代码为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.stats <span class=\"keyword\">import</span> itemfreq</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'data/beer2.png'</span>)</span><br><span class=\"line\">im_data = np.array(list(im.getdata()))</span><br><span class=\"line\">im_data_stat = itemfreq(im_data)</span><br><span class=\"line\">pprint(im_data_stat)</span><br><span class=\"line\">pprint([np.sqrt(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.cumsum(im_data_stat[:, <span class=\"number\">1</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(im_data_stat.shape[<span class=\"number\">0</span>] - <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">-2</span>):</span><br><span class=\"line\">    newIm_data = im_data[np.where(im_data &lt; im_data_stat[i, <span class=\"number\">0</span>])]</span><br><span class=\"line\">    idx_0 = np.where(newIm_data == newIm_data.max())</span><br><span class=\"line\">    idx_1 = np.where(newIm_data != newIm_data.max())</span><br><span class=\"line\">    newIm_data[idx_0] = <span class=\"number\">0</span></span><br><span class=\"line\">    newIm_data[idx_1] = <span class=\"number\">1</span></span><br><span class=\"line\">    size = int(np.sqrt(len(newIm_data)))</span><br><span class=\"line\">    newIm = Image.new(<span class=\"string\">'1'</span>, (size, size))</span><br><span class=\"line\">    newIm.putdata(newIm_data)</span><br><span class=\"line\">    newIm.save(<span class=\"string\">'data/level33_%i.png'</span> % i)</span><br></pre></td></tr></table></figure></p>\n<p>最后，得到许多张图片。图片上是一个个字母，其中有一些字母带框框，这些字母组成通关密码<font color=\"red\">gremlins</font></p>\n<p><a href=\"http://www.pythonchallenge.com/pc/rock/gremlins.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/rock/gremlins.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/rock/beer.html\" target=\"_blank\" rel=\"noopener\">第33关</a> 用户名kohsamui 密码thailand</p>\n<p>Finally,the last one!</p>\n<p>图片的名称是beer1.jpg，显然要尝试beer2.jpg，得到提示<strong>no, png</strong>，得到<a href=\"http://www.pythonchallenge.com/pc/rock/beer2.png\" target=\"_blank\" rel=\"noopener\">beer2.png</a></p>\n<p>一张杂乱无章的图片，根据之前页面Page Source里的提示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If you are blinded by the light,</span><br><span class=\"line\">remove its power, with its might.</span><br><span class=\"line\">Then from the ashes, fair and square,</span><br><span class=\"line\">another truth at you will glare.</span><br></pre></td></tr></table></figure></p>","more":"<p>首先，我们要把较亮的像素移除，然后用剩下的像素（from the ashes）重新组成一副图片。那要移除多少像素呢，应该是要使剩下的像素点的个数为平方数(fair and square).</p>\n<p>我们可以统计一下像素频数，再用numpy的cumsum来观察每次要移除那些像素。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im = Image.open(<span class=\"string\">'data/beer2.png'</span>)</span><br><span class=\"line\">im_data = np.array(list(im.getdata()))</span><br><span class=\"line\">im_data_stat = itemfreq(im_data)</span><br><span class=\"line\">pprint(im_data_stat)</span><br></pre></td></tr></table></figure></p>\n<p>得到的结果为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array([[   <span class=\"number\">1</span>, <span class=\"number\">1532</span>],</span><br><span class=\"line\">       [   <span class=\"number\">2</span>,  <span class=\"number\">232</span>],</span><br><span class=\"line\">       [   <span class=\"number\">7</span>,  <span class=\"number\">963</span>],</span><br><span class=\"line\">       [   <span class=\"number\">8</span>,  <span class=\"number\">189</span>],</span><br><span class=\"line\">       [  <span class=\"number\">13</span>,  <span class=\"number\">724</span>],</span><br><span class=\"line\">       [  <span class=\"number\">14</span>,  <span class=\"number\">329</span>],</span><br><span class=\"line\">       [  <span class=\"number\">19</span>,  <span class=\"number\">549</span>],</span><br><span class=\"line\">       [  <span class=\"number\">20</span>,  <span class=\"number\">243</span>],</span><br><span class=\"line\">       [  <span class=\"number\">25</span>,  <span class=\"number\">144</span>],</span><br><span class=\"line\">       [  <span class=\"number\">26</span>,  <span class=\"number\">424</span>] ...</span><br></pre></td></tr></table></figure></p>\n<p>其中，第一列为像素值，第二列为相应的个数。cumsum观察要移除多少个较亮的像素<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pprint([np.sqrt(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.cumsum(im_data_stat[:, <span class=\"number\">1</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">39.14077158156185</span>,</span><br><span class=\"line\"> <span class=\"number\">42.0</span>,</span><br><span class=\"line\"> <span class=\"number\">52.220685556587632</span>,</span><br><span class=\"line\"> <span class=\"number\">54.0</span>,</span><br><span class=\"line\"> <span class=\"number\">60.332412515993425</span>,</span><br><span class=\"line\"> <span class=\"number\">63.0</span>,</span><br><span class=\"line\"> <span class=\"number\">67.216069507224233</span>,</span><br><span class=\"line\"> <span class=\"number\">69.0</span>,</span><br><span class=\"line\"> <span class=\"number\">70.035705179572517</span>,</span><br><span class=\"line\"> <span class=\"number\">73.0</span>,</span><br><span class=\"line\"> <span class=\"number\">73.810568348983736</span>,</span><br><span class=\"line\"> <span class=\"number\">76.0</span> ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，每次移除最亮的两个值，剩下的像素个数刚好是平方数。将剩下的像素中，最大值的为亮部，非最大值的为暗部，画二值图像。完整的代码为：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.stats <span class=\"keyword\">import</span> itemfreq</span><br><span class=\"line\"><span class=\"keyword\">from</span> pprint <span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">'data/beer2.png'</span>)</span><br><span class=\"line\">im_data = np.array(list(im.getdata()))</span><br><span class=\"line\">im_data_stat = itemfreq(im_data)</span><br><span class=\"line\">pprint(im_data_stat)</span><br><span class=\"line\">pprint([np.sqrt(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> np.cumsum(im_data_stat[:, <span class=\"number\">1</span>])])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(im_data_stat.shape[<span class=\"number\">0</span>] - <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">-2</span>):</span><br><span class=\"line\">    newIm_data = im_data[np.where(im_data &lt; im_data_stat[i, <span class=\"number\">0</span>])]</span><br><span class=\"line\">    idx_0 = np.where(newIm_data == newIm_data.max())</span><br><span class=\"line\">    idx_1 = np.where(newIm_data != newIm_data.max())</span><br><span class=\"line\">    newIm_data[idx_0] = <span class=\"number\">0</span></span><br><span class=\"line\">    newIm_data[idx_1] = <span class=\"number\">1</span></span><br><span class=\"line\">    size = int(np.sqrt(len(newIm_data)))</span><br><span class=\"line\">    newIm = Image.new(<span class=\"string\">'1'</span>, (size, size))</span><br><span class=\"line\">    newIm.putdata(newIm_data)</span><br><span class=\"line\">    newIm.save(<span class=\"string\">'data/level33_%i.png'</span> % i)</span><br></pre></td></tr></table></figure></p>\n<p>最后，得到许多张图片。图片上是一个个字母，其中有一些字母带框框，这些字母组成通关密码<font color=\"red\">gremlins</font></p>\n<p><a href=\"http://www.pythonchallenge.com/pc/rock/gremlins.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/rock/gremlins.html</a></p>"},{"title":"Python Challenge (Level 6)","date":"2015-01-20T03:28:54.000Z","_content":"\n[第6关](http://www.pythonchallenge.com/pc/def/channel.html)\n\n这一关挺有意思的, 绕了好几重。 图片上面是一条拉链, Page Source里面有*zip*的提示。所以这一关会用到[zipfile](https://docs.python.org/2/library/zipfile.html)模块。 \n\n把URL里的channel换成zip，结果出现这个\n> yes. find the zip\n\n网上搜一下答案， 原来是要把html改成zip, 再下载[zip文件](http://www.pythonchallenge.com/pc/def/channel.zip)。下载得到的zip文件里有个readme.txt\n> welcome to my zipped list.\n\n> hint1: start from 90052\n> hint2: answer is inside the zip\n\n<!-- more -->\n90052.txt里面是 **Next nothing is 94191**， 看来有点像urllib那一关， 不断寻找下一个txt\n``` Python\nimport re\nimport zipfile\n\nnext_num = '90052'\next = '.txt'\n\nzf = zipfile.ZipFile('channel.zip')\npat = re.compile('Next nothing is (\\d+)')\n\nwhile True:\n    text = zf.read(next_num + ext)\n    print text\n    next_num = pat.findall(text)\n    if next_num:\n        next_num = next_num[0]\n    else:\n        break\n```\n<br>\n看到最后一个文件的提示 **Collect the comments.** 看来还要把每个文件的comment弄出来。\n``` Python\nimport re\nimport zipfile\n\nnext_num = '90052'\next = '.txt'\n\nzf = zipfile.ZipFile('channel.zip')\npat = re.compile('Next nothing is (\\d+)')\ncomment = \"\"\nwhile True:\n    text = zf.read(next_num + ext)\n    zinfo = zf.getinfo(next_num + ext)\n    comment += zinfo.comment\n    print text\n    next_num = pat.findall(text)\n    if next_num:\n        next_num = next_num[0]\n    else:\n        break\n\nprint comment\n```\n\n打印出来是这个样子的\n``` Python\n'''\n****************************************************************\n****************************************************************\n**                                                            **\n**   OO    OO    XX      YYYY    GG    GG  EEEEEE NN      NN  **\n**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE  NN    NN   **\n**   OO    OO XXX  XXX YYY   YY  GG GG     EE       NN  NN    **\n**   OOOOOOOO XX    XX YY        GGG       EEEEE     NNNN     **\n**   OOOOOOOO XX    XX YY        GGG       EEEEE      NN      **\n**   OO    OO XXX  XXX YYY   YY  GG GG     EE         NN      **\n**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE     NN      **\n**   OO    OO    XX      YYYY    GG    GG  EEEEEE     NN      **\n**                                                            **\n****************************************************************\n **************************************************************\n'''\n```\n好像就是这个**HOCKEY**了， 但是 http://www.pythonchallenge.com/pc/def/hockey.html 这里只有一句话\n> it's in the air. look at the letters.\n\n原来组成**HOCKEY**的字母才是答案——oxygen（氧，in the air).\n\n","source":"_posts/pc6.md","raw":"title: Python Challenge (Level 6)\ndate: 2015-01-20 11:28:54\ntags: [Python]\n---\n\n[第6关](http://www.pythonchallenge.com/pc/def/channel.html)\n\n这一关挺有意思的, 绕了好几重。 图片上面是一条拉链, Page Source里面有*zip*的提示。所以这一关会用到[zipfile](https://docs.python.org/2/library/zipfile.html)模块。 \n\n把URL里的channel换成zip，结果出现这个\n> yes. find the zip\n\n网上搜一下答案， 原来是要把html改成zip, 再下载[zip文件](http://www.pythonchallenge.com/pc/def/channel.zip)。下载得到的zip文件里有个readme.txt\n> welcome to my zipped list.\n\n> hint1: start from 90052\n> hint2: answer is inside the zip\n\n<!-- more -->\n90052.txt里面是 **Next nothing is 94191**， 看来有点像urllib那一关， 不断寻找下一个txt\n``` Python\nimport re\nimport zipfile\n\nnext_num = '90052'\next = '.txt'\n\nzf = zipfile.ZipFile('channel.zip')\npat = re.compile('Next nothing is (\\d+)')\n\nwhile True:\n    text = zf.read(next_num + ext)\n    print text\n    next_num = pat.findall(text)\n    if next_num:\n        next_num = next_num[0]\n    else:\n        break\n```\n<br>\n看到最后一个文件的提示 **Collect the comments.** 看来还要把每个文件的comment弄出来。\n``` Python\nimport re\nimport zipfile\n\nnext_num = '90052'\next = '.txt'\n\nzf = zipfile.ZipFile('channel.zip')\npat = re.compile('Next nothing is (\\d+)')\ncomment = \"\"\nwhile True:\n    text = zf.read(next_num + ext)\n    zinfo = zf.getinfo(next_num + ext)\n    comment += zinfo.comment\n    print text\n    next_num = pat.findall(text)\n    if next_num:\n        next_num = next_num[0]\n    else:\n        break\n\nprint comment\n```\n\n打印出来是这个样子的\n``` Python\n'''\n****************************************************************\n****************************************************************\n**                                                            **\n**   OO    OO    XX      YYYY    GG    GG  EEEEEE NN      NN  **\n**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE  NN    NN   **\n**   OO    OO XXX  XXX YYY   YY  GG GG     EE       NN  NN    **\n**   OOOOOOOO XX    XX YY        GGG       EEEEE     NNNN     **\n**   OOOOOOOO XX    XX YY        GGG       EEEEE      NN      **\n**   OO    OO XXX  XXX YYY   YY  GG GG     EE         NN      **\n**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE     NN      **\n**   OO    OO    XX      YYYY    GG    GG  EEEEEE     NN      **\n**                                                            **\n****************************************************************\n **************************************************************\n'''\n```\n好像就是这个**HOCKEY**了， 但是 http://www.pythonchallenge.com/pc/def/hockey.html 这里只有一句话\n> it's in the air. look at the letters.\n\n原来组成**HOCKEY**的字母才是答案——oxygen（氧，in the air).\n\n","slug":"pc6","published":1,"updated":"2018-06-10T17:05:07.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs9d001kytk0o60c5fit","content":"<p><a href=\"http://www.pythonchallenge.com/pc/def/channel.html\" target=\"_blank\" rel=\"noopener\">第6关</a></p>\n<p>这一关挺有意思的, 绕了好几重。 图片上面是一条拉链, Page Source里面有<em>zip</em>的提示。所以这一关会用到<a href=\"https://docs.python.org/2/library/zipfile.html\" target=\"_blank\" rel=\"noopener\">zipfile</a>模块。 </p>\n<p>把URL里的channel换成zip，结果出现这个</p>\n<blockquote>\n<p>yes. find the zip</p>\n</blockquote>\n<p>网上搜一下答案， 原来是要把html改成zip, 再下载<a href=\"http://www.pythonchallenge.com/pc/def/channel.zip\" target=\"_blank\" rel=\"noopener\">zip文件</a>。下载得到的zip文件里有个readme.txt</p>\n<blockquote>\n<p>welcome to my zipped list.</p>\n</blockquote>\n<blockquote>\n<p>hint1: start from 90052<br>hint2: answer is inside the zip</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>90052.txt里面是 <strong>Next nothing is 94191</strong>， 看来有点像urllib那一关， 不断寻找下一个txt<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> zipfile</span><br><span class=\"line\"></span><br><span class=\"line\">next_num = <span class=\"string\">'90052'</span></span><br><span class=\"line\">ext = <span class=\"string\">'.txt'</span></span><br><span class=\"line\"></span><br><span class=\"line\">zf = zipfile.ZipFile(<span class=\"string\">'channel.zip'</span>)</span><br><span class=\"line\">pat = re.compile(<span class=\"string\">'Next nothing is (\\d+)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    text = zf.read(next_num + ext)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> text</span><br><span class=\"line\">    next_num = pat.findall(text)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> next_num:</span><br><span class=\"line\">        next_num = next_num[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure></p>\n<p><br><br>看到最后一个文件的提示 <strong>Collect the comments.</strong> 看来还要把每个文件的comment弄出来。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> zipfile</span><br><span class=\"line\"></span><br><span class=\"line\">next_num = <span class=\"string\">'90052'</span></span><br><span class=\"line\">ext = <span class=\"string\">'.txt'</span></span><br><span class=\"line\"></span><br><span class=\"line\">zf = zipfile.ZipFile(<span class=\"string\">'channel.zip'</span>)</span><br><span class=\"line\">pat = re.compile(<span class=\"string\">'Next nothing is (\\d+)'</span>)</span><br><span class=\"line\">comment = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    text = zf.read(next_num + ext)</span><br><span class=\"line\">    zinfo = zf.getinfo(next_num + ext)</span><br><span class=\"line\">    comment += zinfo.comment</span><br><span class=\"line\">    <span class=\"keyword\">print</span> text</span><br><span class=\"line\">    next_num = pat.findall(text)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> next_num:</span><br><span class=\"line\">        next_num = next_num[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> comment</span><br></pre></td></tr></table></figure></p>\n<p>打印出来是这个样子的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">****************************************************************</span></span><br><span class=\"line\"><span class=\"string\">****************************************************************</span></span><br><span class=\"line\"><span class=\"string\">**                                                            **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO    XX      YYYY    GG    GG  EEEEEE NN      NN  **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE  NN    NN   **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO XXX  XXX YYY   YY  GG GG     EE       NN  NN    **</span></span><br><span class=\"line\"><span class=\"string\">**   OOOOOOOO XX    XX YY        GGG       EEEEE     NNNN     **</span></span><br><span class=\"line\"><span class=\"string\">**   OOOOOOOO XX    XX YY        GGG       EEEEE      NN      **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO XXX  XXX YYY   YY  GG GG     EE         NN      **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE     NN      **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO    XX      YYYY    GG    GG  EEEEEE     NN      **</span></span><br><span class=\"line\"><span class=\"string\">**                                                            **</span></span><br><span class=\"line\"><span class=\"string\">****************************************************************</span></span><br><span class=\"line\"><span class=\"string\"> **************************************************************</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>好像就是这个<strong>HOCKEY</strong>了， 但是 <a href=\"http://www.pythonchallenge.com/pc/def/hockey.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/hockey.html</a> 这里只有一句话</p>\n<blockquote>\n<p>it’s in the air. look at the letters.</p>\n</blockquote>\n<p>原来组成<strong>HOCKEY</strong>的字母才是答案——oxygen（氧，in the air).</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/def/channel.html\" target=\"_blank\" rel=\"noopener\">第6关</a></p>\n<p>这一关挺有意思的, 绕了好几重。 图片上面是一条拉链, Page Source里面有<em>zip</em>的提示。所以这一关会用到<a href=\"https://docs.python.org/2/library/zipfile.html\" target=\"_blank\" rel=\"noopener\">zipfile</a>模块。 </p>\n<p>把URL里的channel换成zip，结果出现这个</p>\n<blockquote>\n<p>yes. find the zip</p>\n</blockquote>\n<p>网上搜一下答案， 原来是要把html改成zip, 再下载<a href=\"http://www.pythonchallenge.com/pc/def/channel.zip\" target=\"_blank\" rel=\"noopener\">zip文件</a>。下载得到的zip文件里有个readme.txt</p>\n<blockquote>\n<p>welcome to my zipped list.</p>\n</blockquote>\n<blockquote>\n<p>hint1: start from 90052<br>hint2: answer is inside the zip</p>\n</blockquote>","more":"<p>90052.txt里面是 <strong>Next nothing is 94191</strong>， 看来有点像urllib那一关， 不断寻找下一个txt<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> zipfile</span><br><span class=\"line\"></span><br><span class=\"line\">next_num = <span class=\"string\">'90052'</span></span><br><span class=\"line\">ext = <span class=\"string\">'.txt'</span></span><br><span class=\"line\"></span><br><span class=\"line\">zf = zipfile.ZipFile(<span class=\"string\">'channel.zip'</span>)</span><br><span class=\"line\">pat = re.compile(<span class=\"string\">'Next nothing is (\\d+)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    text = zf.read(next_num + ext)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> text</span><br><span class=\"line\">    next_num = pat.findall(text)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> next_num:</span><br><span class=\"line\">        next_num = next_num[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure></p>\n<p><br><br>看到最后一个文件的提示 <strong>Collect the comments.</strong> 看来还要把每个文件的comment弄出来。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> zipfile</span><br><span class=\"line\"></span><br><span class=\"line\">next_num = <span class=\"string\">'90052'</span></span><br><span class=\"line\">ext = <span class=\"string\">'.txt'</span></span><br><span class=\"line\"></span><br><span class=\"line\">zf = zipfile.ZipFile(<span class=\"string\">'channel.zip'</span>)</span><br><span class=\"line\">pat = re.compile(<span class=\"string\">'Next nothing is (\\d+)'</span>)</span><br><span class=\"line\">comment = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    text = zf.read(next_num + ext)</span><br><span class=\"line\">    zinfo = zf.getinfo(next_num + ext)</span><br><span class=\"line\">    comment += zinfo.comment</span><br><span class=\"line\">    <span class=\"keyword\">print</span> text</span><br><span class=\"line\">    next_num = pat.findall(text)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> next_num:</span><br><span class=\"line\">        next_num = next_num[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> comment</span><br></pre></td></tr></table></figure></p>\n<p>打印出来是这个样子的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">****************************************************************</span></span><br><span class=\"line\"><span class=\"string\">****************************************************************</span></span><br><span class=\"line\"><span class=\"string\">**                                                            **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO    XX      YYYY    GG    GG  EEEEEE NN      NN  **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE  NN    NN   **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO XXX  XXX YYY   YY  GG GG     EE       NN  NN    **</span></span><br><span class=\"line\"><span class=\"string\">**   OOOOOOOO XX    XX YY        GGG       EEEEE     NNNN     **</span></span><br><span class=\"line\"><span class=\"string\">**   OOOOOOOO XX    XX YY        GGG       EEEEE      NN      **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO XXX  XXX YYY   YY  GG GG     EE         NN      **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE     NN      **</span></span><br><span class=\"line\"><span class=\"string\">**   OO    OO    XX      YYYY    GG    GG  EEEEEE     NN      **</span></span><br><span class=\"line\"><span class=\"string\">**                                                            **</span></span><br><span class=\"line\"><span class=\"string\">****************************************************************</span></span><br><span class=\"line\"><span class=\"string\"> **************************************************************</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure></p>\n<p>好像就是这个<strong>HOCKEY</strong>了， 但是 <a href=\"http://www.pythonchallenge.com/pc/def/hockey.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/hockey.html</a> 这里只有一句话</p>\n<blockquote>\n<p>it’s in the air. look at the letters.</p>\n</blockquote>\n<p>原来组成<strong>HOCKEY</strong>的字母才是答案——oxygen（氧，in the air).</p>"},{"title":"Python Challenge (Level 8)","date":"2015-01-22T15:05:40.000Z","_content":"\n[第8关](http://www.pythonchallenge.com/pc/def/integrity.html)\n图片上是蜜蜂采蜜, 网页的标题是\"work hard?\"。 点击图片会要求输入用户名和密码. 查看Page Source, 下面有两行提示信息, 可以看出应该是username(un)和password(pw), 但看不出内容是什么.\n\n网上的大神解释说(work hard? ==> busy)，要用[bz2](https://docs.python.org/2/library/bz2.html)模块。解压两个字符串可以得到信息\n``` Python\nimport bz2\nun = 'BZh91AY&SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07<]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084'\npw = 'BZh91AY&SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13<]\\xc9\\x14\\xe1BBP\\x91\\xf08'\n\nprint bz2.decompress(un), bz2.decompress(pw)\n```\n\n<!-- more -->\n得到用户名 **huge**, 密码 **file** , 输入后跳到http://www.pythonchallenge.com/pc/return/good.html\n","source":"_posts/pc8.md","raw":"title: Python Challenge (Level 8)\ndate: 2015-01-22 23:05:40\ntags: [Python]\n---\n\n[第8关](http://www.pythonchallenge.com/pc/def/integrity.html)\n图片上是蜜蜂采蜜, 网页的标题是\"work hard?\"。 点击图片会要求输入用户名和密码. 查看Page Source, 下面有两行提示信息, 可以看出应该是username(un)和password(pw), 但看不出内容是什么.\n\n网上的大神解释说(work hard? ==> busy)，要用[bz2](https://docs.python.org/2/library/bz2.html)模块。解压两个字符串可以得到信息\n``` Python\nimport bz2\nun = 'BZh91AY&SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07<]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084'\npw = 'BZh91AY&SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13<]\\xc9\\x14\\xe1BBP\\x91\\xf08'\n\nprint bz2.decompress(un), bz2.decompress(pw)\n```\n\n<!-- more -->\n得到用户名 **huge**, 密码 **file** , 输入后跳到http://www.pythonchallenge.com/pc/return/good.html\n","slug":"pc8","published":1,"updated":"2018-06-10T17:05:07.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs9e001mytk0gcqzcl2b","content":"<p><a href=\"http://www.pythonchallenge.com/pc/def/integrity.html\" target=\"_blank\" rel=\"noopener\">第8关</a><br>图片上是蜜蜂采蜜, 网页的标题是”work hard?”。 点击图片会要求输入用户名和密码. 查看Page Source, 下面有两行提示信息, 可以看出应该是username(un)和password(pw), 但看不出内容是什么.</p>\n<p>网上的大神解释说(work hard? ==&gt; busy)，要用<a href=\"https://docs.python.org/2/library/bz2.html\" target=\"_blank\" rel=\"noopener\">bz2</a>模块。解压两个字符串可以得到信息<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bz2</span><br><span class=\"line\">un = <span class=\"string\">'BZh91AY&amp;SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07&lt;]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084'</span></span><br><span class=\"line\">pw = <span class=\"string\">'BZh91AY&amp;SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13&lt;]\\xc9\\x14\\xe1BBP\\x91\\xf08'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> bz2.decompress(un), bz2.decompress(pw)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>得到用户名 <strong>huge</strong>, 密码 <strong>file</strong> , 输入后跳到<a href=\"http://www.pythonchallenge.com/pc/return/good.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/good.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/def/integrity.html\" target=\"_blank\" rel=\"noopener\">第8关</a><br>图片上是蜜蜂采蜜, 网页的标题是”work hard?”。 点击图片会要求输入用户名和密码. 查看Page Source, 下面有两行提示信息, 可以看出应该是username(un)和password(pw), 但看不出内容是什么.</p>\n<p>网上的大神解释说(work hard? ==&gt; busy)，要用<a href=\"https://docs.python.org/2/library/bz2.html\" target=\"_blank\" rel=\"noopener\">bz2</a>模块。解压两个字符串可以得到信息<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bz2</span><br><span class=\"line\">un = <span class=\"string\">'BZh91AY&amp;SYA\\xaf\\x82\\r\\x00\\x00\\x01\\x01\\x80\\x02\\xc0\\x02\\x00 \\x00!\\x9ah3M\\x07&lt;]\\xc9\\x14\\xe1BA\\x06\\xbe\\x084'</span></span><br><span class=\"line\">pw = <span class=\"string\">'BZh91AY&amp;SY\\x94$|\\x0e\\x00\\x00\\x00\\x81\\x00\\x03$ \\x00!\\x9ah3M\\x13&lt;]\\xc9\\x14\\xe1BBP\\x91\\xf08'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> bz2.decompress(un), bz2.decompress(pw)</span><br></pre></td></tr></table></figure></p>","more":"<p>得到用户名 <strong>huge</strong>, 密码 <strong>file</strong> , 输入后跳到<a href=\"http://www.pythonchallenge.com/pc/return/good.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/good.html</a></p>"},{"title":"Python Challenge (Level 7)","date":"2015-01-21T02:40:51.000Z","_content":"[第7关](http://www.pythonchallenge.com/pc/def/oxygen.html)\n依旧是一张图片， Page Source里没有什么提示信息。图片中间有一块灰度图像，答案应该就在这一块特别的图像里了。网上的答案提到用GIMP可以得到中间灰度图像的位置， 也可以观察出后面会用到的step=7, 也就是水平方向每7个像素点采样一次。可以看到垂直方向上的像素值是一样的，所以y坐标在[y_min, y_max]中取一个好了。 将这一块图像的像素转换为ASCII字符就可以得到通关信息。灰度图像的RGB三个chanel的值是一样的，所以取一个chanel就可以了，这里取得是R通道，也就是\\[0\\] \n\n获取图像的像素值用到 [Pillow](http://pillow.readthedocs.org/en/latest/reference/Image.html)模块\n<!-- more -->\n\n``` Python\nfrom PIL import Image\n# pos of gray part\nx_min, x_max = 0, 609\ny_min, y_max = 43, 53\nstep = 7\n\nim = Image.open(\"oxygen.png\")\nmsg = [chr(im.getpixel((x, y_min))[0]) for x in range(x_min, x_max, step)]\nprint ''.join(msg)\n```\n\n得到的信息为\n> smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]\n\n再将得到的信息转一次\n``` Python\nmsg = [105, 110, 116, 101, 103, 114, 105, 116, 121]\nprint ''.join([chr(i) for i in msg])\n```\n\n得到**integrity**， http://www.pythonchallenge.com/pc/def/integrity.html\n","source":"_posts/pc7.md","raw":"title: Python Challenge (Level 7)\ndate: 2015-01-21 10:40:51\ntags: [Python]\n---\n[第7关](http://www.pythonchallenge.com/pc/def/oxygen.html)\n依旧是一张图片， Page Source里没有什么提示信息。图片中间有一块灰度图像，答案应该就在这一块特别的图像里了。网上的答案提到用GIMP可以得到中间灰度图像的位置， 也可以观察出后面会用到的step=7, 也就是水平方向每7个像素点采样一次。可以看到垂直方向上的像素值是一样的，所以y坐标在[y_min, y_max]中取一个好了。 将这一块图像的像素转换为ASCII字符就可以得到通关信息。灰度图像的RGB三个chanel的值是一样的，所以取一个chanel就可以了，这里取得是R通道，也就是\\[0\\] \n\n获取图像的像素值用到 [Pillow](http://pillow.readthedocs.org/en/latest/reference/Image.html)模块\n<!-- more -->\n\n``` Python\nfrom PIL import Image\n# pos of gray part\nx_min, x_max = 0, 609\ny_min, y_max = 43, 53\nstep = 7\n\nim = Image.open(\"oxygen.png\")\nmsg = [chr(im.getpixel((x, y_min))[0]) for x in range(x_min, x_max, step)]\nprint ''.join(msg)\n```\n\n得到的信息为\n> smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]\n\n再将得到的信息转一次\n``` Python\nmsg = [105, 110, 116, 101, 103, 114, 105, 116, 121]\nprint ''.join([chr(i) for i in msg])\n```\n\n得到**integrity**， http://www.pythonchallenge.com/pc/def/integrity.html\n","slug":"pc7","published":1,"updated":"2018-06-10T17:05:07.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs9h001oytk0fnicdw4r","content":"<p><a href=\"http://www.pythonchallenge.com/pc/def/oxygen.html\" target=\"_blank\" rel=\"noopener\">第7关</a><br>依旧是一张图片， Page Source里没有什么提示信息。图片中间有一块灰度图像，答案应该就在这一块特别的图像里了。网上的答案提到用GIMP可以得到中间灰度图像的位置， 也可以观察出后面会用到的step=7, 也就是水平方向每7个像素点采样一次。可以看到垂直方向上的像素值是一样的，所以y坐标在[y_min, y_max]中取一个好了。 将这一块图像的像素转换为ASCII字符就可以得到通关信息。灰度图像的RGB三个chanel的值是一样的，所以取一个chanel就可以了，这里取得是R通道，也就是[0] </p>\n<p>获取图像的像素值用到 <a href=\"http://pillow.readthedocs.org/en/latest/reference/Image.html\" target=\"_blank\" rel=\"noopener\">Pillow</a>模块<br><a id=\"more\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"comment\"># pos of gray part</span></span><br><span class=\"line\">x_min, x_max = <span class=\"number\">0</span>, <span class=\"number\">609</span></span><br><span class=\"line\">y_min, y_max = <span class=\"number\">43</span>, <span class=\"number\">53</span></span><br><span class=\"line\">step = <span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">\"oxygen.png\"</span>)</span><br><span class=\"line\">msg = [chr(im.getpixel((x, y_min))[<span class=\"number\">0</span>]) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(x_min, x_max, step)]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(msg)</span><br></pre></td></tr></table></figure>\n<p>得到的信息为</p>\n<blockquote>\n<p>smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]</p>\n</blockquote>\n<p>再将得到的信息转一次<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg = [<span class=\"number\">105</span>, <span class=\"number\">110</span>, <span class=\"number\">116</span>, <span class=\"number\">101</span>, <span class=\"number\">103</span>, <span class=\"number\">114</span>, <span class=\"number\">105</span>, <span class=\"number\">116</span>, <span class=\"number\">121</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join([chr(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> msg])</span><br></pre></td></tr></table></figure></p>\n<p>得到<strong>integrity</strong>， <a href=\"http://www.pythonchallenge.com/pc/def/integrity.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/integrity.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/def/oxygen.html\" target=\"_blank\" rel=\"noopener\">第7关</a><br>依旧是一张图片， Page Source里没有什么提示信息。图片中间有一块灰度图像，答案应该就在这一块特别的图像里了。网上的答案提到用GIMP可以得到中间灰度图像的位置， 也可以观察出后面会用到的step=7, 也就是水平方向每7个像素点采样一次。可以看到垂直方向上的像素值是一样的，所以y坐标在[y_min, y_max]中取一个好了。 将这一块图像的像素转换为ASCII字符就可以得到通关信息。灰度图像的RGB三个chanel的值是一样的，所以取一个chanel就可以了，这里取得是R通道，也就是[0] </p>\n<p>获取图像的像素值用到 <a href=\"http://pillow.readthedocs.org/en/latest/reference/Image.html\" target=\"_blank\" rel=\"noopener\">Pillow</a>模块<br>","more":"</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"comment\"># pos of gray part</span></span><br><span class=\"line\">x_min, x_max = <span class=\"number\">0</span>, <span class=\"number\">609</span></span><br><span class=\"line\">y_min, y_max = <span class=\"number\">43</span>, <span class=\"number\">53</span></span><br><span class=\"line\">step = <span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">im = Image.open(<span class=\"string\">\"oxygen.png\"</span>)</span><br><span class=\"line\">msg = [chr(im.getpixel((x, y_min))[<span class=\"number\">0</span>]) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(x_min, x_max, step)]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join(msg)</span><br></pre></td></tr></table></figure>\n<p>得到的信息为</p>\n<blockquote>\n<p>smart guy, you made it. the next level is [105, 110, 116, 101, 103, 114, 105, 116, 121]</p>\n</blockquote>\n<p>再将得到的信息转一次<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msg = [<span class=\"number\">105</span>, <span class=\"number\">110</span>, <span class=\"number\">116</span>, <span class=\"number\">101</span>, <span class=\"number\">103</span>, <span class=\"number\">114</span>, <span class=\"number\">105</span>, <span class=\"number\">116</span>, <span class=\"number\">121</span>]</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span>.join([chr(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> msg])</span><br></pre></td></tr></table></figure></p>\n<p>得到<strong>integrity</strong>， <a href=\"http://www.pythonchallenge.com/pc/def/integrity.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/def/integrity.html</a></p>"},{"title":"Python Challenge (Level 9)","date":"2015-01-23T02:32:31.000Z","_content":"[第9关](http://www.pythonchallenge.com/pc/return/good.html)\n图片上散落着一些黑点， 网页title提示**connect the dots**. 看来还是要用到图像处理模块——[Pillow](https://pillow.readthedocs.org/index.html)\n\nPage Source里有first和second两组数据，看起来似乎是两组坐标[x1, y1, x2, y2, ...]. Pillow里面的**[ImageDraw](https://pillow.readthedocs.org/reference/ImageDraw.html)**有Draw.line方法， 参数格式与first, second的格式吻合。\n<!-- more -->\n\n``` Python\n# -*- coding:utf-8 -*-\nfrom PIL import Image, ImageDraw\n\nfirst = [146,399,163,403, ...]   #限于篇幅， 省略了坐标数据\nsecond = [156,141,165,135, ...]\nim = Image.open('good.jpg')\n\nnewIm = Image.new('L', im.size)  #新建8bit黑白图像，默认填充黑色\ndraw = ImageDraw.Draw(newIm)\ndraw.line(first, fill=255)       #画白色线条\ndraw.line(second, fill=255)\nnewIm.show()\n```\n\n画出来是一头牛的轮廓，输入cow， 提示 *hmm. it's a male.*， 得到最终答案——bull， http://www.pythonchallenge.com/pc/return/bull.html\n","source":"_posts/pc9.md","raw":"title: Python Challenge (Level 9)\ndate: 2015-01-23 10:32:31\ntags: [Python]\n---\n[第9关](http://www.pythonchallenge.com/pc/return/good.html)\n图片上散落着一些黑点， 网页title提示**connect the dots**. 看来还是要用到图像处理模块——[Pillow](https://pillow.readthedocs.org/index.html)\n\nPage Source里有first和second两组数据，看起来似乎是两组坐标[x1, y1, x2, y2, ...]. Pillow里面的**[ImageDraw](https://pillow.readthedocs.org/reference/ImageDraw.html)**有Draw.line方法， 参数格式与first, second的格式吻合。\n<!-- more -->\n\n``` Python\n# -*- coding:utf-8 -*-\nfrom PIL import Image, ImageDraw\n\nfirst = [146,399,163,403, ...]   #限于篇幅， 省略了坐标数据\nsecond = [156,141,165,135, ...]\nim = Image.open('good.jpg')\n\nnewIm = Image.new('L', im.size)  #新建8bit黑白图像，默认填充黑色\ndraw = ImageDraw.Draw(newIm)\ndraw.line(first, fill=255)       #画白色线条\ndraw.line(second, fill=255)\nnewIm.show()\n```\n\n画出来是一头牛的轮廓，输入cow， 提示 *hmm. it's a male.*， 得到最终答案——bull， http://www.pythonchallenge.com/pc/return/bull.html\n","slug":"pc9","published":1,"updated":"2018-06-10T17:05:07.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji92xs9j001qytk0c9jl9v3v","content":"<p><a href=\"http://www.pythonchallenge.com/pc/return/good.html\" target=\"_blank\" rel=\"noopener\">第9关</a><br>图片上散落着一些黑点， 网页title提示<strong>connect the dots</strong>. 看来还是要用到图像处理模块——<a href=\"https://pillow.readthedocs.org/index.html\" target=\"_blank\" rel=\"noopener\">Pillow</a></p>\n<p>Page Source里有first和second两组数据，看起来似乎是两组坐标[x1, y1, x2, y2, …]. Pillow里面的<strong><a href=\"https://pillow.readthedocs.org/reference/ImageDraw.html\" target=\"_blank\" rel=\"noopener\">ImageDraw</a></strong>有Draw.line方法， 参数格式与first, second的格式吻合。<br><a id=\"more\"></a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw</span><br><span class=\"line\"></span><br><span class=\"line\">first = [<span class=\"number\">146</span>,<span class=\"number\">399</span>,<span class=\"number\">163</span>,<span class=\"number\">403</span>, ...]   <span class=\"comment\">#限于篇幅， 省略了坐标数据</span></span><br><span class=\"line\">second = [<span class=\"number\">156</span>,<span class=\"number\">141</span>,<span class=\"number\">165</span>,<span class=\"number\">135</span>, ...]</span><br><span class=\"line\">im = Image.open(<span class=\"string\">'good.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">newIm = Image.new(<span class=\"string\">'L'</span>, im.size)  <span class=\"comment\">#新建8bit黑白图像，默认填充黑色</span></span><br><span class=\"line\">draw = ImageDraw.Draw(newIm)</span><br><span class=\"line\">draw.line(first, fill=<span class=\"number\">255</span>)       <span class=\"comment\">#画白色线条</span></span><br><span class=\"line\">draw.line(second, fill=<span class=\"number\">255</span>)</span><br><span class=\"line\">newIm.show()</span><br></pre></td></tr></table></figure>\n<p>画出来是一头牛的轮廓，输入cow， 提示 <em>hmm. it’s a male.</em>， 得到最终答案——bull， <a href=\"http://www.pythonchallenge.com/pc/return/bull.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/bull.html</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.pythonchallenge.com/pc/return/good.html\" target=\"_blank\" rel=\"noopener\">第9关</a><br>图片上散落着一些黑点， 网页title提示<strong>connect the dots</strong>. 看来还是要用到图像处理模块——<a href=\"https://pillow.readthedocs.org/index.html\" target=\"_blank\" rel=\"noopener\">Pillow</a></p>\n<p>Page Source里有first和second两组数据，看起来似乎是两组坐标[x1, y1, x2, y2, …]. Pillow里面的<strong><a href=\"https://pillow.readthedocs.org/reference/ImageDraw.html\" target=\"_blank\" rel=\"noopener\">ImageDraw</a></strong>有Draw.line方法， 参数格式与first, second的格式吻合。<br>","more":"</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw</span><br><span class=\"line\"></span><br><span class=\"line\">first = [<span class=\"number\">146</span>,<span class=\"number\">399</span>,<span class=\"number\">163</span>,<span class=\"number\">403</span>, ...]   <span class=\"comment\">#限于篇幅， 省略了坐标数据</span></span><br><span class=\"line\">second = [<span class=\"number\">156</span>,<span class=\"number\">141</span>,<span class=\"number\">165</span>,<span class=\"number\">135</span>, ...]</span><br><span class=\"line\">im = Image.open(<span class=\"string\">'good.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">newIm = Image.new(<span class=\"string\">'L'</span>, im.size)  <span class=\"comment\">#新建8bit黑白图像，默认填充黑色</span></span><br><span class=\"line\">draw = ImageDraw.Draw(newIm)</span><br><span class=\"line\">draw.line(first, fill=<span class=\"number\">255</span>)       <span class=\"comment\">#画白色线条</span></span><br><span class=\"line\">draw.line(second, fill=<span class=\"number\">255</span>)</span><br><span class=\"line\">newIm.show()</span><br></pre></td></tr></table></figure>\n<p>画出来是一头牛的轮廓，输入cow， 提示 <em>hmm. it’s a male.</em>， 得到最终答案——bull， <a href=\"http://www.pythonchallenge.com/pc/return/bull.html\" target=\"_blank\" rel=\"noopener\">http://www.pythonchallenge.com/pc/return/bull.html</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cji92xs710000ytk0c6hj0oik","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs7p0007ytk0z6azs9ru"},{"post_id":"cji92xs7n0005ytk0utq14iwr","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs7s0009ytk0jaoyofil"},{"post_id":"cji92xs7q0008ytk084ubfta4","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs7v000cytk031sp86x8"},{"post_id":"cji92xs770001ytk04qkogecr","tag_id":"cji92xs7p0006ytk0yi2x726o","_id":"cji92xs7y000eytk0fvll2uu1"},{"post_id":"cji92xs7t000aytk0jo2rbxcu","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs81000hytk0i0g3e0pl"},{"post_id":"cji92xs7w000dytk0b7pfzo4a","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs84000jytk0dmiktcd6"},{"post_id":"cji92xs7f0003ytk0no7mw9gd","tag_id":"cji92xs7p0006ytk0yi2x726o","_id":"cji92xs86000lytk0abfph3g3"},{"post_id":"cji92xs7z000fytk0on8u0sxb","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs89000nytk0wcgpschp"},{"post_id":"cji92xs82000iytk09vcd0erm","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8c000pytk01znzkobf"},{"post_id":"cji92xs7i0004ytk0m7w5n25d","tag_id":"cji92xs7p0006ytk0yi2x726o","_id":"cji92xs8f000rytk0xgjua9x7"},{"post_id":"cji92xs84000kytk036baxrvg","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8j000tytk08olus7wt"},{"post_id":"cji92xs87000mytk0zax2ggom","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8m000vytk02x1t6ax4"},{"post_id":"cji92xs8a000oytk0igsi3i01","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8p000xytk0ihvylc04"},{"post_id":"cji92xs8d000qytk0mykf24qy","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8q000zytk0e7fyldrs"},{"post_id":"cji92xs8h000sytk0q9s6yn8c","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8s0011ytk0fugg9n01"},{"post_id":"cji92xs8k000uytk0g1zq7oxq","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8u0013ytk0rhi84qwr"},{"post_id":"cji92xs8n000wytk0a8kxkyfv","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8w0015ytk0t8vv4nc9"},{"post_id":"cji92xs8p000yytk0vrhtjzet","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs8z0017ytk0i72o3ji9"},{"post_id":"cji92xs8r0010ytk0bl0m9ghb","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs910019ytk08l34k130"},{"post_id":"cji92xs8t0012ytk0oyk3zdnv","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs92001bytk0mu23lavg"},{"post_id":"cji92xs8v0014ytk0uxf92adn","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs94001dytk0ctvkrplo"},{"post_id":"cji92xs8x0016ytk085rzqkwd","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs96001fytk0173a9an3"},{"post_id":"cji92xs8z0018ytk01bdvn68h","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9a001hytk0ljufwvn7"},{"post_id":"cji92xs91001aytk0nif0mqxp","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9c001jytk0j0r12ddp"},{"post_id":"cji92xs93001cytk0rzkg4mi2","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9e001lytk02fgldx1i"},{"post_id":"cji92xs95001eytk0osxykhzf","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9g001nytk04keiniik"},{"post_id":"cji92xs96001gytk05azi4827","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9j001pytk0gfcutwyp"},{"post_id":"cji92xs9a001iytk0f3cqf3ib","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9m001rytk094ugsuub"},{"post_id":"cji92xs9d001kytk0o60c5fit","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9m001sytk0fzyoc7di"},{"post_id":"cji92xs9e001mytk0gcqzcl2b","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9m001tytk09nkaxot9"},{"post_id":"cji92xs9h001oytk0fnicdw4r","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9m001uytk0b1vl01et"},{"post_id":"cji92xs9j001qytk0c9jl9v3v","tag_id":"cji92xs7d0002ytk0zg99sp1t","_id":"cji92xs9m001vytk0dsogyioq"}],"Tag":[{"name":"Python","_id":"cji92xs7d0002ytk0zg99sp1t"},{"name":"随笔","_id":"cji92xs7p0006ytk0yi2x726o"}]}}